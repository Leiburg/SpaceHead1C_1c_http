
// SPDX-License-Identifier: Apache-2.0+

#Область ОписаниеПеременных
&НаКлиенте
Перем ТекущееИмяЗаголовка;

&НаКлиенте
Перем ДанныеТелаОтвета;
#КонецОбласти

#Область ОбработчикиСобытийФормы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	СохранятьВИсторию = Истина;
	ПоддержкаСжатогоОтвета = Ложь;
	ИспользоватьСессию = Ложь;
	ПоддержкаCookie = Ложь;
	ПорогПеренаправлений = 10;
	
	Для Каждого КЗ Из КлиентHTTPПовтИсп.РегионыAWS() Цикл
		Элементы.РегионAWS.СписокВыбора.Добавить(КЗ.Значение);
	КонецЦикла;
	
	РазделыКонсоли = Элементы.РазделыКонсоли.СписокВыбора[0];
	Схема = Элементы.Схема.СписокВыбора[0];
	ТипАутентификации = Элементы.ТипАутентификации.СписокВыбора[0];
	ТипТелаЗапроса = Элементы.ТипТелаЗапроса.СписокВыбора[0].Значение;
	ТипТелаЗапросаКакЕсть = Элементы.ТипТелаЗапросаКакЕсть.СписокВыбора[0];
	ФорматТелаОтвета = Элементы.ФорматТелаОтвета.СписокВыбора[0];
	ПротоколПрокси = Элементы.ПротоколПрокси.СписокВыбора[0];
	ИдентификаторРесурса = "https://ya.ru";
	
	Дополнительно = Новый Структура("Сессия, История", НоваяСессия(), Новый Соответствие);
КонецПроцедуры
#КонецОбласти

#Область КОНСОЛЬ
#Область ОбработчикиСобытийЭлементовШапкиФормы
&НаКлиенте
Процедура РазделыКонсолиПриИзменении(Элемент)
	Элементы.ГруппаРазделы.ТекущаяСтраница = ?(
		РазделыКонсоли = Элементы.РазделыКонсоли.СписокВыбора[0].Значение,
		Элементы.РазделЗапрос,
		Элементы.РазделОтвет
	);
КонецПроцедуры

&НаКлиенте
Процедура ЗаголовкиОтветаПриАктивизацииСтроки(Элемент)
	ТекущиеДанные = Элементы.ЗаголовкиОтвета.ТекущиеДанные;
	ЗначениеЗаголовкаОтвета = ?(ТекущиеДанные = Неопределено, "", ТекущиеДанные.Значение);
КонецПроцедуры

&НаКлиенте
Процедура ТипАутентификацииПриИзменении(Элемент)
	ТипАутентификацииСписокВыбора = Элементы.ТипАутентификации.СписокВыбора;
	ОтображатьПользовательПароль = (
		ТипАутентификации = ТипАутентификацииСписокВыбора[1].Значение
		ИЛИ ТипАутентификации = ТипАутентификацииСписокВыбора[2].Значение
		ИЛИ ТипАутентификации = ТипАутентификацииСписокВыбора[3].Значение
	);
	ОтображатьТокен = (ТипАутентификации = ТипАутентификацииСписокВыбора[4].Значение);
	ОтображатьAWS4 = (ТипАутентификации = ТипАутентификацииСписокВыбора[5].Значение);
	ОтображатьHawk = (ТипАутентификации = ТипАутентификацииСписокВыбора[6].Значение);
	
	Элементы.ПоказатьПарольАутентификации.Пометка = Истина;
	
	ПоказатьПарольАутентификации(Неопределено);
	
	Элементы.ПользовательАутентификации.Видимость = ОтображатьПользовательПароль;
	Элементы.ГруппаПарольАутентификации.Видимость = ОтображатьПользовательПароль;
	
	Элементы.ПоказатьТокенАутентификации.Пометка = Истина;
	
	ПоказатьТокенАутентификации(Неопределено);
	
	Элементы.ГруппаТокенАутентификации.Видимость = ОтображатьТокен;
	
	Элементы.ПоказатьСекретныйКлючAWS.Пометка = Истина;
	
	ПоказатьСекретныйКлючAWS(Неопределено);
	
	Элементы.КлючДоступаAWS.Видимость = ОтображатьAWS4;
	Элементы.ГруппаСекретныйКлючAWS.Видимость = ОтображатьAWS4;
	Элементы.РегионAWS.Видимость = ОтображатьAWS4;
	Элементы.СервисAWS.Видимость = ОтображатьAWS4;
	
	Элементы.ПоказатьКлючHawk.Пометка = Истина;
	
	ПоказатьКлючHawk(Неопределено);
	
	Элементы.ИдентификаторHawk.Видимость = ОтображатьHawk;
	Элементы.ГруппаКлючHawk.Видимость = ОтображатьHawk;
	Элементы.ДополнениеHawk.Видимость = ОтображатьHawk;
	Элементы.ИдентификаторПриложенияHawk.Видимость = ОтображатьHawk;
	Элементы.ДелегированиеHawk.Видимость = ОтображатьHawk;
КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторРесурсаПриИзменении(Элемент)
	ЗаполнитьПараметрыПоИдентификаторуРесурса();
	РассчитатьПараметрыИдентификатораРесурса();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройки(Элемент)
	Элементы.ПрименитьНастройки.КнопкаПоУмолчанию = Истина;
	Элементы.Основная.ТекущаяСтраница = Элементы.СтраницаНастройки;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИсторию(Команда)
	ВывестиИсторию();
	
	Элементы.ЗакрытьИсторию.КнопкаПоУмолчанию = Истина;
	Элементы.Основная.ТекущаяСтраница = Элементы.СтраницаИстория;
КонецПроцедуры

&НаКлиенте
Процедура СгенерироватьКод(Элемент)
	ОткрытьФорму(
		"Обработка.КонсольКлиентаHTTP.Форма.РедакторТекстовогоПоля",
		Новый Структура("Текст", КодЗапросаКонсоли()),
		ЭтотОбъект, , , , ,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьCookies(Элемент)
	Если НЕ ПоддержкаCookie Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("РедакторCookiesЗавершение", ЭтотОбъект, Дополнительно.Сессия);
	
	ОткрытьФорму(
		"Обработка.КонсольКлиентаHTTP.Форма.РедакторCookies",
		Новый Структура("Печенье", Дополнительно.Сессия.Печенье),
		ЭтотОбъект, , , ,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиКомандФормы
&НаКлиенте
Процедура ВыполнитьЗапрос(Команда)
	Если ИспользоватьПрокси И ПустаяСтрока(СерверПрокси) Тогда
		Элементы.Основная.ТекущаяСтраница = Элементы.СтраницаНастройки;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Необходимо указать имя прокси-сервера";
		Сообщение.Поле = "СерверПрокси";
		Сообщение.Сообщить();
		
		Возврат;
	КонецЕсли;
	
	ПЗ = МножествоПараметровЗапроса();
	ДП = ДополнительныеПараметрыЗапроса();
	
	ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ОтветHTTP = ОтветВыполненногоЗапроса(ПЗ, ДП);
	
	ЗафиксироватьВремяВыполненияЗапроса(ВремяНачала);
	ОбработатьОтвет(ОтветHTTP);
	
	Если ИспользоватьСессию И ПоддержкаCookie Тогда
		КлиентHTTPКлиентСервер.СкопироватьПеченье(Дополнительно, ДП);
	КонецЕсли;
	
	Если СохранятьВИсторию Тогда
		ДобавитьВИсторию(ОтветHTTP);
	КонецЕсли;
	
	РазделыКонсоли = Элементы.РазделыКонсоли.СписокВыбора[1];
	
	РазделыКонсолиПриИзменении(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияКонтекстВыполненияНажатие(Элемент)
	ИзменитьКонтекстВыполненияЗапроса();
КонецПроцедуры

&НаКлиенте
Процедура КонструкторURL(Команда)
	Оповещение = Новый ОписаниеОповещения("КонструкторURIЗавершение", ЭтотОбъект);
	
	ОткрытьФорму(
		"Обработка.КонсольКлиентаHTTP.Форма.КонструкторИдентификатораРесурса",
		Новый Структура("ИдентификаторРесурса", ИдентификаторРесурса),
		ЭтотОбъект, , , ,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПарольАутентификации(Команда)
	ИзменитьРежимОтображенияПароля(Элементы.ПоказатьПарольАутентификации, Элементы.ПарольАутентификации);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьТокенАутентификации(Команда)
	ИзменитьРежимОтображенияПароля(Элементы.ПоказатьТокенАутентификации, Элементы.ТокенАутентификации);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСекретныйКлючAWS(Команда)
	ИзменитьРежимОтображенияПароля(Элементы.ПоказатьСекретныйКлючAWS, Элементы.СекретныйКлючAWS);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКлючHawk(Команда)
	ИзменитьРежимОтображенияПароля(Элементы.ПоказатьКлючHawk, Элементы.КлючHawk);
КонецПроцедуры

&НаКлиенте
Процедура ИмпортироватьPostman(Команда)
	Оповещение = Новый ОписаниеОповещения("ВыборФайлаИмпортаPostmanЗавершение", ЭтотОбъект);
		
	ПоказатьДиалогВыбораФайла(Оповещение, "Выбор файла для импорта", "JSON(*.json)|*.json");
КонецПроцедуры

&НаКлиенте
Процедура ИмпортироватьCurl(Команда)
	Оповещение = Новый ОписаниеОповещения("РедакторКомандыCurlЗавершение", ЭтотОбъект);
	
	ОткрытьФорму(
		"Обработка.КонсольКлиентаHTTP.Форма.РедакторТекстовогоПоля",
		ПараметрыОткрытияФормыКомандыCurl(КомандаCurlЗапросаКонсоли()),
		ЭтотОбъект, , , ,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
КонецПроцедуры
#КонецОбласти
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПараметрыЗапроса
&НаКлиенте
Процедура ПараметрыЗапросаПриИзменении(Элемент)
	РассчитатьПараметрыИдентификатораРесурса();
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗапросаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И НЕ Копирование Тогда
		Элемент.ТекущиеДанные.Активно = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗапросаКлючОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	Оповещение = Новый ОписаниеОповещения("РедакторПараметраЗапросаЗавершение", ЭтотОбъект, "Ключ");
	
	ОткрытьФорму(
		"Обработка.КонсольКлиентаHTTP.Форма.РедакторТекстовогоПоля",
		Новый Структура("Текст", ТекущиеДанные.Ключ),
		ЭтотОбъект, , , ,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗапросаЗначениеОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	Оповещение = Новый ОписаниеОповещения("РедакторПараметраЗапросаЗавершение", ЭтотОбъект, "Значение");
	
	ОткрытьФорму(
		"Обработка.КонсольКлиентаHTTP.Форма.РедакторТекстовогоПоля",
		Новый Структура("Текст", ТекущиеДанные.Значение),
		ЭтотОбъект, , , ,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗаголовкиЗапроса
&НаКлиенте
Процедура ЗаголовкиЗапросаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И НЕ Копирование Тогда
		Элемент.ТекущиеДанные.Активно = Истина;
	КонецЕсли;
	
	ТекущееИмяЗаголовка = ?(НоваяСтрока, Неопределено, Элемент.ТекущиеДанные.Ключ);
КонецПроцедуры

&НаКлиенте
Процедура ЗаголовкиЗапросаПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если ОтменаРедактирования Тогда
		Если НЕ НоваяСтрока Тогда
			Элемент.ТекущиеДанные.Ключ = ТекущееИмяЗаголовка;
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	ИмяЗаголовка = ИсправленноеИмяЗаголовкаЗапроса(Элемент.ТекущиеДанные.Ключ);
	Если ТекущееИмяЗаголовка <> Неопределено И ИмяЗаголовка = ТекущееИмяЗаголовка Тогда
		Возврат;
	КонецЕсли;
	
	НайденныеСтроки = ЗаголовкиЗапроса.НайтиСтроки(Новый Структура("Ключ", ИмяЗаголовка));
	ПозицияТекущейСтрокиВНайденных = НайденныеСтроки.Найти(ЗаголовкиЗапроса.НайтиПоИдентификатору(Элемент.ТекущаяСтрока));
	Если ПозицияТекущейСтрокиВНайденных <> Неопределено Тогда
		НайденныеСтроки.Удалить(ПозицияТекущейСтрокиВНайденных);
	КонецЕсли;
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		Отказ = Истина;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Введите уникальное имя заголовка (ограничение платформы 1С)";
		Сообщение.Сообщить();
		
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаголовкиЗапросаКлючПриИзменении(Элемент)
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	ТекущиеДанные.Ключ = ИсправленноеИмяЗаголовкаЗапроса(ТекущиеДанные.Ключ);
КонецПроцедуры

&НаКлиенте
Процедура ЗаголовкиЗапросаКлючОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	Оповещение = Новый ОписаниеОповещения("РедакторИмениЗаголовкаЗапросаЗавершение", ЭтотОбъект);
	
	ОткрытьФорму(
		"Обработка.КонсольКлиентаHTTP.Форма.РедакторТекстовогоПоля",
		Новый Структура("Текст", ТекущиеДанные.Ключ),
		ЭтотОбъект, , , ,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
КонецПроцедуры

&НаКлиенте
Процедура ЗаголовкиЗапросаЗначениеОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	Оповещение = Новый ОписаниеОповещения("РедакторЗначенияЗаголовкаЗапросаЗавершение", ЭтотОбъект);
	
	ОткрытьФорму(
		"Обработка.КонсольКлиентаHTTP.Форма.РедакторТекстовогоПоля",
		Новый Структура("Текст", ТекущиеДанные.Значение),
		ЭтотОбъект, , , ,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
КонецПроцедуры
#КонецОбласти

#Область ТЕЛО_ЗАПРОСА
#Область ОбработчикиСобытийЭлементовШапкиФормы
&НаКлиенте
Процедура ТипТелаЗапросаПриИзменении(Элемент)
	ТипТелаЗапросаСписокВыбора = Элементы.ТипТелаЗапроса.СписокВыбора;
	Элементы.ГруппаТипыТелаЗапроса.Видимость = (ТипТелаЗапроса <> ТипТелаЗапросаСписокВыбора[0].Значение);
	Если ТипТелаЗапроса = ТипТелаЗапросаСписокВыбора[1].Значение Тогда // form-data
		Если ПустаяСтрока(Разделитель) Тогда
			РазделительОчистка(Неопределено, Ложь);
		КонецЕсли;
		
		Элементы.ГруппаТипыТелаЗапроса.ТекущаяСтраница = Элементы.ТипыТелаЗапросаДанныеФормы;
	ИначеЕсли ТипТелаЗапроса = ТипТелаЗапросаСписокВыбора[2].Значение Тогда // x-www-form-urlencoded
		Элементы.ГруппаТипыТелаЗапроса.ТекущаяСтраница = Элементы.ТипыТелаЗапросаДанныеHTMLФормы;
	ИначеЕсли ТипТелаЗапроса = ТипТелаЗапросаСписокВыбора[3].Значение Тогда // raw
		Элементы.ГруппаТипыТелаЗапроса.ТекущаяСтраница = Элементы.ТипыТелаЗапросаКакЕсть;
	ИначеЕсли ТипТелаЗапроса = ТипТелаЗапросаСписокВыбора[4].Значение Тогда // binary
		Элементы.ГруппаТипыТелаЗапроса.ТекущаяСтраница = Элементы.ТипыТелаЗапросаДвоичныеДанные;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РазделительОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Разделитель = XMLСтрока(Новый УникальныйИдентификатор);
КонецПроцедуры

&НаКлиенте
Процедура ФайлТелаЗапросаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если ВыполнятьНаСервере Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	Оповещение = Новый ОписаниеОповещения("ВыборФайлаТелаЗапросаЗавершение", ЭтотОбъект);
	
	ПоказатьДиалогВыбораФайла(Оповещение, "Выбор файла для отправки");
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТелоЗапросаДанныеФормы
&НаКлиенте
Процедура ДанныеФормыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И НЕ Копирование Тогда
		ТекущиеДанные = Элемент.ТекущиеДанные;
		ТекущиеДанные.Тип     = Элемент.ПодчиненныеЭлементы.ДанныеФормыТип.СписокВыбора[0]; // Текст
		ТекущиеДанные.Активно = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДанныеФормыКлючОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	Оповещение = Новый ОписаниеОповещения(
		"РедакторПоляТелаЗапросаЗавершение",
		ЭтотОбъект,
		Новый Структура("ТаблицаФормы, ИмяПоля", Элемент.Родитель, "Ключ")
	);
	
	ОткрытьФорму(
		"Обработка.КонсольКлиентаHTTP.Форма.РедакторТекстовогоПоля",
		Новый Структура("Текст", ТекущиеДанные.Ключ),
		ЭтотОбъект, , , ,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
КонецПроцедуры

&НаКлиенте
Процедура ДанныеФормыТипПриИзменении(Элемент)
	Элемент.Родитель.ТекущиеДанные.Значение = "";
КонецПроцедуры

&НаКлиенте
Процедура ДанныеФормыЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	ДанныеФормыТипСписокВыбора = Элемент.Родитель.ПодчиненныеЭлементы.ДанныеФормыТип.СписокВыбора;
	
	Если ТекущиеДанные.Тип = ДанныеФормыТипСписокВыбора[1].Значение Тогда // Файл
		Если ВыполнятьНаСервере Тогда
			Возврат;
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("ВыборФайлаПоляФормыЗавершение", ЭтотОбъект, ТекущиеДанные);
		
		ПоказатьДиалогВыбораФайла(Оповещение, "Выбор файла для отправки");
	Иначе // Текст
		Оповещение = Новый ОписаниеОповещения(
			"РедакторПоляТелаЗапросаЗавершение",
			ЭтотОбъект,
			Новый Структура("ТаблицаФормы, ИмяПоля", Элемент.Родитель, "Значение")
		);
		
		ОткрытьФорму(
			"Обработка.КонсольКлиентаHTTP.Форма.РедакторТекстовогоПоля",
			Новый Структура("Текст", ТекущиеДанные.Значение),
			ЭтотОбъект, , , ,
			Оповещение,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
		);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТелоЗапросаДанныеHTMLФормы
&НаКлиенте
Процедура ТелоЗапросаДанныеHTMLФормыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И НЕ Копирование Тогда
		Элемент.ТекущиеДанные.Активно = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДанныеHTMLФормыКлючОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	Оповещение = Новый ОписаниеОповещения(
		"РедакторПоляТелаЗапросаЗавершение",
		ЭтотОбъект,
		Новый Структура("ТаблицаФормы, ИмяПоля", Элемент.Родитель, "Ключ")
	);
	
	ОткрытьФорму(
		"Обработка.КонсольКлиентаHTTP.Форма.РедакторТекстовогоПоля",
		Новый Структура("Текст", ТекущиеДанные.Ключ),
		ЭтотОбъект, , , ,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
КонецПроцедуры

&НаКлиенте
Процедура ДанныеHTMLФормыЗначениеОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	Оповещение = Новый ОписаниеОповещения(
		"РедакторПоляТелаЗапросаЗавершение",
		ЭтотОбъект,
		Новый Структура("ТаблицаФормы, ИмяПоля", Элемент.Родитель, "Значение")
	);
	
	ОткрытьФорму(
		"Обработка.КонсольКлиентаHTTP.Форма.РедакторТекстовогоПоля",
		Новый Структура("Текст", ТекущиеДанные.Значение),
		ЭтотОбъект, , , ,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
КонецПроцедуры
#КонецОбласти
#КонецОбласти

#Область ОТВЕТ
#Область ОбработчикиСобытийЭлементовШапкиФормы
&НаКлиенте
Процедура ФорматТелаОтветаПриИзменении(Элемент)
	ФорматТелаОтветаСписокВыбора = Элементы.ФорматТелаОтвета.СписокВыбора;
	Если ФорматТелаОтвета = ФорматТелаОтветаСписокВыбора[0].Значение Тогда // Текст
		Элементы.ГруппаФорматыТелаОтвета.ТекущаяСтраница = Элементы.ФорматТелаОтветаТекст;
	ИначеЕсли ФорматТелаОтвета = ФорматТелаОтветаСписокВыбора[1].Значение Тогда // JSON
		Элементы.ГруппаФорматыТелаОтвета.ТекущаяСтраница = Элементы.ФорматТелаОтветаJSON;
	ИначеЕсли ФорматТелаОтвета = ФорматТелаОтветаСписокВыбора[2].Значение Тогда // HTML
		Элементы.ГруппаФорматыТелаОтвета.ТекущаяСтраница = Элементы.ФорматТелаОтветаHTML;
	ИначеЕсли ФорматТелаОтвета = ФорматТелаОтветаСписокВыбора[3].Значение Тогда // Картинка
		Элементы.ГруппаФорматыТелаОтвета.ТекущаяСтраница = Элементы.ФорматТелаОтветаКартинка;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиКомандФормы
&НаКлиенте
Процедура ПопробоватьОтобразитьКартинку(Команда)
	Если НЕ ЗначениеЗаполнено(ДанныеТелаОтвета) И НЕ ТелоОтветаВФайл Тогда
		Возврат;
	КонецЕсли;
	
	ОтветКартинка = ПоместитьВоВременноеХранилище(
		Новый Картинка(?(ТелоОтветаВФайл, ИмяФайлаТелаОтвета, ДанныеТелаОтвета)),
		Новый УникальныйИдентификатор
	);
	Элементы.ОтветКартинка.Видимость = Истина;
	Элементы.ГруппаОтветНеКартинка.Видимость = Ложь;
КонецПроцедуры
#КонецОбласти
#КонецОбласти

#Область НАСТРОЙКИ
#Область ОбработчикиСобытийЭлементовШапкиФормы
&НаКлиенте
Процедура ДекорацияКонтекстВыполненияНастройкиНажатие(Элемент)
	ИзменитьКонтекстВыполненияЗапроса();
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаТелаОтветаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если ВыполнятьНаСервере Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	Оповещение = Новый ОписаниеОповещения("ВыборФайлаСохраненияТелаОтветаЗавершение", ЭтотОбъект);
		
	ПоказатьДиалогСохраненияФайла(Оповещение, "Выбор файла для сохранения");
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаТелаОтветаПриИзменении(Элемент)
	ТелоОтветаВФайл = НЕ ПустаяСтрока(ИмяФайлаТелаОтвета);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьСессиюПриИзменении(Элемент)
	Элементы.ГруппаНастройкиСессии.Доступность = ИспользоватьСессию;
	
	ПоддержкаCookieПриИзменении(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ПоддержкаCookieПриИзменении(Элемент)
	Элементы.ОткрытьCookies.Доступность = (ИспользоватьСессию И ПоддержкаCookie);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПроксиПриИзменении(Элемент)
	Элементы.ГруппаСерверПрокси.Доступность = ИспользоватьПрокси;
	Элементы.ПортПрокси.Доступность = ИспользоватьПрокси;
	Элементы.ПользовательПрокси.Доступность = ИспользоватьПрокси;
	Элементы.ГруппаПарольПрокси.Доступность = ИспользоватьПрокси;
	Элементы.ИспользоватьАутентификациюОСПрокси.Доступность = ИспользоватьПрокси;
	Элементы.НеИспользоватьПроксиДляЛокальныхАдресов.Доступность = ИспользоватьПрокси;
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиКомандФормы
&НаКлиенте
Процедура ПрименитьНастройки(Команда)
	Элементы.ФормаВыполнить.КнопкаПоУмолчанию = Истина;
	Элементы.Основная.ТекущаяСтраница = Элементы.СтраницаКонсоль;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПарольПрокси(Команда)
	ИзменитьРежимОтображенияПароля(Элементы.ПоказатьПарольПрокси, Элементы.ПарольПрокси);
КонецПроцедуры
#КонецОбласти
#КонецОбласти

#Область ИСТОРИЯ
#Область ОбработчикиСобытийЭлементовТаблицыФормыИстория
&НаКлиенте
Процедура ИсторияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ИсторияПередУдалением(Элемент, Отказ)
	Для Каждого Идентификатор Из Элемент.ВыделенныеСтроки Цикл
		Запись = История.НайтиПоИдентификатору(Идентификатор);
		
		Дополнительно.История.Удалить(Запись.ВременнаяМетка);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ИсторияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Стр = История.НайтиПоИдентификатору(ВыбраннаяСтрока);
	ОбъектИстории = Дополнительно.История.Получить(Стр.ВременнаяМетка);
	
#Область Заполнение_конфигурации_Консоли
	ОбъектИстории.Свойство("ВыполнятьНаСервере", ВыполнятьНаСервере);
	ОбъектИстории.Свойство("ТелоОтветаВФайл", ТелоОтветаВФайл);
	ОбъектИстории.Свойство("ИмяФайлаТелаОтвета", ИмяФайлаТелаОтвета);
	ОбъектИстории.Свойство("ПоддержкаСжатогоОтвета", ПоддержкаСжатогоОтвета);
	ОбъектИстории.Свойство("АгентПользователя", АгентПользователя);
	ОбъектИстории.Свойство("ИспользоватьСессию", ИспользоватьСессию);
	ОбъектИстории.Свойство("Сессия", Дополнительно.Сессия);
	ОбъектИстории.Свойство("ПорогПеренаправлений", ПорогПеренаправлений);
	ОбъектИстории.Свойство("ПеренаправлениеКакGET", ПеренаправлениеКакGET);
	ОбъектИстории.Свойство("ПоддержкаCookie", ПоддержкаCookie);
	ОбъектИстории.Свойство("ИспользоватьПрокси", ИспользоватьПрокси);
	ОбъектИстории.Свойство("НеИспользоватьПроксиДляЛокальныхАдресов", НеИспользоватьПроксиДляЛокальныхАдресов);
	ОбъектИстории.Свойство("ПротоколПрокси", ПротоколПрокси);
	ОбъектИстории.Свойство("СерверПрокси", СерверПрокси);
	ОбъектИстории.Свойство("ПортПрокси", ПортПрокси);
	ОбъектИстории.Свойство("ПользовательПрокси", ПользовательПрокси);
	ОбъектИстории.Свойство("ПарольПрокси", ПарольПрокси);
	ОбъектИстории.Свойство("ИспользоватьАутентификациюОСПрокси", ИспользоватьАутентификациюОСПрокси);
	
	Если Дополнительно.Сессия = Неопределено Тогда
		Дополнительно.Сессия = НоваяСессия();
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ПротоколПрокси) Тогда
		ПротоколПрокси = Элементы.ПротоколПрокси.СписокВыбора[0];
	КонецЕсли;
	
	ИзменитьКонтекстВыполненияЗапроса();
	ИспользоватьСессиюПриИзменении(Неопределено);
	ИспользоватьПроксиПриИзменении(Неопределено);
#КонецОбласти

#Область Заполнение_запроса
	ОбъектИстории.Свойство("URI", ИдентификаторРесурса);
	
	ИдентификаторРесурсаПриИзменении(Неопределено);
	
	ОбъектИстории.Свойство("Схема", Схема);
	
	ЗаголовкиЗапроса.Очистить();
	ЗаголовкиИзИстории = Неопределено;
	ОбъектИстории.Свойство("ЗаголовкиЗапроса", ЗаголовкиИзИстории);
	Для Каждого ЗаголовокЗапроса Из ?(ЗаголовкиИзИстории = Неопределено, Новый Массив, ЗаголовкиИзИстории) Цикл
		ЗаполнитьЗначенияСвойств(ЗаголовкиЗапроса.Добавить(), ЗаголовокЗапроса);
	КонецЦикла;
	
	ОбъектИстории.Свойство("ТипАутентификации", ТипАутентификации);
	ОбъектИстории.Свойство("ПользовательАутентификации", ПользовательАутентификации);
	ОбъектИстории.Свойство("ПарольАутентификации", ПарольАутентификации);
	ОбъектИстории.Свойство("ТокенАутентификации", ТокенАутентификации);
	ОбъектИстории.Свойство("AWSКлючДоступа", AWSКлючДоступа);
	ОбъектИстории.Свойство("AWSСекретныйКлюч", AWSСекретныйКлюч);
	ОбъектИстории.Свойство("AWSРегион", AWSРегион);
	ОбъектИстории.Свойство("AWSСервис", AWSСервис);
	ОбъектИстории.Свойство("HawkИдентификатор", HawkИдентификатор);
	ОбъектИстории.Свойство("HawkКлюч", HawkКлюч);
	ОбъектИстории.Свойство("HawkДополнение", HawkДополнение);
	ОбъектИстории.Свойство("HawkИдентификаторПриложения", HawkИдентификаторПриложения);
	ОбъектИстории.Свойство("HawkДелегирование", HawkДелегирование);
	
	ТипАутентификацииПриИзменении(Неопределено);
	
	ОбъектИстории.Свойство("ТипТелаЗапроса", ТипТелаЗапроса);
	ОбъектИстории.Свойство("ТелоЗапросаТекст", ТелоЗапросаТекст);
	ОбъектИстории.Свойство("ТелоЗапросаФайл", ТелоЗапросаФайл);
	ОбъектИстории.Свойство("Разделитель", Разделитель);
	
	ТипТелаЗапросаПриИзменении(Неопределено);
	
	ТелоЗапросаДанныеФормы.Очистить();
	ТелоФормаИзИстории = Неопределено;
	ОбъектИстории.Свойство("ТелоФорма", ТелоФормаИзИстории);
	Для Каждого ЭлементФормы Из ?(ТелоФормаИзИстории = Неопределено, Новый Массив, ТелоФормаИзИстории) Цикл
		ЗаполнитьЗначенияСвойств(ТелоЗапросаДанныеФормы.Добавить(), ЭлементФормы);
	КонецЦикла;
	
	ТелоЗапросаДанныеHTMLФормы.Очистить();
	ТелоHTMLФормаИзИстории = Неопределено;
	ОбъектИстории.Свойство("ТелоHTMLФорма", ТелоHTMLФормаИзИстории);
	Для Каждого ЭлементФормы Из ?(ТелоHTMLФормаИзИстории = Неопределено, Новый Массив, ТелоHTMLФормаИзИстории) Цикл
		ЗаполнитьЗначенияСвойств(ТелоЗапросаДанныеHTMLФормы.Добавить(), ЭлементФормы);
	КонецЦикла;
#КонецОбласти
	
#Область Заполнение_ответа
	ОбъектИстории.Свойство("ВремяВыполнения", ВремяВыполнения);
	
	Если ОбъектИстории.Свойство("Ответ") Тогда
		ОбработатьОтвет(ОбъектИстории.Ответ);
	КонецЕсли;
#КонецОбласти
	
	РазделыКонсоли = Элементы.РазделыКонсоли.СписокВыбора[0].Значение;
	
	РазделыКонсолиПриИзменении(Неопределено);
	ЗакрытьИсторию(Неопределено);
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиКомандФормы
&НаКлиенте
Процедура ЗакрытьИсторию(Команда)
	Элементы.ФормаВыполнить.КнопкаПоУмолчанию = Истина;
	Элементы.Основная.ТекущаяСтраница = Элементы.СтраницаКонсоль;
КонецПроцедуры

&НаКлиенте
Процедура ЭкспортироватьИсторию(Команда)
	Оповещение = Новый ОписаниеОповещения("ВыборФайлаЭкспортаИстории", ЭтотОбъект);
		
	ПоказатьДиалогСохраненияФайла(Оповещение, "Выбор файла для экспорта истории", "HTTP-клиент(*.hc)|*.hc");
КонецПроцедуры

&НаКлиенте
Процедура ИмпортироватьИсторию(Команда)
	Оповещение = Новый ОписаниеОповещения("ВыборФайлаИмпортаИстории", ЭтотОбъект);
		
	ПоказатьДиалогВыбораФайла(Оповещение, "Выбор файла для импорта истории", "HTTP-клиент(*.hc)|*.hc");
КонецПроцедуры
#КонецОбласти
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
&НаКлиенте
Функция ОтветВыполненногоЗапроса(Знач ПараметрыЗапроса, ДополнительныеПараметры)
	Схемы = Элементы.Схема.СписокВыбора;
	Если Схема = Схемы[0].Значение Тогда // GET
		фРезультат = ?(
			ВыполнятьНаСервере,
			ПолучитьНаСервере(ИдентификаторРесурса, ПараметрыЗапроса, ДополнительныеПараметры),
			ПолучитьНаКлиенте(ПараметрыЗапроса, ДополнительныеПараметры)
		);
	ИначеЕсли Схема = Схемы[1].Значение Тогда // POST
		фРезультат = ОтветВыполненногоЗапросаPOST(ПараметрыЗапроса, ДополнительныеПараметры); 
	ИначеЕсли Схема = Схемы[2].Значение Тогда // PUT
		фРезультат = ОтветВыполненногоЗапросаPUT(ПараметрыЗапроса, ДополнительныеПараметры);
	ИначеЕсли Схема = Схемы[3].Значение Тогда // DELETE
		ТипыТелаЗапроса = Элементы.ТипТелаЗапроса.СписокВыбора;
		ТелоЗапроса = ?(
			ТипТелаЗапроса = ТипыТелаЗапроса[3].Значение, // raw
			ТелоЗапросаТекст,
			""
		);
		фРезультат = ?(
			ВыполнятьНаСервере,
			УдалитьНаСервере(ИдентификаторРесурса, ТелоЗапроса, ПараметрыЗапроса, ДополнительныеПараметры),
			УдалитьНаКлиенте(ТелоЗапроса, ПараметрыЗапроса, ДополнительныеПараметры)
		);
	ИначеЕсли Схема = Схемы[4].Значение Тогда // HEAD
		фРезультат = ?(
			ВыполнятьНаСервере,
			ПолучитьЗаголовкиНаСервере(ИдентификаторРесурса, ПараметрыЗапроса, ДополнительныеПараметры),
			ПолучитьЗаголовкиНаКлиенте(ПараметрыЗапроса, ДополнительныеПараметры)
		);
	ИначеЕсли Схема = Схемы[5].Значение Тогда // PATCH
		фРезультат = ОтветВыполненногоЗапросаPATCH(ПараметрыЗапроса, ДополнительныеПараметры);
	Иначе
		ВызватьИсключение "Неизвестная схема запроса";
	КонецЕсли;
	
	Возврат фРезультат;
КонецФункции

&НаКлиенте
Функция ОтветВыполненногоЗапросаPOST(Знач ПараметрыЗапроса, ДополнительныеПараметры)
	ТипыТелаЗапроса = Элементы.ТипТелаЗапроса.СписокВыбора;
	Если ТипТелаЗапроса = ТипыТелаЗапроса[0].Значение Тогда // none
		фРезультат = ?(
			ВыполнятьНаСервере,
			ОтправитьТекстНаСервере(ИдентификаторРесурса, "", ПараметрыЗапроса, ДополнительныеПараметры),
			ОтправитьТекстНаКлиенте("", ПараметрыЗапроса, ДополнительныеПараметры)
		);
	ИначеЕсли ТипТелаЗапроса = ТипыТелаЗапроса[1].Значение Тогда // form-data
		фРезультат = ?(
			ВыполнятьНаСервере,
			ОтправитьДанныеФормыНаСервере(ПараметрыЗапроса, ДополнительныеПараметры),
			ОтправитьДанныеФормыНаКлиенте(ПараметрыЗапроса, ДополнительныеПараметры)
		);
	ИначеЕсли ТипТелаЗапроса = ТипыТелаЗапроса[2].Значение Тогда // x-www-form-urlencoded
		фРезультат = ?(
			ВыполнятьНаСервере,
			ОтправитьДанныеHTMLФормыНаСервере(ИдентификаторРесурса, ДанныеHTMLФормыТелаЗапроса(), ПараметрыЗапроса, ДополнительныеПараметры),
			ОтправитьДанныеHTMLФормыНаКлиенте(ДанныеHTMLФормыТелаЗапроса(), ПараметрыЗапроса, ДополнительныеПараметры)
		);
	ИначеЕсли ТипТелаЗапроса = ТипыТелаЗапроса[3].Значение Тогда // raw
		фРезультат = ?(
			ВыполнятьНаСервере,
			ОтправитьТекстНаСервере(ИдентификаторРесурса, ТелоЗапросаТекст, ПараметрыЗапроса, ДополнительныеПараметры),
			ОтправитьТекстНаКлиенте(ТелоЗапросаТекст, ПараметрыЗапроса, ДополнительныеПараметры)
		);
	ИначеЕсли ТипТелаЗапроса = ТипыТелаЗапроса[4].Значение Тогда // binary
		фРезультат = ?(
			ВыполнятьНаСервере,
			ОтправитьФайлНаСервере(ИдентификаторРесурса, ТелоЗапросаФайл, ПараметрыЗапроса, ДополнительныеПараметры),
			ОтправитьФайлНаКлиенте(ПараметрыЗапроса, ДополнительныеПараметры)
		);
	Иначе 
		ВызватьИсключение СтрШаблон("Тип тела запроса %1 не поддерживается для %2", ТипТелаЗапроса, Схема);
	КонецЕсли;
	
	Возврат фРезультат;
КонецФункции

&НаКлиенте
Функция ОтветВыполненногоЗапросаPUT(Знач ПараметрыЗапроса, ДополнительныеПараметры)
	ТипыТелаЗапроса = Элементы.ТипТелаЗапроса.СписокВыбора;
	Если ТипТелаЗапроса = ТипыТелаЗапроса[0].Значение Тогда // none
		фРезультат = ?(
			ВыполнятьНаСервере,
			ЗаписатьТекстНаСервере(ИдентификаторРесурса, "", ПараметрыЗапроса, ДополнительныеПараметры),
			ЗаписатьТекстНаКлиенте("", ПараметрыЗапроса, ДополнительныеПараметры)
		);
	ИначеЕсли ТипТелаЗапроса = ТипыТелаЗапроса[3].Значение Тогда // raw
		фРезультат = ?(
			ВыполнятьНаСервере,
			ЗаписатьТекстНаСервере(ИдентификаторРесурса, ТелоЗапросаТекст, ПараметрыЗапроса, ДополнительныеПараметры),
			ЗаписатьТекстНаКлиенте(ТелоЗапросаТекст, ПараметрыЗапроса, ДополнительныеПараметры)
		);
	ИначеЕсли ТипТелаЗапроса = ТипыТелаЗапроса[4].Значение Тогда // binary
		фРезультат = ?(
			ВыполнятьНаСервере,
			ЗаписатьФайлНаСервере(ИдентификаторРесурса, ТелоЗапросаФайл, ПараметрыЗапроса, ДополнительныеПараметры),
			ЗаписатьФайлНаКлиенте(ПараметрыЗапроса, ДополнительныеПараметры)
		);
	Иначе 
		ВызватьИсключение СтрШаблон("Тип тела запроса %1 не поддерживается для %2", ТипТелаЗапроса, Схема);
	КонецЕсли;
	
	Возврат фРезультат;
КонецФункции

&НаКлиенте
Функция ОтветВыполненногоЗапросаPATCH(Знач ПараметрыЗапроса, ДополнительныеПараметры)
	ТипыТелаЗапроса = Элементы.ТипТелаЗапроса.СписокВыбора;
	Если ТипТелаЗапроса = ТипыТелаЗапроса[0].Значение Тогда // none
		фРезультат = ?(
			ВыполнятьНаСервере,
			ИзменитьТекстНаСервере(ИдентификаторРесурса, "", ПараметрыЗапроса, ДополнительныеПараметры),
			ИзменитьТекстНаКлиенте("", ПараметрыЗапроса, ДополнительныеПараметры)
		);
	ИначеЕсли ТипТелаЗапроса = ТипыТелаЗапроса[3].Значение Тогда // raw
		фРезультат = ?(
			ВыполнятьНаСервере,
			ИзменитьТекстНаСервере(ИдентификаторРесурса, ТелоЗапросаТекст, ПараметрыЗапроса, ДополнительныеПараметры),
			ИзменитьТекстНаКлиенте(ТелоЗапросаТекст, ПараметрыЗапроса, ДополнительныеПараметры)
		);
	ИначеЕсли ТипТелаЗапроса = ТипыТелаЗапроса[4].Значение Тогда // binary
		фРезультат = ?(
			ВыполнятьНаСервере,
			ИзменитьФайлНаСервере(ИдентификаторРесурса, ТелоЗапросаФайл, ПараметрыЗапроса, ДополнительныеПараметры),
			ИзменитьФайлНаКлиенте(ПараметрыЗапроса, ДополнительныеПараметры)
		);
	Иначе 
		ВызватьИсключение СтрШаблон("Тип тела запроса %1 не поддерживается для %2", ТипТелаЗапроса, Схема);
	КонецЕсли;
	
	Возврат фРезультат;
КонецФункции

&НаКлиенте
Функция ПолучитьНаКлиенте(Знач ПараметрыЗапроса, ДополнительныеПараметры)
	Возврат КлиентHTTPКлиентСервер.Получить(ИдентификаторРесурса, ПараметрыЗапроса, ДополнительныеПараметры);
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьНаСервере(Знач URI, Знач ПараметрыЗапроса, ДополнительныеПараметры)
	Возврат КлиентHTTPКлиентСервер.Получить(URI, ПараметрыЗапроса, ДополнительныеПараметры);
КонецФункции

&НаКлиенте
Функция ПолучитьЗаголовкиНаКлиенте(Знач ПараметрыЗапроса, ДополнительныеПараметры)
	Возврат КлиентHTTPКлиентСервер.ПолучитьЗаголовки(ИдентификаторРесурса, ПараметрыЗапроса, ДополнительныеПараметры);
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЗаголовкиНаСервере(Знач URI, Знач ПараметрыЗапроса, ДополнительныеПараметры)
	Возврат КлиентHTTPКлиентСервер.ПолучитьЗаголовки(URI, ПараметрыЗапроса, ДополнительныеПараметры);
КонецФункции

&НаКлиенте
Функция ОтправитьТекстНаКлиенте(Знач Данные, Знач ПараметрыЗапроса, ДополнительныеПараметры)
	Возврат КлиентHTTPКлиентСервер.ОтправитьТекст(ИдентификаторРесурса, Данные, ДополнительныеПараметры, ПараметрыЗапроса);
КонецФункции

&НаСервереБезКонтекста
Функция ОтправитьТекстНаСервере(Знач URI, Знач Данные, Знач ПараметрыЗапроса, ДополнительныеПараметры)
	Возврат КлиентHTTPКлиентСервер.ОтправитьТекст(URI, Данные, ДополнительныеПараметры, ПараметрыЗапроса);
КонецФункции

&НаКлиенте
Функция ОтправитьДанныеФормыНаКлиенте(Знач ПараметрыЗапроса, ДополнительныеПараметры)
	Возврат КлиентHTTPКлиентСервер.ОтправитьДанныеФормы(
		ИдентификаторРесурса,
		ДанныеФормыТелаЗапроса(), 
		ПараметрыОтправкиДанныхФормыНаКлиенте(ДополнительныеПараметры),
		ПараметрыЗапроса
	);
КонецФункции

&НаСервере
Функция ОтправитьДанныеФормыНаСервере(Знач ПараметрыЗапроса, ДополнительныеПараметры)
	Возврат КлиентHTTPКлиентСервер.ОтправитьДанныеФормы(
		ИдентификаторРесурса,
		ДанныеФормыТелаЗапросаНаСервере(), 
		ПараметрыОтправкиДанныхФормыНаСервере(ДополнительныеПараметры, Разделитель),
		ПараметрыЗапроса
	);
КонецФункции

&НаКлиенте
Функция ОтправитьДанныеHTMLФормыНаКлиенте(Знач Данные, Знач ПараметрыЗапроса, ДополнительныеПараметры)
	Возврат КлиентHTTPКлиентСервер.ОтправитьДанныеHTMLФормы(ИдентификаторРесурса, Данные, ДополнительныеПараметры, ПараметрыЗапроса);
КонецФункции

&НаСервереБезКонтекста
Функция ОтправитьДанныеHTMLФормыНаСервере(Знач URI, Знач Данные, Знач ПараметрыЗапроса, ДополнительныеПараметры)
	Возврат КлиентHTTPКлиентСервер.ОтправитьДанныеHTMLФормы(URI, Данные, ДополнительныеПараметры, ПараметрыЗапроса);
КонецФункции

&НаКлиенте
Функция ОтправитьФайлНаКлиенте(Знач ПараметрыЗапроса, ДополнительныеПараметры)
	Возврат КлиентHTTPКлиентСервер.ОтправитьФайл(ИдентификаторРесурса, Новый Файл(ТелоЗапросаФайл), ДополнительныеПараметры, ПараметрыЗапроса);
КонецФункции

&НаСервереБезКонтекста
Функция ОтправитьФайлНаСервере(Знач URI, Знач Данные, Знач ПараметрыЗапроса, ДополнительныеПараметры)
	Возврат КлиентHTTPКлиентСервер.ОтправитьФайл(URI, Новый Файл(Данные), ДополнительныеПараметры, ПараметрыЗапроса);
КонецФункции

&НаКлиенте
Функция ЗаписатьТекстНаКлиенте(Знач Данные, Знач ПараметрыЗапроса, ДополнительныеПараметры)
	Возврат КлиентHTTPКлиентСервер.ЗаписатьТекст(ИдентификаторРесурса, Данные, ДополнительныеПараметры, ПараметрыЗапроса);
КонецФункции

&НаСервереБезКонтекста
Функция ЗаписатьТекстНаСервере(Знач URI, Знач Данные, Знач ПараметрыЗапроса, ДополнительныеПараметры)
	Возврат КлиентHTTPКлиентСервер.ЗаписатьТекст(URI, Данные, ДополнительныеПараметры, ПараметрыЗапроса);
КонецФункции

&НаКлиенте
Функция ЗаписатьФайлНаКлиенте(Знач ПараметрыЗапроса, ДополнительныеПараметры)
	Возврат КлиентHTTPКлиентСервер.ЗаписатьФайл(ИдентификаторРесурса, Новый Файл(ТелоЗапросаФайл), ДополнительныеПараметры, ПараметрыЗапроса);
КонецФункции

&НаСервереБезКонтекста
Функция ЗаписатьФайлНаСервере(Знач URI, Знач Данные, Знач ПараметрыЗапроса, ДополнительныеПараметры)
	Возврат КлиентHTTPКлиентСервер.ЗаписатьФайл(URI, Новый Файл(Данные), ДополнительныеПараметры, ПараметрыЗапроса);
КонецФункции

&НаКлиенте
Функция ИзменитьТекстНаКлиенте(Знач Данные, Знач ПараметрыЗапроса, ДополнительныеПараметры)
	Возврат КлиентHTTPКлиентСервер.ИзменитьТекст(ИдентификаторРесурса, Данные, ДополнительныеПараметры, ПараметрыЗапроса);
КонецФункции

&НаСервереБезКонтекста
Функция ИзменитьТекстНаСервере(Знач URI, Знач Данные, Знач ПараметрыЗапроса, ДополнительныеПараметры)
	Возврат КлиентHTTPКлиентСервер.ИзменитьТекст(URI, Данные, ДополнительныеПараметры, ПараметрыЗапроса);
КонецФункции

&НаКлиенте
Функция ИзменитьФайлНаКлиенте(Знач ПараметрыЗапроса, ДополнительныеПараметры)
	Возврат КлиентHTTPКлиентСервер.ИзменитьФайл(ИдентификаторРесурса, Новый Файл(ТелоЗапросаФайл), ДополнительныеПараметры, ПараметрыЗапроса);
КонецФункции

&НаСервереБезКонтекста
Функция ИзменитьФайлНаСервере(Знач URI, Знач Данные, Знач ПараметрыЗапроса, ДополнительныеПараметры)
	Возврат КлиентHTTPКлиентСервер.ИзменитьФайл(URI, Новый Файл(Данные), ДополнительныеПараметры, ПараметрыЗапроса);
КонецФункции

&НаКлиенте
Функция УдалитьНаКлиенте(Знач ТелоЗапроса, Знач ПараметрыЗапроса, ДополнительныеПараметры)
	Возврат КлиентHTTPКлиентСервер.Удалить(ИдентификаторРесурса, ТелоЗапроса, ДополнительныеПараметры, ПараметрыЗапроса);
КонецФункции

&НаСервереБезКонтекста
Функция УдалитьНаСервере(Знач URI, Знач ТелоЗапроса, Знач ПараметрыЗапроса, ДополнительныеПараметры)
	Возврат КлиентHTTPКлиентСервер.Удалить(URI, ТелоЗапроса, ДополнительныеПараметры, ПараметрыЗапроса);
КонецФункции

&НаКлиенте
Процедура ОбработатьОтвет(Знач Ответ)
	ФроматированиеВремениВыполненияЗапроса();
	ОтобразитьКодСостоянияСервера(Ответ.КодСостояния);
	
	ДанныеТелаОтвета = Ответ.Тело;
	ТипMIMEОтвета = КлиентHTTPКлиентСервер.ТипMIMEИзЗаголовков(Ответ.Заголовки);
	
	ОтобразитьРазмерТелаОтвета();
	
	ЗаголовкиОтвета.Очистить();
	Для Каждого КЗ Из Ответ.Заголовки Цикл
		ЗаполнитьЗначенияСвойств(ЗаголовкиОтвета.Добавить(), КЗ);
	КонецЦикла;
	ЗаголовкиОтвета.Сортировать("Ключ");
	
	ИмяФайлаТела = Ответ.ИмяФайлаТела;
	КодировкаТелаОтвета = КлиентHTTPКлиентСервер.КодировкаИзЗаголовков(Ответ.Заголовки);
	
	ОтветHTML = "";
	ТелоОтветаЭтоТекст = (КлиентHTTPПовтИсп.ТипыMIMEТекстовыхДанных().Получить(ТипMIMEОтвета) <> Неопределено);
	Если ТелоОтветаВФайл Тогда
		ТекстТелаОтвета = "файл";
	ИначеЕсли ТелоОтветаЭтоТекст Тогда
		ТекстТелаОтвета = ПолучитьСтрокуИзДвоичныхДанных(
			ДанныеТелаОтвета,
			?(КодировкаТелаОтвета = Неопределено, КлиентHTTPПовтИсп.КодировкаПоУмолчанию(), КодировкаТелаОтвета)
		);
		
		ОтветHTML = ТекстТелаОтвета;
	Иначе
		ТекстТелаОтвета = "двоичные данные";
	КонецЕсли;
	
	ОтветТекст.УстановитьФорматированнуюСтроку(Новый ФорматированнаяСтрока(ТекстТелаОтвета));
	
	ВывестиТелоОтветаJSON(ТекстТелаОтвета);
	ОтобразитьКартинкуТелаОтвета(ТипMIMEОтвета);
	ПроверитьОтветHawk(Ответ);
	
	Элементы.ОтветHTML.Документ.Body.InnerHTML = ОтветHTML;
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьКодСостоянияСервера(Знач КодСостоянияСервера)
	КодСостояния = КодСостоянияСервера;
	
	Если КодСостояния > 499 Тогда // серверные 5xx
		Элементы.КодСостояния.ЦветТекста = WebЦвета.Черный;
	ИначеЕсли КодСостояния > 399 Тогда // клиентские 4xx
		Элементы.КодСостояния.ЦветТекста = WebЦвета.Красный;
	ИначеЕсли КодСостояния > 299 Тогда // перенаправления 3xx
		Элементы.КодСостояния.ЦветТекста = WebЦвета.ТемноОранжевый;
	ИначеЕсли КодСостояния > 199 Тогда // успешные 2xx
		Элементы.КодСостояния.ЦветТекста = WebЦвета.ЗеленыйЛес;
	Иначе // информационные 1xx
		Элементы.КодСостояния.ЦветТекста = WebЦвета.КоролевскиГолубой;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗафиксироватьВремяВыполненияЗапроса(Знач ВремяНачала)
	ВремяВыполнения = ТекущаяУниверсальнаяДатаВМиллисекундах() - ВремяНачала;
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьРазмерТелаОтвета()
	ДелительГБ = 1073741824; // 2^30
	ДелительМБ = 1048576; // 2^20
	ДелительКБ = 1024; // 2^10
	Делитель = 1;
	Точность = 2;
	Единица = "Б";
	
	Если ТелоОтветаВФайл Тогда
		Ф = Новый Файл(ИмяФайлаТелаОтвета);
		РазмерОтвета = ?(Ф.Существует(), Ф.Размер(), 0);
	Иначе
		РазмерОтвета = ДанныеТелаОтвета.Размер();
	КонецЕсли;
	
	Если РазмерОтвета >= ДелительГБ Тогда
		Делитель = ДелительГБ;
		Единица = "ГБ";
	ИначеЕсли РазмерОтвета >= ДелительМБ Тогда
		Делитель = ДелительМБ;
		Единица = "МБ";
	ИначеЕсли РазмерОтвета >= ДелительКБ Тогда
		Делитель = ДелительКБ;
		Единица = "КБ";
	Иначе
		Точность = 0;
	КонецЕсли;
	
	Элементы.РазмерОтвета.Формат = СтрШаблон("ЧДЦ=%1; ЧН='0 Б'; ЧГ=; ЧФ='Ч %2'", Точность, Единица);
	РазмерОтвета = РазмерОтвета / Делитель;
КонецПроцедуры

&НаКлиенте
Процедура ВывестиТелоОтветаJSON(Знач Текст)
	Перем ОбъектJSON;
	
	Чтение = Новый ЧтениеJSON;
	Чтение.УстановитьСтроку(Текст);
	
	Попытка
		ОбъектJSON = ПрочитатьJSON(Чтение, Истина);
	Исключение
		Текст = Неопределено;
	КонецПопытки;
	
	Чтение.Закрыть();
	
	Если Текст = Неопределено Тогда
		Текст = "не удалось прочитать как JSON";
	Иначе
		Запись = Новый ЗаписьJSON;
		Запись.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто, "    ", Истина));
		ЗаписатьJSON(Запись, ОбъектJSON);
		Текст = Запись.Закрыть();
	КонецЕсли;
	
	ОтветJSON.УстановитьФорматированнуюСтроку(Новый ФорматированнаяСтрока(Текст));
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьКартинкуТелаОтвета(Знач ТипMIME)
	Если ТипыMIMEКартинок().Получить(ТипMIME) = Неопределено Тогда
		Элементы.ДекорацияНеКартинкаContentType.Заголовок = ТипMIME;
		Элементы.ОтветКартинка.Видимость = Ложь;
		Элементы.ГруппаОтветНеКартинка.Видимость = Истина;
		
		Возврат;
	КонецЕсли;
	
	ПопробоватьОтобразитьКартинку(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьОтветHawk(Знач Ответ)
	Если ТипАутентификации <> Элементы.ТипАутентификации.СписокВыбора[6].Значение Тогда // Hawk
		Возврат;
	КонецЕсли;
	Если Цел(Ответ.КодСостояния / 100) <> 2 Тогда // 2хх
		Возврат;
	КонецЕсли;
	Если КлиентHTTPКлиентСервер.ЗначениеЗаголовка("Server-Authorization", Ответ.Заголовки) = Неопределено Тогда
		СообщитьПользователю("В ответе отсутствует заголовок верефикации 'Server-Authorization'");
	КонецЕсли;
	
	ОписаниеОшибки = "";
	Если НЕ КлиентHTTPКлиентСервер.ОтветСЗаголовкомHawkКорректен(Ответ, "Server-Authorization", ОписаниеОшибки) Тогда
		СообщитьПользователю(ОписаниеОшибки);
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НоваяСессия()
	Возврат Новый Структура("Печенье", Новый Соответствие);
КонецФункции

&НаКлиенте
Процедура ДобавитьВИсторию(Знач Ответ)
	ТекущийМомент = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ДлинаИдентификатораРесурса = СтрДлина(ИдентификаторРесурса);
	ПозицияНачалаПоиска = ?(СтрНачинаетсяС(ИдентификаторРесурса, "https://"), 9, 8);
	Протокол = ?(ПозицияНачалаПоиска = 9, "https", "http");

	ПозицияКонцаПоиска = СтрНайти(ИдентификаторРесурса, "/", , ПозицияНачалаПоиска);
	ПозицияПараметров = СтрНайти(ИдентификаторРесурса, "?", , ПозицияНачалаПоиска);
	Если ПозицияКонцаПоиска = 0 Тогда
		ПозицияКонцаПоиска = ДлинаИдентификатораРесурса + 1;
	КонецЕсли;
	Если ПозицияКонцаПоиска > ПозицияПараметров И ПозицияПараметров > 0 Тогда
		ПозицияКонцаПоиска = ПозицияПараметров;
	КонецЕсли;

	Хост = Сред(ИдентификаторРесурса, ПозицияНачалаПоиска, ПозицияКонцаПоиска - ПозицияНачалаПоиска);
	URN = ?(ПозицияКонцаПоиска > ДлинаИдентификатораРесурса, "/", Сред(ИдентификаторРесурса, ПозицияКонцаПоиска));
	Если НЕ СтрНачинаетсяС(URN, "/") Тогда
		URN = "/" + URN;
	КонецЕсли;
	
	Заголовки = Новый Массив;
	Для Каждого ЗаголовокЗапроса Из ЗаголовкиЗапроса Цикл
		Заголовки.Добавить(Новый Структура("Активно, Ключ, Значение", ЗаголовокЗапроса.Активно, ЗаголовокЗапроса.Ключ, ЗаголовокЗапроса.Значение));
	КонецЦикла;
	
	ТелоФорма = Новый Массив;
	Для Каждого ЭлементФормыТелаЗапроса Из ТелоЗапросаДанныеФормы Цикл
		ЭлементФормы = Новый Структура("Активно, Тип, Ключ, Значение");
		
		ЗаполнитьЗначенияСвойств(ЭлементФормы, ЭлементФормыТелаЗапроса);
		ТелоФорма.Добавить(ЭлементФормы);
	КонецЦикла;
	
	ТелоHTMLФорма = Новый Массив;
	Для Каждого ЭлементФормыТелаЗапроса Из ТелоЗапросаДанныеHTMLФормы Цикл
		ЭлементФормы = Новый Структура("Активно, Ключ, Значение");
		
		ЗаполнитьЗначенияСвойств(ЭлементФормы, ЭлементФормыТелаЗапроса);
		ТелоHTMLФорма.Добавить(ЭлементФормы);
	КонецЦикла;
	
	ОбъектОтвета = Новый Структура;
	ОбъектОтвета.Вставить("КодСостояния", Ответ.КодСостояния);
	ОбъектОтвета.Вставить("Тело", Ответ.Тело);
	ОбъектОтвета.Вставить("Заголовки", Ответ.Заголовки);
	ОбъектОтвета.Вставить("ИмяФайлаТела", Ответ.ИмяФайлаТела);
	ОбъектОтвета.Вставить("КонтекстВыполнения", Ответ.КонтекстВыполнения);
	
	ОбъектИстории = Новый Структура;
	ОбъектИстории.Вставить("Дата", ТекущаяДата());
	ОбъектИстории.Вставить("URI", ИдентификаторРесурса);
	ОбъектИстории.Вставить("Схема", Схема);
	ОбъектИстории.Вставить("Протокол", Протокол);
	ОбъектИстории.Вставить("Хост", Хост);
	ОбъектИстории.Вставить("URN", URN);
	ОбъектИстории.Вставить("ВремяВыполнения", ВремяВыполнения);
	ОбъектИстории.Вставить("Ответ", ОбъектОтвета);
	ОбъектИстории.Вставить("ТипАутентификации", ТипАутентификации);
	ОбъектИстории.Вставить("ПользовательАутентификации", ПользовательАутентификации);
	ОбъектИстории.Вставить("ПарольАутентификации", ПарольАутентификации);
	ОбъектИстории.Вставить("ТокенАутентификации", ТокенАутентификации);
	ОбъектИстории.Вставить("AWSКлючДоступа", AWSКлючДоступа);
	ОбъектИстории.Вставить("AWSСекретныйКлюч", AWSСекретныйКлюч);
	ОбъектИстории.Вставить("AWSРегион", AWSРегион);
	ОбъектИстории.Вставить("AWSСервис", AWSСервис);
	ОбъектИстории.Вставить("HawkИдентификатор", HawkИдентификатор);
	ОбъектИстории.Вставить("HawkКлюч", HawkКлюч);
	ОбъектИстории.Вставить("HawkДополнение", HawkДополнение);
	ОбъектИстории.Вставить("HawkИдентификаторПриложения", HawkИдентификаторПриложения);
	ОбъектИстории.Вставить("HawkДелегирование", HawkДелегирование);
	ОбъектИстории.Вставить("ЗаголовкиЗапроса", Заголовки);
	ОбъектИстории.Вставить("ТипТелаЗапроса", ТипТелаЗапроса);
	ОбъектИстории.Вставить("Разделитель", Разделитель);
	ОбъектИстории.Вставить("ТелоФорма", ТелоФорма);
	ОбъектИстории.Вставить("ТелоHTMLФорма", ТелоHTMLФорма);
	ОбъектИстории.Вставить("ТелоЗапросаТекст", ТелоЗапросаТекст);
	ОбъектИстории.Вставить("ТелоЗапросаФайл", ТелоЗапросаФайл);
	ОбъектИстории.Вставить("ВыполнятьНаСервере", ВыполнятьНаСервере);
	ОбъектИстории.Вставить("ТелоОтветаВФайл", ТелоОтветаВФайл);
	ОбъектИстории.Вставить("ИмяФайлаТелаОтвета", ИмяФайлаТелаОтвета);
	ОбъектИстории.Вставить("ПоддержкаСжатогоОтвета", ПоддержкаСжатогоОтвета);
	ОбъектИстории.Вставить("АгентПользователя", АгентПользователя);
	ОбъектИстории.Вставить("ИспользоватьСессию", ИспользоватьСессию);
	ОбъектИстории.Вставить("Сессия", Дополнительно.Сессия);
	ОбъектИстории.Вставить("ПорогПеренаправлений", ПорогПеренаправлений);
	ОбъектИстории.Вставить("ПеренаправлениеКакGET", ПеренаправлениеКакGET);
	ОбъектИстории.Вставить("ПоддержкаCookie", ПоддержкаCookie);
	ОбъектИстории.Вставить("ИспользоватьПрокси", ИспользоватьПрокси);
	ОбъектИстории.Вставить("НеИспользоватьПроксиДляЛокальныхАдресов", НеИспользоватьПроксиДляЛокальныхАдресов);
	ОбъектИстории.Вставить("ПротоколПрокси", ПротоколПрокси);
	ОбъектИстории.Вставить("СерверПрокси", СерверПрокси);
	ОбъектИстории.Вставить("ПортПрокси", ПортПрокси);
	ОбъектИстории.Вставить("ПользовательПрокси", ПользовательПрокси);
	ОбъектИстории.Вставить("ПарольПрокси", ПарольПрокси);
	ОбъектИстории.Вставить("ИспользоватьАутентификациюОСПрокси", ИспользоватьАутентификациюОСПрокси);
	
	Дополнительно.История.Вставить(ТекущийМомент, ОбъектИстории);
КонецПроцедуры

&НаКлиенте
Процедура ВывестиИсторию()
	История.Очистить();
	
	Для Каждого КЗ Из Дополнительно.История Цикл
		Стр = История.Добавить();
		Стр.ВременнаяМетка = КЗ.Ключ;
		Стр.КонтекстВыполнения = ?(КЗ.Значение.ВыполнятьНаСервере, "сервер", "клиент");
		Стр.КодСостояния = КЗ.Значение.Ответ.КодСостояния;
		
		ЗаполнитьЗначенияСвойств(Стр, КЗ.Значение);
	КонецЦикла;
	
	История.Сортировать("ВременнаяМетка");
КонецПроцедуры

&НаКлиенте
Функция ПараметрыИдентификатораСПорядком(Знач ИдентификаторРесурса, Знач ПозицияНачала)
	фРезультат = Новый Структура("Параметры, Порядок", Новый Соответствие, Новый Массив);
	
	Если ПозицияНачала = 0 Тогда
		Возврат фРезультат;
	КонецЕсли;
	
	ПозицияОкончания = СтрНайти(ИдентификаторРесурса, "#", , ПозицияНачала);
	ПараметрыСтрока = Сред(
		ИдентификаторРесурса,
		ПозицияНачала + 1,
		?(
			ПозицияОкончания = 0,
			СтрДлина(ИдентификаторРесурса),
			ПозицияОкончания - 1
		) - ПозицияНачала
	);
	
	ПараметрыИдентификатора = Новый Массив;
	МножествоСтрок = Новый Соответствие;
	Для Каждого Параметр Из СтрРазделить(ПараметрыСтрока, "&", Ложь) Цикл
		ПозицияРазделителя = СтрНайти(Параметр, "=");
		Если ПозицияРазделителя = 0 Тогда
			ПозицияРазделителя = СтрДлина(Параметр) + 1;
		КонецЕсли;
		
		ИмяПараметра = Лев(Параметр, ПозицияРазделителя - 1);
		Если ПустаяСтрока(ИмяПараметра) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗначениеПараметра = Прав(Параметр, СтрДлина(Параметр) - ПозицияРазделителя);
		
		ПараметрыИдентификатора.Добавить(Новый Структура("Ключ, Значение", ИмяПараметра, ЗначениеПараметра));
		МножествоСтрок.Вставить(ИмяПараметра);
		МножествоСтрок.Вставить(ЗначениеПараметра);
	КонецЦикла;
	
	МножествоСтрок = РаскодированныеСтрокиURLвURL(МножествоСтрок);
	
	Для Каждого Параметр Из ПараметрыИдентификатора Цикл
		ИмяПараметра = МножествоСтрок.Получить(Параметр.Ключ);
		ЗначениеПараметра = МножествоСтрок.Получить(Параметр.Значение);
		ЗначенияПараметра = фРезультат.Параметры.Получить(ИмяПараметра);
		Если ЗначенияПараметра = Неопределено Тогда
			ЗначенияПараметра = Новый Соответствие;
			фРезультат.Параметры.Вставить(ИмяПараметра, ЗначенияПараметра);
			Добавлять = Истина;
		Иначе
			Добавлять = (ЗначенияПараметра.Получить(ЗначениеПараметра) = Неопределено);
		КонецЕсли;
		
		Если Добавлять Тогда
			ЗначенияПараметра.Вставить(ЗначениеПараметра, Истина);
			фРезультат.Порядок.Добавить(Новый Структура("Ключ, Значение", ИмяПараметра, ЗначениеПараметра));
		КонецЕсли;
	КонецЦикла;
	
	Возврат фРезультат;
КонецФункции

&НаКлиенте
Процедура УдалитьСтрокиОтсутствующихПараметров(ЗначенияПараметров)
	СтрокиНаУдаление = Новый Массив;
	
	Для Каждого Стр Из ПараметрыЗапроса Цикл
		ЗначенияПараметра = ЗначенияПараметров.Параметры.Получить(Стр.Ключ);
		Если ЗначенияПараметра = Неопределено
			 ИЛИ ЗначенияПараметра.Получить(Стр.Значение) = Неопределено Тогда
			Если Стр.Активно Тогда
				СтрокиНаУдаление.Добавить(Стр);
			КонецЕсли;
		Иначе
			Стр.Активно = Истина;
			ЗначенияПараметра.Удалить(Стр.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Стр Из СтрокиНаУдаление Цикл
		ПараметрыЗапроса.Удалить(Стр);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПараметрыПоИдентификаторуРесурса()
	Если СтрНачинаетсяС(ИдентификаторРесурса, "https://") Тогда
		ПозицияНачалаПоиска = 8;
	ИначеЕсли СтрНачинаетсяС(ИдентификаторРесурса, "http://") Тогда
		ПозицияНачалаПоиска = 7;
	Иначе
		ВызватьИсключение "Не удалось разобрать URI";
	КонецЕсли;
	
	ПозицияНачалаСтрокиПараметров = СтрНайти(ИдентификаторРесурса, "?", , ПозицияНачалаПоиска);
	КоллекцияПараметров = ПараметрыИдентификатораСПорядком(ИдентификаторРесурса, ПозицияНачалаСтрокиПараметров);
	
	УдалитьСтрокиОтсутствующихПараметров(КоллекцияПараметров);
	
	Для Каждого ЗначениеПараметра Из КоллекцияПараметров.Порядок Цикл
		ЗначенияПараметра = КоллекцияПараметров.Параметры.Получить(ЗначениеПараметра.Ключ);
		Если ЗначенияПараметра = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если ЗначенияПараметра.Получить(ЗначениеПараметра.Значение) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Стр = ПараметрыЗапроса.Добавить();
		Стр.Ключ     = ЗначениеПараметра.Ключ;
		Стр.Значение = ЗначениеПараметра.Значение;
		Стр.Активно  = Истина;
	КонецЦикла; 
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьПараметрыИдентификатораРесурса()
	ДлинаИдентификатораРесурса = СтрДлина(ИдентификаторРесурса);
	ПозицияНачалаПоиска = 7;
	
	Если СтрНачинаетсяС(ИдентификаторРесурса, "https://") Тогда
		ПозицияНачалаПоиска = 8;
	ИначеЕсли НЕ СтрНачинаетсяС(ИдентификаторРесурса, "http://") Тогда
		ВызватьИсключение "Не удалось разобрать URI";
	КонецЕсли;
	
	ПозицияСимволаПараметров = СтрНайти(ИдентификаторРесурса, "?", , ПозицияНачалаПоиска);
	ПозицияСимволаФрагмента = СтрНайти(ИдентификаторРесурса, "#", , ?(ПозицияСимволаПараметров = 0, 1, ПозицияСимволаПараметров));
	ПозицияОкончания = ?(ПозицияСимволаПараметров = 0, ПозицияСимволаФрагмента, ПозицияСимволаПараметров);
	
	НовыйИдентификатор = ?(
		ПозицияОкончания = 0,
		ИдентификаторРесурса,
		Лев(ИдентификаторРесурса, ПозицияОкончания - 1)
	);
	
	ПараметрыИдентификатора = Новый Массив;
	Для Каждого Стр Из ПараметрыЗапроса Цикл
		Если ПустаяСтрока(Стр.Ключ) ИЛИ НЕ Стр.Активно Тогда
			Продолжить;
		КонецЕсли;
		
		ЗначениеПараметра = Новый Массив;
		ЗначениеПараметра.Добавить(Стр.Значение);
		
		// Имитация элемента соответствия
		ПараметрыИдентификатора.Добавить(Новый Структура("Ключ, Значение", Стр.Ключ, ЗначениеПараметра));
	КонецЦикла;
	
	ИдентификаторРесурса = СтрШаблон(
		"%1%2%3",
		НовыйИдентификатор,
		КлиентHTTPКлиентСервер.ПараметрыЗапросаСтрокой(ПараметрыИдентификатора),
		?(ПозицияСимволаФрагмента = 0, "", Сред(ИдентификаторРесурса, ПозицияСимволаФрагмента))
	);
КонецПроцедуры

&НаКлиенте
Функция МножествоПараметровЗапроса()
	фРезультат = КлиентHTTPКлиентСервер.НовыеПараметрыЗапроса();
	
	Для Каждого Стр Из ПараметрыЗапроса Цикл
		Если НЕ Стр.Активно Тогда
			Продолжить;
		КонецЕсли;
		
		КлиентHTTPКлиентСервер.ДобавитьПараметр(фРезультат, Стр.Ключ, Стр.Значение);
	КонецЦикла;
	
	Возврат фРезультат;
КонецФункции

&НаКлиенте
Функция ДополнительныеПараметрыЗапроса()
	фРезультат = КлиентHTTPКлиентСервер.НовыеДополнительныеПараметры();
	
	УстановитьЗаголовкиЗапроса(фРезультат);
	
	ТипАутентификацииСписокВыбора = Элементы.ТипАутентификации.СписокВыбора;
	Если ТипАутентификации = ТипАутентификацииСписокВыбора[1].Значение Тогда // Basic
		КлиентHTTPКлиентСервер.УстановитьBasicАвторизацию(фРезультат, ПользовательАутентификации, ПарольАутентификации);
	ИначеЕсли ТипАутентификации = ТипАутентификацииСписокВыбора[2].Значение Тогда // NTLM
		КлиентHTTPКлиентСервер.УстановитьNTLMАвторизацию(фРезультат, ПользовательАутентификации, ПарольАутентификации);
	ИначеЕсли ТипАутентификации = ТипАутентификацииСписокВыбора[3].Значение Тогда // Digest
		КлиентHTTPКлиентСервер.УстановитьDigestАвторизацию(фРезультат, ПользовательАутентификации, ПарольАутентификации);
	ИначеЕсли ТипАутентификации = ТипАутентификацииСписокВыбора[4].Значение Тогда // Bearer
		КлиентHTTPКлиентСервер.УстановитьBearerАвторизацию(фРезультат, ТокенАутентификации);
	ИначеЕсли ТипАутентификации = ТипАутентификацииСписокВыбора[5].Значение Тогда // AWS4-HMAC-SHA256
		КлиентHTTPКлиентСервер.УстановитьAWS4Авторизацию(фРезультат, AWSКлючДоступа, AWSСекретныйКлюч, AWSРегион, AWSСервис);
	ИначеЕсли ТипАутентификации = ТипАутентификацииСписокВыбора[6].Значение Тогда // Hawk
		КлиентHTTPКлиентСервер.УстановитьHawkАвторизацию(фРезультат, HawkИдентификатор, HawkКлюч, HawkДополнение, HawkИдентификаторПриложения, HawkДелегирование);
	КонецЕсли;
	
	Если ИспользоватьПрокси Тогда
		КлиентHTTPКлиентСервер.ИспользоватьПрокси(
			фРезультат,
			СерверПрокси,
			ПортПрокси,
			ПользовательПрокси,
			ПарольПрокси,
			ИспользоватьАутентификациюОСПрокси,
			,
			НеИспользоватьПроксиДляЛокальныхАдресов
		);
	КонецЕсли;
	
	Если ИспользоватьСессию Тогда
		КлиентHTTPКлиентСервер
			.ИспользоватьСессию(фРезультат)
			.УстановитьПорогПеренаправлений(фРезультат, ПорогПеренаправлений)
			.ПеренаправленияКакGET(фРезультат, ПеренаправлениеКакGET);
		
		Если ПоддержкаCookie Тогда
			КлиентHTTPКлиентСервер.СкопироватьПеченье(фРезультат, Дополнительно);
		КонецЕсли;
	КонецЕсли;
	
	Если ПоддержкаСжатогоОтвета Тогда
		КлиентHTTPКлиентСервер.УстановитьСжатиеОтветаGZIP(фРезультат);
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(АгентПользователя) Тогда
		КлиентHTTPКлиентСервер.УстановитьАгентаПользователя(фРезультат, АгентПользователя);
	КонецЕсли;
	
	Если ТелоОтветаВФайл Тогда
		Если ПустаяСтрока(ИмяФайлаТелаОтвета) Тогда
			Элементы.Основная.ТекущаяСтраница = Элементы.СтраницаНастройки;
			ВызватьИсключение "Укажите путь к файлу ответа";
		КонецЕсли;
		
		КлиентHTTPКлиентСервер.УстановитьИмяВыходногоФайла(фРезультат, ИмяФайлаТелаОтвета);
	КонецЕсли;
	
	Возврат фРезультат;
КонецФункции

&НаКлиенте
Процедура УстановитьЗаголовкиЗапроса(Знач ДополнительныеПараметры)
	Для Каждого Стр Из ЗаголовкиЗапроса Цикл
		Если НЕ Стр.Активно Тогда
			Продолжить;
		КонецЕсли;
		
		КлиентHTTPКлиентСервер.УстановитьЗаголовок(ДополнительныеПараметры, Стр.Ключ, Стр.Значение);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ДанныеФормыТелаЗапроса()
	фРезультат = КлиентHTTPКлиентСервер.НовыеПоляФормы();
	ТипыДанныхФормы = Элементы.ТелоЗапросаДанныеФормы.ПодчиненныеЭлементы.ДанныеФормыТип.СписокВыбора;
	
	Для Каждого Стр Из ТелоЗапросаДанныеФормы Цикл
		Если НЕ Стр.Активно Тогда
			Продолжить;
		КонецЕсли;
		
		Если Стр.Тип = ТипыДанныхФормы[0].Значение Тогда // Текст
			КлиентHTTPКлиентСервер.ДобавитьПолеФормыТекст(фРезультат, Стр.Ключ, Стр.Значение);
		Иначе // Файл
			Если ПустаяСтрока(Стр.Значение) Тогда
				Элементы.ГруппаРазделыЗапроса.ТекущаяСтраница = Элементы.РазделТелоЗапроса;
				Элементы.ГруппаРазделы.ТекущаяСтраница = Элементы.РазделЗапрос;
				
				ВызватьИсключение "Укажите выгружаемый файл в форме тела запроса";
			КонецЕсли;
			
			ФайлПоля = Новый Файл(Стр.Значение);
			Если НЕ ФайлПоля.Существует() Тогда
				Продолжить;
			КонецЕсли;
			
			ТипMIME = КлиентHTTPСлужебный.ТипMIMEРасширенияФайла(ФайлПоля.Расширение);
			
			КлиентHTTPКлиентСервер.ДобавитьПолеФормыФайл(фРезультат, Стр.Ключ, ФайлПоля, ФайлПоля.Имя, ТипMIME);
		КонецЕсли;
	КонецЦикла;
	
	Возврат фРезультат;
КонецФункции

&НаСервере
Функция ДанныеФормыТелаЗапросаНаСервере()
	фРезультат = КлиентHTTPКлиентСервер.НовыеПоляФормы();
	ТипыДанныхФормы = Элементы.ТелоЗапросаДанныеФормы.ПодчиненныеЭлементы.ДанныеФормыТип.СписокВыбора;
	
	Для Каждого Стр Из ТелоЗапросаДанныеФормы Цикл
		Если НЕ Стр.Активно Тогда
			Продолжить;
		КонецЕсли;
		
		Если Стр.Тип = ТипыДанныхФормы[0].Значение Тогда // Текст
			КлиентHTTPКлиентСервер.ДобавитьПолеФормыТекст(фРезультат, Стр.Ключ, Стр.Значение);
		Иначе // Файл
			Если ПустаяСтрока(Стр.Значение) Тогда
				Элементы.ГруппаРазделыЗапроса.ТекущаяСтраница = Элементы.РазделТелоЗапроса;
				Элементы.ГруппаРазделы.ТекущаяСтраница = Элементы.РазделЗапрос;
				
				ВызватьИсключение "Укажите выгружаемый файл в форме тела запроса";
			КонецЕсли;
			
			ФайлПоля = Новый Файл(Стр.Значение);
			Если НЕ ФайлПоля.Существует() Тогда
				Продолжить;
			КонецЕсли;
			
			ТипMIME = КлиентHTTPСлужебный.ТипMIMEРасширенияФайла(ФайлПоля.Расширение);
			
			КлиентHTTPКлиентСервер.ДобавитьПолеФормыФайл(фРезультат, Стр.Ключ, ФайлПоля, ФайлПоля.Имя, ТипMIME);
		КонецЕсли;
	КонецЦикла;
	
	Возврат фРезультат;
КонецФункции

&НаКлиенте
Функция ДанныеHTMLФормыТелаЗапроса()
	фРезультат = КлиентHTTPКлиентСервер.НовыеПоляФормы();
	
	Для Каждого Стр Из ТелоЗапросаДанныеHTMLФормы Цикл
		Если НЕ Стр.Активно Тогда
			Продолжить;
		КонецЕсли;
		
		КлиентHTTPКлиентСервер.ДобавитьПолеHTMLФормы(фРезультат, Стр.Ключ, Стр.Значение);
	КонецЦикла;
	
	Возврат фРезультат;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыОтправкиДанныхФормы(Знач ДополнительныеПараметры, Знач РазделительПолей)
	фРезультат = КлиентHTTPКлиентСервер.КопияДополнительныхПараметров(ДополнительныеПараметры);
	
	КлиентHTTPКлиентСервер.УстановитьРазделительПолейФормы(фРезультат, РазделительПолей);
	
	Возврат фРезультат;
КонецФункции

&НаКлиенте
Функция ПараметрыОтправкиДанныхФормыНаКлиенте(Знач ДополнительныеПараметры)
	Возврат ПараметрыОтправкиДанныхФормы(ДополнительныеПараметры, Разделитель);
КонецФункции

&НаСервереБезКонтекста
Функция ПараметрыОтправкиДанныхФормыНаСервере(Знач ДополнительныеПараметры, Знач РазделительПолей)
	Возврат ПараметрыОтправкиДанныхФормы(ДополнительныеПараметры, РазделительПолей);
КонецФункции

&НаКлиенте
Процедура ИзменитьРежимОтображенияПароля(Знач Переключатель, Знач ПолеПароля)
	ПолеПароля.РежимПароля = Переключатель.Пометка;
	Переключатель.Пометка = НЕ Переключатель.Пометка;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДиалогВыбораФайла(Знач Оповещение, Знач Заголовок = "Выбор файла", Знач Фильтр = Неопределено)
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Заголовок                   = Заголовок;
	Диалог.ПредварительныйПросмотр     = Ложь;
	Диалог.ПроверятьСуществованиеФайла = Истина;
	Диалог.МножественныйВыбор          = Ложь;
	
	Если Фильтр <> Неопределено Тогда
		Диалог.Фильтр = Фильтр;
	КонецЕсли;
	
	Диалог.Показать(Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДиалогСохраненияФайла(Знач Оповещение, Знач Заголовок = "Выбор файла", Знач Фильтр = Неопределено)
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	Диалог.Заголовок                   = Заголовок;
	Диалог.ПредварительныйПросмотр     = Ложь;
	Диалог.ПроверятьСуществованиеФайла = Ложь;
	Диалог.МножественныйВыбор          = Ложь;
	
	Если Фильтр <> Неопределено Тогда
		Диалог.Фильтр = Фильтр;
	КонецЕсли;
	
	Диалог.Показать(Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура СообщитьПользователю(Знач Текст, Знач Поле = Неопределено)
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = Текст;
	
	Если Поле <> Неопределено Тогда
		Сообщение.Поле  = Поле;
	КонецЕсли;
	
	Сообщение.Сообщить();
КонецПроцедуры

&НаКлиенте
Функция ИсправленноеИмяЗаголовкаЗапроса(Знач Имя)
	НедопустимыеСимволы = СтрСоединить(СтрРазделить(Имя, КлиентHTTPПовтИсп.ДопустимыеСимволыИмениЗаголовкаСтрокой(), Ложь));
	
	Возврат СтрСоединить(СтрРазделить(Имя, НедопустимыеСимволы), "-"); // заменили все недопустимые символы на "-"
КонецФункции

&НаКлиенте
Процедура ФроматированиеВремениВыполненияЗапроса()
	Если ВремяВыполнения > 999 Тогда
		Точность = 2;
		Сдвиг = 3;
		Единицы = "с";
	Иначе
		Точность = 0;
		Сдвиг = 0;
		Единицы = "мс";
	КонецЕсли;
	
	Элементы.ВремяВыполнения.Формат = СтрШаблон("ЧДЦ=%1; ЧС=%2; ЧН='0 мс'; ЧГ=; ЧФ='Ч %3'", Точность, Сдвиг, Единицы);
КонецПроцедуры

#Область Кодогенерация
&НаКлиенте
Процедура ДобавитьВКодЗапросаИдентификаторРесурса(Построитель)
	ПозицияПараметровЗапроса = СтрНайти(ИдентификаторРесурса, "?");
	
	Построитель.Добавить(
		СтрШаблон(
			"ИдентификаторРесурса = ""%1"";",
			?(ПозицияПараметровЗапроса = 0, ИдентификаторРесурса, Лев(ИдентификаторРесурса, ПозицияПараметровЗапроса - 1))
		)
	);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВКодЗапросаИспользованиеПрокси(Построитель, ЕстьДополнительныеПараметры)
	Если ИспользоватьПрокси Тогда
		Хвост = ?(НеИспользоватьПроксиДляЛокальныхАдресов, "", ", , Ложь");
		Хвост = ?(
				ИспользоватьАутентификациюОСПрокси,
				?(ПустаяСтрока(Хвост), "", ", "),
				", Ложь"
			) + Хвост;
		Хвост = ?(
				ПустаяСтрока(ПарольПрокси),
				?(ПустаяСтрока(Хвост), "", ", "),
				", """ + КавычкиВТексте1С(ПарольПрокси) + """"
			) + Хвост;
		Хвост = ?(
				ПустаяСтрока(ПользовательПрокси),
				?(ПустаяСтрока(Хвост), "", ", "),
				", """ + КавычкиВТексте1С(ПользовательПрокси) + """"
			) + Хвост;
		
		Построитель.Добавить(СтрШаблон(
			"	.ИспользоватьПрокси(ДополнительныеПараметры, ""%1"", %2%3)",
			СерверПрокси,
			XMLСтрока(ПортПрокси),
			Хвост
		));
		
		ЕстьДополнительныеПараметры = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВКодЗапросаИспользованиеСессии(Построитель, ЕстьДополнительныеПараметры)
	Если ИспользоватьСессию Тогда
		Построитель.Добавить("	.ИспользоватьСессию(ДополнительныеПараметры)");
		Построитель.Добавить(СтрШаблон("	.УстановитьПорогПеренаправлений(ДополнительныеПараметры, %1)", ПорогПеренаправлений));
		
		ЕстьДополнительныеПараметры = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВКодЗапросаПараметры(Построитель, ЕстьПараметрыЗапроса)
	Для Каждого Стр Из ПараметрыЗапроса Цикл
		Если НЕ Стр.Активно Тогда
			Продолжить;
		КонецЕсли;
		
		Построитель.Добавить(СтрШаблон(
			"	.ДобавитьПараметр(ПараметрыЗапроса, ""%1"", ""%2"")",
			СтрЗаменить(Стр.Ключ, """", """"""),
			СтрЗаменить(Стр.Значение, """", """""")
		));
		
		ЕстьПараметрыЗапроса = Истина;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВКодЗапросаЗаголовки(Построитель, ЕстьДополнительныеПараметры)
	Для Каждого Стр Из ЗаголовкиЗапроса Цикл
		Если НЕ Стр.Активно Тогда
			Продолжить;
		КонецЕсли;
		
		Построитель.Добавить(СтрШаблон("	.УстановитьЗаголовок(ДополнительныеПараметры, ""%1"", ""%2"")", Стр.Ключ, СтрЗаменить(Стр.Значение, """", """""")));
		
		ЕстьДополнительныеПараметры = Истина;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВКодЗапросаСжатиеОтвета(Построитель, ЕстьДополнительныеПараметры)
	Если ПоддержкаСжатогоОтвета Тогда
		Построитель.Добавить("	.УстановитьСжатиеОтветаGZIP(ДополнительныеПараметры)");
		
		ЕстьДополнительныеПараметры = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВКодЗапросаАутентификацию(Построитель, ЕстьДополнительныеПараметры)
	ТипАутентификацииСписокВыбора = Элементы.ТипАутентификации.СписокВыбора;
	Если ТипАутентификации = ТипАутентификацииСписокВыбора[1].Значение Тогда // Basic
		Построитель.Добавить(СтрШаблон(
			"	.УстановитьBasicАвторизацию(ДополнительныеПараметры, ""%1"", ""%2"")",
			ПользовательАутентификации,
			ПарольАутентификации
		));
		
		ЕстьДополнительныеПараметры = Истина;
	ИначеЕсли ТипАутентификации = ТипАутентификацииСписокВыбора[2].Значение Тогда // NTLM
		Построитель.Добавить(СтрШаблон(
			"	.УстановитьNTLMАвторизацию(ДополнительныеПараметры, ""%1"", ""%2"")",
			ПользовательАутентификации,
			ПарольАутентификации
		));
		
		ЕстьДополнительныеПараметры = Истина;
	ИначеЕсли ТипАутентификации = ТипАутентификацииСписокВыбора[3].Значение Тогда // Digest
		Построитель.Добавить(СтрШаблон(
			"	.УстановитьDigestАвторизацию(ДополнительныеПараметры, ""%1"", ""%2"")",
			ПользовательАутентификации,
			ПарольАутентификации
		));
		
		ЕстьДополнительныеПараметры = Истина;
	ИначеЕсли ТипАутентификации = ТипАутентификацииСписокВыбора[4].Значение Тогда // Bearer
		Построитель.Добавить(СтрШаблон(
			"	.УстановитьBearerАвторизацию(ДополнительныеПараметры, ""%1"")",
			ТокенАутентификации
		));
		
		ЕстьДополнительныеПараметры = Истина;
	ИначеЕсли ТипАутентификации = ТипАутентификацииСписокВыбора[5].Значение Тогда // AWS4-HMAC-SHA256
		ЧастиСтроки = Новый Массив;
		ЧастиСтроки.Добавить(СтрШаблон(
			"	.УстановитьAWS4Авторизацию(ДополнительныеПараметры, ""%1"", ""%2""",
			AWSКлючДоступа,
			AWSСекретныйКлюч
		));
		Если НЕ ПустаяСтрока(AWSРегион) Тогда
			ЧастиСтроки.Добавить(СтрШаблон(", ""%1""", AWSРегион));
		КонецЕсли;
		Если НЕ ПустаяСтрока(AWSСервис) Тогда
			ЧастиСтроки.Добавить(?(
			    ПустаяСтрока(AWSРегион),
				СтрШаблон(", , ""%1""", AWSСервис),
				СтрШаблон(", ""%1""", AWSСервис)
			));
		КонецЕсли;
		ЧастиСтроки.Добавить(")");
		
		Построитель.Добавить(СтрСоединить(ЧастиСтроки, ""));
		
		ЕстьДополнительныеПараметры = Истина;
	ИначеЕсли ТипАутентификации = ТипАутентификацииСписокВыбора[6].Значение Тогда // Hawk
		ЧастиСтроки = Новый Массив;
		ЧастиСтроки.Добавить(СтрШаблон(
			"	.УстановитьHawkАвторизацию(ДополнительныеПараметры, ""%1"", ""%2""",
			HawkИдентификатор,
			HawkКлюч
		));
		
		ОкончанияСтроки = Новый Массив;
		ОкончанияСтроки.Добавить(СокрЛП(HawkДополнение));
		ОкончанияСтроки.Добавить(СокрЛП(HawkИдентификаторПриложения));
		ОкончанияСтроки.Добавить(СокрЛП(HawkДелегирование));
		Для я = 0 По 2 Цикл
			Если ОкончанияСтроки[ОкончанияСтроки.ВГраница()] <> "" Тогда
				Прервать;
			КонецЕсли;
			
			ОкончанияСтроки.Удалить(ОкончанияСтроки.ВГраница());
		КонецЦикла;
		
		Для Каждого Окончание Из ОкончанияСтроки Цикл
			ЧастиСтроки.Добавить(?(Окончание = "", "", СтрШаблон("""%1""", СокрЛП(Окончание))));
		КонецЦикла;
		
		Построитель.Добавить(СтрСоединить(ЧастиСтроки, ", ") + ")");
		
		ЕстьДополнительныеПараметры = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВКодЗапросаФайлТелаОтвета(Построитель, ЕстьДополнительныеПараметры, ТребуетсяИмяФайлаТелаОтвета)
	Если ТелоОтветаВФайл Тогда
		ЕстьДополнительныеПараметры = Истина;
		ТребуетсяИмяФайлаТелаОтвета = ПустаяСтрока(ИмяФайлаТелаОтвета);
		
		Построитель.Добавить(СтрШаблон(
			"	.УстановитьИмяВыходногоФайла(ДополнительныеПараметры, %1)",
			?(ТребуетсяИмяФайлаТелаОтвета, "ИмяФайлаТелаОтвета", СтрШаблон("""%1""", ИмяФайлаТелаОтвета))
		));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВКодЗапросаМетодGet(Построитель, Знач ЕстьПараметрыЗапроса, Знач ЕстьДополнительныеПараметры)
	Построитель.Добавить(СтрШаблон(
		"	.Получить(ИдентификаторРесурса%1%2%3);",
		?(ЕстьПараметрыЗапроса ИЛИ ЕстьДополнительныеПараметры, ", ", ""),
		?(ЕстьПараметрыЗапроса, "ПараметрыЗапроса", ""),
		?(ЕстьДополнительныеПараметры, ", ДополнительныеПараметры", "")
	));
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВКодЗапросаМетодPostБезТела(Построитель, Знач ЕстьПараметрыЗапроса, Знач ЕстьДополнительныеПараметры)
	Построитель.Добавить(СтрШаблон(
		"	.ОтправитьТекст(ИдентификаторРесурса, """"%1%2%3);",
		?(ЕстьПараметрыЗапроса ИЛИ ЕстьДополнительныеПараметры, ", ", ""),
		?(ЕстьДополнительныеПараметры, "ДополнительныеПараметры", ""),
		?(ЕстьПараметрыЗапроса, ", ПараметрыЗапроса", "")
	));
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВКодЗапросаМетодPostПолеФормыТекст(Построитель, ТекстПолейФормы, НомерТекста, Знач ПолеФормыТелаЗапроса)
	НомерТекста = НомерТекста + 1;
	ИмяПеременной = "ТекстПоля" + XMLСтрока(НомерТекста);
	
	ТекстПолейФормы.Добавить(Новый Структура("ИмяПеременной, ЗначениеПеременной", ИмяПеременной, ПолеФормыТелаЗапроса.Значение));
	Построитель.Добавить(СтрШаблон("	.ДобавитьПолеФормыТекст(ПоляФормы, ""%1"", %2)", ПолеФормыТелаЗапроса.Ключ, ИмяПеременной));
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВКодЗапросаМетодPostПолеФормыФайл(Построитель, ФайлыПолейФормы, НомерФайла, ПропуститьПоле, Знач ПолеФормыТелаЗапроса)
	Если ПустаяСтрока(ПолеФормыТелаЗапроса.Значение) Тогда
		ПропуститьПоле = Истина;
		Возврат;
	КонецЕсли;
	
	НомерФайла = НомерФайла + 1;
	ИмяПеременной = "ФайлПоля" + XMLСтрока(НомерФайла);
	
	ФайлыПолейФормы.Добавить(Новый Структура("ИмяПеременной, Путь", ИмяПеременной, ПолеФормыТелаЗапроса.Значение));
	Построитель.Добавить(
		СтрШаблон(
			"	.ДобавитьПолеФормыФайл(ПоляФормы, ""%1"", %2, %3.Имя, КлиентHTTPСлужебный.ТипMIMEРасширенияФайла(%4.Расширение))",
			ПолеФормыТелаЗапроса.Ключ,
			ИмяПеременной,
			ИмяПеременной,
			ИмяПеременной
		)
	);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВКодЗапросаМетодPostФорма(Построитель, ЕстьПоляФормы, ТекстПолейФормы, ФайлыПолейФормы, Знач ЕстьПараметрыЗапроса, ЕстьДополнительныеПараметры)
	ЕстьДополнительныеПараметры = Истина;
	
	Построитель.Добавить(СтрШаблон("	.УстановитьРазделительПолейФормы(ДополнительныеПараметры, ""%1"")", Разделитель));
	
	// Тело запроса
	НомерТекста = 0;
	НомерФайла = 0;
	ТипыДанныхФормы = Элементы.ТелоЗапросаДанныеФормы.ПодчиненныеЭлементы.ДанныеФормыТип.СписокВыбора;
	
	Для Каждого Стр Из ТелоЗапросаДанныеФормы Цикл
		Если НЕ Стр.Активно Тогда
			Продолжить;
		КонецЕсли;
		
		Если Стр.Тип = ТипыДанныхФормы[0].Значение Тогда // Текст
			ДобавитьВКодЗапросаМетодPostПолеФормыТекст(Построитель, ТекстПолейФормы, НомерТекста, Стр);
		Иначе // Файл
			ПропуститьПоле = Ложь;
			ДобавитьВКодЗапросаМетодPostПолеФормыФайл(Построитель, ФайлыПолейФормы, НомерФайла, ПропуститьПоле, Стр);
			Если ПропуститьПоле Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ЕстьПоляФормы = Истина;
	КонецЦикла;
	
	Построитель.Добавить(СтрШаблон(
		"	.ОтправитьДанныеФормы(ИдентификаторРесурса, %1%2%3%4);",
		?(ЕстьПоляФормы, "ПоляФормы", "КлиентHTTPКлиентСервер.НовыеПоляФормы()"),
		?(ЕстьПараметрыЗапроса ИЛИ ЕстьДополнительныеПараметры, ", ", ""),
		?(ЕстьДополнительныеПараметры, "ДополнительныеПараметры", ""),
		?(ЕстьПараметрыЗапроса, ", ПараметрыЗапроса", "")
	));
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВКодЗапросаМетодPostHtmlФорма(Построитель, ЕстьПоляФормы, Знач ЕстьПараметрыЗапроса, Знач ЕстьДополнительныеПараметры)
	Для Каждого Стр Из ТелоЗапросаДанныеHTMLФормы Цикл
		Если НЕ Стр.Активно Тогда
			Продолжить;
		КонецЕсли;
		
		Построитель.Добавить(СтрШаблон("	.ДобавитьПолеHTMLФормы(ПоляФормы, ""%1"", ""%2"")", КавычкиВТексте1С(Стр.Ключ), КавычкиВТексте1С(Стр.Значение)));
		
		ЕстьПоляФормы = Истина;
	КонецЦикла;
	
	Построитель.Добавить(СтрШаблон(
		"	.ОтправитьДанныеHTMLФормы(ИдентификаторРесурса, %1%2%3%4);",
		?(ЕстьПоляФормы, "ПоляФормы", "КлиентHTTPКлиентСервер.НовыеПоляФормы()"),
		?(ЕстьПараметрыЗапроса ИЛИ ЕстьДополнительныеПараметры, ", ", ""),
		?(ЕстьДополнительныеПараметры, "ДополнительныеПараметры", ""),
		?(ЕстьПараметрыЗапроса, ", ПараметрыЗапроса", "")
	));
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВКодЗапросаМетодPostТекст(Построитель, ЕстьТекстТелаЗапроса, Знач ЕстьПараметрыЗапроса, Знач ЕстьДополнительныеПараметры)
	Построитель.Добавить(СтрШаблон(
		"	.ОтправитьТекст(ИдентификаторРесурса, ТелоЗапросаТекст%1%2%3);",
		?(ЕстьПараметрыЗапроса ИЛИ ЕстьДополнительныеПараметры, ", ", ""),
		?(ЕстьДополнительныеПараметры, "ДополнительныеПараметры", ""),
		?(ЕстьПараметрыЗапроса, ", ПараметрыЗапроса", "")
	));
	
	ЕстьТекстТелаЗапроса = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВКодЗапросаМетодPostФайл(Построитель, ФайлыПолейФормы, Знач ЕстьПараметрыЗапроса, Знач ЕстьДополнительныеПараметры)
	Если ПустаяСтрока(ТелоЗапросаФайл) Тогда
		Элементы.ГруппаТипыТелаЗапроса.ТекущаяСтраница = Элементы.ТипыТелаЗапросаДвоичныеДанные;
		Элементы.ГруппаРазделыЗапроса.ТекущаяСтраница = Элементы.РазделТелоЗапроса;
		Элементы.ГруппаРазделы.ТекущаяСтраница = Элементы.РазделЗапрос;
		ВызватьИсключение "Укажите выгружаемый файл в теле запроса";
	КонецЕсли;
	
	ФайлыПолейФормы.Добавить(Новый Структура("ИмяПеременной, Путь", "ФайлТела", ТелоЗапросаФайл));
	Построитель.Добавить(СтрШаблон(
		"	.ОтправитьФайл(ИдентификаторРесурса, ФайлТела%1%2%3);",
		?(ЕстьПараметрыЗапроса ИЛИ ЕстьДополнительныеПараметры, ", ", ""),
		?(ЕстьДополнительныеПараметры, "ДополнительныеПараметры", ""),
		?(ЕстьПараметрыЗапроса, ", ПараметрыЗапроса", "")
	));
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВКодЗапросаМетодPost(Построитель, ЕстьТекстТелаЗапроса, ЕстьПоляФормы, ТекстПолейФормы, ФайлыПолейФормы, Знач ЕстьПараметрыЗапроса, ЕстьДополнительныеПараметры)
	ТипТелаЗапросаСписокВыбора = Элементы.ТипТелаЗапроса.СписокВыбора;
	Если ТипТелаЗапроса = ТипТелаЗапросаСписокВыбора[0].Значение Тогда // none
		ДобавитьВКодЗапросаМетодPostБезТела(Построитель, ЕстьПараметрыЗапроса, ЕстьДополнительныеПараметры);
	ИначеЕсли ТипТелаЗапроса = ТипТелаЗапросаСписокВыбора[1].Значение Тогда // form-data
		ДобавитьВКодЗапросаМетодPostФорма(Построитель, ЕстьПоляФормы, ТекстПолейФормы, ФайлыПолейФормы, ЕстьПараметрыЗапроса, ЕстьДополнительныеПараметры);
	ИначеЕсли ТипТелаЗапроса = ТипТелаЗапросаСписокВыбора[2].Значение Тогда // x-www-form-urlencoded
		ДобавитьВКодЗапросаМетодPostHtmlФорма(Построитель, ЕстьПоляФормы, ЕстьПараметрыЗапроса, ЕстьДополнительныеПараметры);
	ИначеЕсли ТипТелаЗапроса = ТипТелаЗапросаСписокВыбора[3].Значение Тогда // raw
		ДобавитьВКодЗапросаМетодPostТекст(Построитель, ЕстьТекстТелаЗапроса, ЕстьПараметрыЗапроса, ЕстьДополнительныеПараметры);
	ИначеЕсли ТипТелаЗапроса = ТипТелаЗапросаСписокВыбора[4].Значение Тогда // binary
		ДобавитьВКодЗапросаМетодPostФайл(Построитель, ФайлыПолейФормы, ЕстьПараметрыЗапроса, ЕстьДополнительныеПараметры);
	Иначе
		ВызватьИсключение СтрШаблон("Тип тела запроса %1 не поддерживается для %2", ТипТелаЗапроса, Схема);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВКодЗапросаМетодPutБезТела(Построитель, Знач ЕстьПараметрыЗапроса, Знач ЕстьДополнительныеПараметры)
	Построитель.Добавить(СтрШаблон(
		"	.ЗаписатьТекст(ИдентификаторРесурса, """"%1%2%3);",
		?(ЕстьПараметрыЗапроса ИЛИ ЕстьДополнительныеПараметры, ", ", ""),
		?(ЕстьДополнительныеПараметры, "ДополнительныеПараметры", ""),
		?(ЕстьПараметрыЗапроса, ", ПараметрыЗапроса", "")
	));
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВКодЗапросаМетодPutТекст(Построитель, ЕстьТекстТелаЗапроса, Знач ЕстьПараметрыЗапроса, Знач ЕстьДополнительныеПараметры)
	Построитель.Добавить(СтрШаблон(
		"	.ЗаписатьТекст(ИдентификаторРесурса, ТелоЗапросаТекст%1%2%3);",
		?(ЕстьПараметрыЗапроса ИЛИ ЕстьДополнительныеПараметры, ", ", ""),
		?(ЕстьДополнительныеПараметры, "ДополнительныеПараметры", ""),
		?(ЕстьПараметрыЗапроса, ", ПараметрыЗапроса", "")
	));
	
	ЕстьТекстТелаЗапроса = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВКодЗапросаМетодPutФайл(Построитель, ФайлыПолейФормы, Знач ЕстьПараметрыЗапроса, Знач ЕстьДополнительныеПараметры)
	Если ПустаяСтрока(ТелоЗапросаФайл) Тогда
		Элементы.ГруппаТипыТелаЗапроса.ТекущаяСтраница = Элементы.ТипыТелаЗапросаДвоичныеДанные;
		Элементы.ГруппаРазделыЗапроса.ТекущаяСтраница = Элементы.РазделТелоЗапроса;
		Элементы.ГруппаРазделы.ТекущаяСтраница = Элементы.РазделЗапрос;
		ВызватьИсключение "Укажите выгружаемый файл в теле запроса";
	КонецЕсли;
	
	ФайлыПолейФормы.Добавить(Новый Структура("ИмяПеременной, Путь", "ФайлТела", ТелоЗапросаФайл));
	Построитель.Добавить(СтрШаблон(
		"	.ЗаписатьФайл(ИдентификаторРесурса, ФайлТела%1%2%3);",
		?(ЕстьПараметрыЗапроса ИЛИ ЕстьДополнительныеПараметры, ", ", ""),
		?(ЕстьДополнительныеПараметры, "ДополнительныеПараметры", ""),
		?(ЕстьПараметрыЗапроса, ", ПараметрыЗапроса", "")
	));
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВКодЗапросаМетодPut(Построитель, ЕстьТекстТелаЗапроса, ФайлыПолейФормы, Знач ЕстьПараметрыЗапроса, Знач ЕстьДополнительныеПараметры)
	ТипТелаЗапросаСписокВыбора = Элементы.ТипТелаЗапроса.СписокВыбора;
	Если ТипТелаЗапроса = ТипТелаЗапросаСписокВыбора[0].Значение Тогда // none
		ДобавитьВКодЗапросаМетодPutБезТела(Построитель, ЕстьПараметрыЗапроса, ЕстьДополнительныеПараметры);
	ИначеЕсли ТипТелаЗапроса = ТипТелаЗапросаСписокВыбора[3].Значение Тогда // raw
		ДобавитьВКодЗапросаМетодPutТекст(Построитель, ЕстьТекстТелаЗапроса, ЕстьПараметрыЗапроса, ЕстьДополнительныеПараметры);
	ИначеЕсли ТипТелаЗапроса = ТипТелаЗапросаСписокВыбора[4].Значение Тогда // binary
		ДобавитьВКодЗапросаМетодPutФайл(Построитель, ФайлыПолейФормы, ЕстьПараметрыЗапроса, ЕстьДополнительныеПараметры);
	Иначе
		ВызватьИсключение СтрШаблон("Тип тела запроса %1 не поддерживается для %2", ТипТелаЗапроса, Схема);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВКодЗапросаМетодPatchБезТела(Построитель, Знач ЕстьПараметрыЗапроса, Знач ЕстьДополнительныеПараметры)
	Построитель.Добавить(СтрШаблон(
		"	.ИзменитьТекст(ИдентификаторРесурса, """"%1%2%3);",
		?(ЕстьПараметрыЗапроса ИЛИ ЕстьДополнительныеПараметры, ", ", ""),
		?(ЕстьДополнительныеПараметры, "ДополнительныеПараметры", ""),
		?(ЕстьПараметрыЗапроса, ", ПараметрыЗапроса", "")
	));
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВКодЗапросаМетодPatchТекст(Построитель, ЕстьТекстТелаЗапроса, Знач ЕстьПараметрыЗапроса, Знач ЕстьДополнительныеПараметры)
	Построитель.Добавить(СтрШаблон(
		"	.ИзменитьТекст(ИдентификаторРесурса, ТелоЗапросаТекст%1%2%3);",
		?(ЕстьПараметрыЗапроса ИЛИ ЕстьДополнительныеПараметры, ", ", ""),
		?(ЕстьДополнительныеПараметры, "ДополнительныеПараметры", ""),
		?(ЕстьПараметрыЗапроса, ", ПараметрыЗапроса", "")
	));
	
	ЕстьТекстТелаЗапроса = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВКодЗапросаМетодPatchФайл(Построитель, ФайлыПолейФормы, Знач ЕстьПараметрыЗапроса, Знач ЕстьДополнительныеПараметры)
	Если ПустаяСтрока(ТелоЗапросаФайл) Тогда
		Элементы.ГруппаТипыТелаЗапроса.ТекущаяСтраница = Элементы.ТипыТелаЗапросаДвоичныеДанные;
		Элементы.ГруппаРазделыЗапроса.ТекущаяСтраница = Элементы.РазделТелоЗапроса;
		Элементы.ГруппаРазделы.ТекущаяСтраница = Элементы.РазделЗапрос;
		ВызватьИсключение "Укажите выгружаемый файл в теле запроса";
	КонецЕсли;
	
	ФайлыПолейФормы.Добавить(Новый Структура("ИмяПеременной, Путь", "ФайлТела", ТелоЗапросаФайл));
	Построитель.Добавить(СтрШаблон(
		"	.ИзменитьФайл(ИдентификаторРесурса, ФайлТела%1%2%3);",
		?(ЕстьПараметрыЗапроса ИЛИ ЕстьДополнительныеПараметры, ", ", ""),
		?(ЕстьДополнительныеПараметры, "ДополнительныеПараметры", ""),
		?(ЕстьПараметрыЗапроса, ", ПараметрыЗапроса", "")
	));
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВКодЗапросаМетодPatch(Построитель, ЕстьТекстТелаЗапроса, ФайлыПолейФормы, Знач ЕстьПараметрыЗапроса, Знач ЕстьДополнительныеПараметры)
	ТипТелаЗапросаСписокВыбора = Элементы.ТипТелаЗапроса.СписокВыбора;
	Если ТипТелаЗапроса = ТипТелаЗапросаСписокВыбора[0].Значение Тогда // none
		ДобавитьВКодЗапросаМетодPatchБезТела(Построитель, ЕстьПараметрыЗапроса, ЕстьДополнительныеПараметры);
	ИначеЕсли ТипТелаЗапроса = ТипТелаЗапросаСписокВыбора[3].Значение Тогда // raw
		ДобавитьВКодЗапросаМетодPatchТекст(Построитель, ЕстьТекстТелаЗапроса, ЕстьПараметрыЗапроса, ЕстьДополнительныеПараметры);
	ИначеЕсли ТипТелаЗапроса = ТипТелаЗапросаСписокВыбора[4].Значение Тогда // binary
		ДобавитьВКодЗапросаМетодPatchФайл(Построитель, ФайлыПолейФормы, ЕстьПараметрыЗапроса, ЕстьДополнительныеПараметры);
	Иначе
		ВызватьИсключение СтрШаблон("Тип тела запроса %1 не поддерживается для %2", ТипТелаЗапроса, Схема);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВКодЗапросаМетодDeleteТекст(Построитель, ЕстьТекстТелаЗапроса, Знач ЕстьПараметрыЗапроса, Знач ЕстьДополнительныеПараметры)
	Построитель.Добавить(СтрШаблон(
		"	.Удалить(ИдентификаторРесурса, ТелоЗапросаТекст%1%2%3);",
		?(ЕстьПараметрыЗапроса ИЛИ ЕстьДополнительныеПараметры, ", ", ""),
		?(ЕстьДополнительныеПараметры, "ДополнительныеПараметры", ""),
		?(ЕстьПараметрыЗапроса, ", ПараметрыЗапроса", "")
	));
	
	ЕстьТекстТелаЗапроса = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВКодЗапросаМетодDeleteБезТела(Построитель, Знач ЕстьПараметрыЗапроса, Знач ЕстьДополнительныеПараметры)
	Построитель.Добавить(СтрШаблон(
		"	.Удалить(ИдентификаторРесурса%1%2%3);",
		?(ЕстьПараметрыЗапроса ИЛИ ЕстьДополнительныеПараметры, ", , ", ""),
		?(ЕстьДополнительныеПараметры, "ДополнительныеПараметры", ""),
		?(ЕстьПараметрыЗапроса, ", ПараметрыЗапроса", "")
	));
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВКодЗапросаМетодDelete(Построитель, ЕстьТекстТелаЗапроса, Знач ЕстьПараметрыЗапроса, Знач ЕстьДополнительныеПараметры)
	ТипТелаЗапросаСписокВыбора = Элементы.ТипТелаЗапроса.СписокВыбора;
	Если ТипТелаЗапроса = ТипТелаЗапросаСписокВыбора[3].Значение Тогда // raw
		ДобавитьВКодЗапросаМетодDeleteТекст(Построитель, ЕстьТекстТелаЗапроса, ЕстьПараметрыЗапроса, ЕстьДополнительныеПараметры);
	Иначе
		ДобавитьВКодЗапросаМетодDeleteБезТела(Построитель, ЕстьПараметрыЗапроса, ЕстьДополнительныеПараметры);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВКодЗапросаМетодHead(Построитель, Знач ЕстьПараметрыЗапроса, Знач ЕстьДополнительныеПараметры)
	Построитель.Добавить(СтрШаблон(
		"	.ПолучитьЗаголовки(ИдентификаторРесурса%1%2%3);",
		?(ЕстьПараметрыЗапроса ИЛИ ЕстьДополнительныеПараметры, ", ", ""),
		?(ЕстьПараметрыЗапроса, "ПараметрыЗапроса", ""),
		?(ЕстьДополнительныеПараметры, ", ДополнительныеПараметры", "")
	));
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВКодЗапросаМетод(Построитель, ЕстьТекстТелаЗапроса, ЕстьПоляФормы, ТекстПолейФормы, ФайлыПолейФормы, Знач ЕстьПараметрыЗапроса, ЕстьДополнительныеПараметры)
	Если Схема = Элементы.Схема.СписокВыбора[0].Значение Тогда // GET
		ДобавитьВКодЗапросаМетодGet(Построитель, ЕстьПараметрыЗапроса, ЕстьДополнительныеПараметры);
	ИначеЕсли Схема = Элементы.Схема.СписокВыбора[1].Значение Тогда // POST
		ДобавитьВКодЗапросаМетодPost(Построитель, ЕстьТекстТелаЗапроса, ЕстьПоляФормы, ТекстПолейФормы, ФайлыПолейФормы, ЕстьПараметрыЗапроса, ЕстьДополнительныеПараметры); 
	ИначеЕсли Схема = Элементы.Схема.СписокВыбора[2].Значение Тогда // PUT
		ДобавитьВКодЗапросаМетодPut(Построитель, ЕстьТекстТелаЗапроса, ФайлыПолейФормы, ЕстьПараметрыЗапроса, ЕстьДополнительныеПараметры);
	ИначеЕсли Схема = Элементы.Схема.СписокВыбора[3].Значение Тогда // DELETE
		ДобавитьВКодЗапросаМетодDelete(Построитель, ЕстьТекстТелаЗапроса, ЕстьПараметрыЗапроса, ЕстьДополнительныеПараметры);
	ИначеЕсли Схема = Элементы.Схема.СписокВыбора[4].Значение Тогда // HEAD
		ДобавитьВКодЗапросаМетодHead(Построитель, ЕстьПараметрыЗапроса, ЕстьДополнительныеПараметры);
	ИначеЕсли Схема = Элементы.Схема.СписокВыбора[5].Значение Тогда // PATCH
		ДобавитьВКодЗапросаМетодPatch(Построитель, ЕстьТекстТелаЗапроса, ФайлыПолейФормы, ЕстьПараметрыЗапроса, ЕстьДополнительныеПараметры);
	Иначе
		ВызватьИсключение СтрШаблон("Схема запроса %1 не поддерживается", Схема);
	КонецЕсли;
	
	ПредыдущаяЧасть = Построитель[Построитель.ВГраница() - 1];
	Если НЕ СтрНачинаетсяС(ПредыдущаяЧасть, "	.") Тогда
		Построитель[Построитель.ВГраница() - 1] = ПредыдущаяЧасть + СокрЛП(Построитель[Построитель.ВГраница()]);
		Построитель.Удалить(Построитель.ВГраница());
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВКодЗапросаИнициализациюПолейФормы(Построитель, ТекстПолейФормы, ФайлыПолейФормы)
	Смещение = 0;
	Для Каждого ФайлПоляФормы Из ФайлыПолейФормы Цикл
		Построитель.Вставить(
			1 + Смещение,
			СтрШаблон("%1 = Новый Файл(""%2"");", ФайлПоляФормы.ИмяПеременной, ФайлПоляФормы.Путь)
		);
		
		Смещение = Смещение + 1;
	КонецЦикла;
	Если Смещение > 0 Тогда
		Построитель.Вставить(1 + Смещение, "");
	КонецЕсли;
	
	Смещение = 0;
	Для Каждого ТекстПоляФормы Из ТекстПолейФормы Цикл
		Построитель.Вставить(
			1 + Смещение,
			ИнициализацияТекстовойПеременной(ТекстПоляФормы.ИмяПеременной, ТекстПоляФормы.ЗначениеПеременной)
		);
		
		Смещение = Смещение + 1;
	КонецЦикла;
	Если Смещение > 0 Тогда
		Построитель.Вставить(1 + Смещение, "");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВКодЗапросаИнициализациюКонфигурации(Построитель, Знач ЕстьПараметрыЗапроса, Знач ЕстьДополнительныеПараметры, Знач ТребуетсяИмяФайлаТелаОтвета, Знач ЕстьТекстТелаЗапроса, Знач ЕстьПоляФормы)
	Если ЕстьПоляФормы Тогда
		Построитель.Вставить(1, "ПоляФормы = КлиентHTTPКлиентСервер.НовыеПоляФормы();");
	КонецЕсли;
	
	Если ЕстьТекстТелаЗапроса Тогда
		Построитель.Вставить(1, ИнициализацияТекстовойПеременной("ТелоЗапросаТекст", ТелоЗапросаТекст));
	КонецЕсли;
	
	Если ЕстьДополнительныеПараметры Тогда
		Построитель.Вставить(1, "ДополнительныеПараметры = КлиентHTTPКлиентСервер.НовыеДополнительныеПараметры();");
	КонецЕсли;
	
	Если ЕстьПараметрыЗапроса Тогда
		Построитель.Вставить(1, "ПараметрыЗапроса = КлиентHTTPКлиентСервер.НовыеПараметрыЗапроса();");
	КонецЕсли;
	
	Если ТребуетсяИмяФайлаТелаОтвета Тогда
		Построитель.Вставить(1, "ИмяФайлаТелаОтвета = ПолучитьИмяВременногоФайла(""dat"");");
	КонецЕсли;
	
	Построитель.Вставить(
		1 + ТребуетсяИмяФайлаТелаОтвета + ЕстьПараметрыЗапроса + ЕстьДополнительныеПараметры + ЕстьПоляФормы + ЕстьТекстТелаЗапроса,
		""
	);
КонецПроцедуры

&НаКлиенте
Функция КодЗапросаКонсоли()
	ЧастиКода = Новый Массив;
	ЧастиСтрокиКода = Новый Массив;
	
	ЕстьДополнительныеПараметры = Ложь;
	ЕстьПараметрыЗапроса = Ложь;
	ЕстьПоляФормы = Ложь;
	ЕстьТекстТелаЗапроса = Ложь;
	ТребуетсяИмяФайлаТелаОтвета = Ложь;
	ТекстПолейФормы = Новый Массив;
	ФайлыПолейФормы = Новый Массив;
	
	ДобавитьВКодЗапросаИдентификаторРесурса(ЧастиКода);
	
	// Начало текучего интерфейса
	ЧастиКода.Добавить("Ответ = КлиентHTTPКлиентСервер");
	
	ДобавитьВКодЗапросаИспользованиеПрокси(ЧастиКода, ЕстьДополнительныеПараметры);
	ДобавитьВКодЗапросаИспользованиеСессии(ЧастиКода, ЕстьДополнительныеПараметры);
	ДобавитьВКодЗапросаПараметры(ЧастиКода, ЕстьПараметрыЗапроса);
	ДобавитьВКодЗапросаЗаголовки(ЧастиКода, ЕстьДополнительныеПараметры);
	ДобавитьВКодЗапросаСжатиеОтвета(ЧастиКода, ЕстьДополнительныеПараметры);
	ДобавитьВКодЗапросаАутентификацию(ЧастиКода, ЕстьДополнительныеПараметры);
	ДобавитьВКодЗапросаФайлТелаОтвета(ЧастиКода, ЕстьДополнительныеПараметры, ТребуетсяИмяФайлаТелаОтвета);
	ДобавитьВКодЗапросаМетод(ЧастиКода, ЕстьТекстТелаЗапроса, ЕстьПоляФормы, ТекстПолейФормы, ФайлыПолейФормы, ЕстьПараметрыЗапроса, ЕстьДополнительныеПараметры);
	ДобавитьВКодЗапросаИнициализациюПолейФормы(ЧастиКода, ТекстПолейФормы, ФайлыПолейФормы);
	ДобавитьВКодЗапросаИнициализациюКонфигурации(ЧастиКода, ЕстьПараметрыЗапроса, ЕстьДополнительныеПараметры, ТребуетсяИмяФайлаТелаОтвета, ЕстьТекстТелаЗапроса, ЕстьПоляФормы);
	
	Возврат СтрСоединить(ЧастиКода, Символы.ПС);
КонецФункции

&НаКлиенте
Функция ИнициализацияТекстовойПеременной(Знач ИмяПеременной, Знач ЗначениеПеременной)
	Возврат СтрШаблон(
		"%1 = %2""%3"";",
		ИмяПеременной,
		?(
			СтрНайти(ЗначениеПеременной, Символы.ПС) > 0,
			"
			|	",
			""
		),
		СтрЗаменить(КавычкиВТексте1С(ЗначениеПеременной), Символы.ПС, Символы.ПС + "	|")
	);
КонецФункции

&НаКлиенте
Функция КавычкиВТексте1С(Знач Текст)
	Возврат СтрЗаменить(Текст, """", """""");
КонецФункции
#КонецОбласти

#Область ГенерацияКомандыCurl
&НаКлиенте
Функция ЭкранированиеАпострофаUnix(Знач Текст)
	Возврат СтрЗаменить(Текст, "'", "'\''")
КонецФункции

&НаКлиенте
Функция ЭкранированиеСимволовЗначенияПоляФормы(Знач Текст, Знач ЭкранироватьОбратныйСлеш)
	Возврат СтрЗаменить(
		ЭкранированиеАпострофаUnix(
			?(
				ЭкранироватьОбратныйСлеш,
				СтрЗаменить(Текст, "\", "\\"),
				Текст
			)
		), """", "\"""
	);
КонецФункции

&НаКлиенте
Процедура ЗаполнитьПользователяИПарольCurlКоманды(ЧастиКоманды)
	Если НЕ ЗначениеЗаполнено(ПользовательАутентификации) Тогда
		Возврат;
	КонецЕсли;
	
	ЧастиАутентификации = Новый Массив;
	
	ЧастиКоманды.Добавить("-u");
	ЧастиАутентификации.Добавить(ПользовательАутентификации);
	ЧастиАутентификации.Добавить(ПарольАутентификации);
	ЧастиКоманды.Добавить(СтрШаблон("'%1'", ЭкранированиеАпострофаUnix(СтрСоединить(ЧастиАутентификации, ":"))));
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьAWS4CurlКоманды(ЧастиКоманды)
	ЧастиАутентификации = Новый Массив;
	
	ЧастиКоманды.Добавить("-u");
	ЧастиАутентификации.Добавить(AWSКлючДоступа);
	ЧастиАутентификации.Добавить(AWSСекретныйКлюч);
	ЧастиКоманды.Добавить(СтрШаблон("'%1'", ЭкранированиеАпострофаUnix(СтрСоединить(ЧастиАутентификации, ":"))));
	
	ЧастиКоманды.Добавить("--aws-sigv4");
	ЧастиАутентификации.Очистить();
	ЧастиАутентификации.Добавить("aws:amz");
	Если НЕ ПустаяСтрока(AWSРегион) Тогда
		ЧастиАутентификации.Добавить(AWSРегион);
		Если НЕ ПустаяСтрока(AWSСервис) Тогда
			ЧастиАутентификации.Добавить(AWSСервис);
		КонецЕсли;
	КонецЕсли;
	
	ЧастиКоманды.Добавить(СтрШаблон("'%1'", ЭкранированиеАпострофаUnix(СтрСоединить(ЧастиАутентификации, ":"))));
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАутентификациюCurlКоманды(ЧастиКоманды)
	Если ТипАутентификации = Элементы.ТипАутентификации.СписокВыбора[1].Значение Тогда // Basic
		ЗаполнитьПользователяИПарольCurlКоманды(ЧастиКоманды);
		ЧастиКоманды.Добавить("--basic");
	ИначеЕсли ТипАутентификации = Элементы.ТипАутентификации.СписокВыбора[2].Значение Тогда // NTLM
		ЗаполнитьПользователяИПарольCurlКоманды(ЧастиКоманды);
		ЧастиКоманды.Добавить("--ntlm");
	ИначеЕсли ТипАутентификации = Элементы.ТипАутентификации.СписокВыбора[3].Значение Тогда // Digest
		ЗаполнитьПользователяИПарольCurlКоманды(ЧастиКоманды);
		ЧастиКоманды.Добавить("--digest");
	ИначеЕсли ТипАутентификации = Элементы.ТипАутентификации.СписокВыбора[4].Значение Тогда // Bearer
		ЧастиКоманды.Добавить("--oauth2-bearer");
		ЧастиКоманды.Добавить(СтрШаблон("'%1'", ЭкранированиеАпострофаUnix(ТокенАутентификации)));
	ИначеЕсли ТипАутентификации = Элементы.ТипАутентификации.СписокВыбора[5].Значение Тогда // AWS4-HMAC-SHA256
		ЗаполнитьAWS4CurlКоманды(ЧастиКоманды);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПолеФормыCurlКоманды(ЧастиКоманды, Знач Поле)
	ТипMIME = "";
	ИмяФайла = "";
	ЭкранироватьОбратныйСлеш = Истина;
	ТипыДанныхФормыФайл = Элементы.ТелоЗапросаДанныеФормы.ПодчиненныеЭлементы.ДанныеФормыТип.СписокВыбора[1].Значение;
	
	ЧастиПоляФормы = Новый Массив;
	ЧастиПоляФормы.Добавить(ЭкранированиеАпострофаUnix(Поле.Ключ));
	ЧастиПоляФормы.Добавить("=");
	Если Поле.Тип = ТипыДанныхФормыФайл Тогда
		ЧастиПоляФормы.Добавить("@");
		
		ФайлПоля = Новый Файл(Поле.Значение);
		ИмяФайла = ФайлПоля.Имя;
		ТипMIME = КлиентHTTPСлужебный.ТипMIMEРасширенияФайла(ФайлПоля.Расширение);
		ЭкранироватьОбратныйСлеш = ?(ВыполнятьНаСервере, РазделительПутиСервера(), ПолучитьРазделительПутиКлиента()) <> "\";
	КонецЕсли;
	
	ЧастиПоляФормы.Добавить("""");
	ЧастиПоляФормы.Добавить(ЭкранированиеСимволовЗначенияПоляФормы(Поле.Значение, ЭкранироватьОбратныйСлеш));
	
	Если НЕ ПустаяСтрока(ИмяФайла) Тогда
		ЧастиПоляФормы.Добавить(";filename=");
		ЧастиПоляФормы.Добавить(ИмяФайла);
	КонецЕсли;
	Если НЕ ПустаяСтрока(ТипMIME) Тогда
		ЧастиПоляФормы.Добавить(";type=");
		ЧастиПоляФормы.Добавить(ТипMIME);
	КонецЕсли;
	
	ЧастиПоляФормы.Добавить("""");
	
	ЧастиКоманды.Добавить("-F");
	ЧастиКоманды.Добавить(СтрШаблон("'%1'", СтрСоединить(ЧастиПоляФормы, "")));
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеФормыCurlКоманды(ЧастиКоманды, ОтобразитьPOST, ПредопределенныеЗаголовки)
	Если ТелоЗапросаДанныеФормы.Количество() = 0 Тогда
		ОтобразитьPOST = Истина;
		Возврат;
	КонецЕсли;
	
	Для Каждого Стр Из ТелоЗапросаДанныеФормы Цикл
		ЗаполнитьПолеФормыCurlКоманды(ЧастиКоманды, Стр);
	КонецЦикла;
	
	ПредопределенныеЗаголовки.Добавить(
		Новый Структура("Ключ, Значение", "Content-Type", "multipart/form-data; boundary=" + Разделитель)
	);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеHTMLФормыCurlКоманды(ЧастиКоманды, ОтобразитьPOST, ПредопределенныеЗаголовки)
	Если ТелоЗапросаДанныеHTMLФормы.Количество() = 0 Тогда
		ОтобразитьPOST = Истина;
		Возврат;
	КонецЕсли;
	
	ПоляФормы = Новый Массив;
	Для Каждого Стр Из ТелоЗапросаДанныеHTMLФормы Цикл
		ЧастиКоманды.Добавить("--data-urlencode");
		ЧастиКоманды.Добавить(СтрШаблон("'%1=%2'", КодированныйТекстВURL(Стр.Ключ), ЭкранированиеАпострофаUnix(Стр.Значение)));
	КонецЦикла;
	
	ПредопределенныеЗаголовки.Добавить(Новый Структура("Ключ, Значение", "Content-Type", "application/x-www-form-urlencoded"));
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТекстовыеДанныеCurlКоманды(ЧастиКоманды, ОтобразитьPOST)
	Если ПустаяСтрока(ТелоЗапросаТекст) Тогда
		ОтобразитьPOST = Истина;
		Возврат;
	КонецЕсли;
	
	ЧастиКоманды.Добавить("--data-raw");
	ЧастиКоманды.Добавить(СтрШаблон("'%1'", ЭкранированиеАпострофаUnix(ТелоЗапросаТекст)));
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеФайлаCurlКоманды(ЧастиКоманды, ОтобразитьPOST, ПредопределенныеЗаголовки)
	Если ПустаяСтрока(ТелоЗапросаФайл) Тогда
		ОтобразитьPOST = Истина;
		Возврат;
	КонецЕсли;
	
	ЧастиКоманды.Добавить("--data-binary");
	ЧастиКоманды.Добавить(СтрШаблон("@""%1""", ЭкранированиеАпострофаUnix(ТелоЗапросаФайл)));
	
	ФайлТела = Новый Файл(ТелоЗапросаФайл);
	ТипMIME = КлиентHTTPСлужебный.ТипMIMEРасширенияФайла(ФайлТела.Расширение);
	
	ПредопределенныеЗаголовки.Добавить(Новый Структура("Ключ, Значение", "Content-Type", ТипMIME));
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТелоЗапросаCurlКоманды(ЧастиКоманды, ОтобразитьPOST, ПредопределенныеЗаголовки)
	Если ТипТелаЗапроса = Элементы.ТипТелаЗапроса.СписокВыбора[1].Значение Тогда // multipart/form-data
		ЗаполнитьДанныеФормыCurlКоманды(ЧастиКоманды, ОтобразитьPOST, ПредопределенныеЗаголовки);
	ИначеЕсли ТипТелаЗапроса = Элементы.ТипТелаЗапроса.СписокВыбора[2].Значение Тогда // application/x-www-form-urlencoded
		ЗаполнитьДанныеHTMLФормыCurlКоманды(ЧастиКоманды, ОтобразитьPOST, ПредопределенныеЗаголовки);
	ИначеЕсли ТипТелаЗапроса = Элементы.ТипТелаЗапроса.СписокВыбора[3].Значение Тогда // Текст
		ЗаполнитьТекстовыеДанныеCurlКоманды(ЧастиКоманды, ОтобразитьPOST);
	ИначеЕсли ТипТелаЗапроса = Элементы.ТипТелаЗапроса.СписокВыбора[4].Значение Тогда // Файл
		ЗаполнитьДанныеФайлаCurlКоманды(ЧастиКоманды, ОтобразитьPOST, ПредопределенныеЗаголовки);
	Иначе
		ОтобразитьPOST = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьФайлОтветаCurlКоманды(ЧастиКоманды)
	Если НЕ (ТелоОтветаВФайл И ЗначениеЗаполнено(ИмяФайлаТелаОтвета)) Тогда
		Возврат;
	КонецЕсли;
	
	ЧастиКоманды.Добавить("-o");
	ЧастиКоманды.Добавить(СтрШаблон("""%1""", ИмяФайлаТелаОтвета));
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПроксиCurlКоманды(ЧастиКоманды)
	Если НЕ (ИспользоватьПрокси И ЗначениеЗаполнено(СерверПрокси)) Тогда
		Возврат;
	КонецЕсли;
	
	ЧастиПрокси = Новый Массив;
	
	Если ЗначениеЗаполнено(ПользовательПрокси) Тогда
		ЧастиПрокси.Добавить(ПользовательПрокси);
		ЧастиПрокси.Добавить(ПарольПрокси);
		
		ЧастиКоманды.Добавить(?(ИспользоватьАутентификациюОСПрокси, "--proxy-ntlm", "--proxy-basic"));
		ЧастиКоманды.Добавить("--proxy-user");
		ЧастиКоманды.Добавить(СтрШаблон("'%1'", СтрЗаменить(СтрСоединить(ЧастиПрокси, ":"), "'", "'\''")));
	КонецЕсли;
	
	ЧастиПрокси.Очистить();
	ЧастиПрокси.Добавить(ПротоколПрокси);
	ЧастиПрокси.Добавить("://");
	ЧастиПрокси.Добавить(СерверПрокси);
	
	Если ЗначениеЗаполнено(ПортПрокси) Тогда
		ЧастиПрокси.Добавить(":");
		ЧастиПрокси.Добавить(ПортПрокси);
	КонецЕсли;
	
	ЧастиКоманды.Добавить("-x");
	ЧастиКоманды.Добавить(СтрСоединить(ЧастиПрокси, ""));
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСессиюCurlКоманды(ЧастиКоманды, ЧастиСложнойОпции)
	Если НЕ ИспользоватьСессию Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПорогПеренаправлений) Тогда
		ЧастиКоманды.Добавить("--max-redirs");
		ЧастиКоманды.Добавить(ПорогПеренаправлений);
	КонецЕсли;
	
	ЧастиСложнойОпции.Добавить("L");
	
	Если ПоддержкаCookie Тогда
		ЗначениеCookie = КлиентHTTPКлиентСервер.ЗначениеЗаголовкаCookieРесурса(ИдентификаторРесурса, Дополнительно);
		Если ЗначениеЗаполнено(ЗначениеCookie) Тогда
			ЧастиКоманды.Добавить("-b");
			ЧастиКоманды.Добавить(СтрШаблон("'%1'", ЭкранированиеАпострофаUnix(ЗначениеCookie)));
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСжатиеCurlКоманды(ЧастиКоманды)
	Если ПоддержкаСжатогоОтвета Тогда
		ЧастиКоманды.Добавить("--compressed");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаголовкиCurlКоманды(ЧастиКоманды, Знач ПредопределенныеЗаголовки)
	Для Каждого Стр Из ПредопределенныеЗаголовки Цикл
		ЧастиКоманды.Добавить("-H");
		ЧастиКоманды.Добавить(
			СтрШаблон("'%1: %2'", ЭкранированиеАпострофаUnix(Стр.Ключ), ЭкранированиеАпострофаUnix(Стр.Значение))
		);
	КонецЦикла;
	
	Для Каждого Стр Из ЗаголовкиЗапроса Цикл
		Если НЕ Стр.Активно Тогда
			Продолжить;
		КонецЕсли;
		
		ЧастиКоманды.Добавить("-H");
		ЧастиКоманды.Добавить(
			СтрШаблон("'%1: %2'", ЭкранированиеАпострофаUnix(Стр.Ключ), ЭкранированиеАпострофаUnix(Стр.Значение))
		);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСхемуЗапросаCurlКоманды(ЧастиКоманды, ЧастиСложнойОпции, Знач ОтобразитьPOST)
	СхемаСписокВыбора = Элементы.Схема.СписокВыбора;
	Если Схема = СхемаСписокВыбора[0].Значение И НЕ ОтобразитьPOST Тогда // GET
		ЧастиКоманды.Добавить(СтрШаблон("-X %1", Схема));
	ИначеЕсли Схема = СхемаСписокВыбора[1].Значение И ОтобразитьPOST Тогда // POST
		ЧастиКоманды.Добавить(СтрШаблон("-X %1", Схема));
	ИначеЕсли Схема = СхемаСписокВыбора[4].Значение Тогда // HEAD
		ЧастиСложнойОпции.Добавить("I");	
	ИначеЕсли Схема = СхемаСписокВыбора[2].Значение // PUT
			ИЛИ Схема = СхемаСписокВыбора[3].Значение // DELETE
			ИЛИ Схема = СхемаСписокВыбора[5].Значение // PATCH
		Тогда
		ЧастиКоманды.Добавить(СтрШаблон("-X %1", Схема));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЧастиРазделаКомандыCurl(ЧастиКоманды, Знач РазделКоманды)
	Для Каждого Часть Из РазделКоманды Цикл
		ЧастиКоманды.Добавить(Часть);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция КомандаCurlЗапросаКонсоли()
	ЧастиСложнойОпции = Новый Массив;
	ПредопределенныеЗаголовки = Новый Массив;
	ОтобразитьPOST = Ложь;
	
	РазделыКоманды = Новый Структура(
		"Аутентификация, Тело, СохранениеОтветаВФайл, Прокси, Сессия, Сжатие, Заголовки, Схема",
		Новый Массив, Новый Массив, Новый Массив, Новый Массив, Новый Массив, Новый Массив, Новый Массив, Новый Массив
	);
	
	ЗаполнитьАутентификациюCurlКоманды(РазделыКоманды.Аутентификация);
	ЗаполнитьТелоЗапросаCurlКоманды(РазделыКоманды.Тело, ОтобразитьPOST, ПредопределенныеЗаголовки);
	ЗаполнитьФайлОтветаCurlКоманды(РазделыКоманды.СохранениеОтветаВФайл);
	ЗаполнитьПроксиCurlКоманды(РазделыКоманды.Прокси);
	ЗаполнитьСессиюCurlКоманды(РазделыКоманды.Сессия, ЧастиСложнойОпции);
	ЗаполнитьСжатиеCurlКоманды(РазделыКоманды.Сжатие);
	ЗаполнитьЗаголовкиCurlКоманды(РазделыКоманды.Заголовки, ПредопределенныеЗаголовки);
	ЗаполнитьСхемуЗапросаCurlКоманды(РазделыКоманды.Схема, ЧастиСложнойОпции, ОтобразитьPOST);
	
	ЧастиКоманды = Новый Массив;
	ЧастиКоманды.Добавить("curl");
	
	Если ЧастиСложнойОпции.Количество() > 0 Тогда
		ЧастиСложнойОпции.Вставить(0, "-");
		ЧастиКоманды.Добавить(СтрСоединить(ЧастиСложнойОпции, ""));
	КонецЕсли;
	
	ЗаполнитьЧастиРазделаКомандыCurl(ЧастиКоманды, РазделыКоманды.Схема);
	
	ЧастиКоманды.Добавить(КодированныйURIВURL(ИдентификаторРесурса));
	
	ЗаполнитьЧастиРазделаКомандыCurl(ЧастиКоманды, РазделыКоманды.Аутентификация);
	ЗаполнитьЧастиРазделаКомандыCurl(ЧастиКоманды, РазделыКоманды.Заголовки);
	ЗаполнитьЧастиРазделаКомандыCurl(ЧастиКоманды, РазделыКоманды.Тело);
	ЗаполнитьЧастиРазделаКомандыCurl(ЧастиКоманды, РазделыКоманды.Прокси);
	ЗаполнитьЧастиРазделаКомандыCurl(ЧастиКоманды, РазделыКоманды.СохранениеОтветаВФайл);
	ЗаполнитьЧастиРазделаКомандыCurl(ЧастиКоманды, РазделыКоманды.Сжатие);
	ЗаполнитьЧастиРазделаКомандыCurl(ЧастиКоманды, РазделыКоманды.Сессия);
	
	Возврат СтрСоединить(ЧастиКоманды, " ");
КонецФункции
#КонецОбласти

#Область ИмпортPostman
&НаКлиенте
Процедура ПрочитатьФайлИмпорта(Знач ИмяФайлаИмпорта, Отказ, ОписаниеОшибки)
	ФайлИмпорта = Новый Файл(ИмяФайлаИмпорта);
	Если НЕ ФайлИмпорта.Существует() Тогда
		Отказ = Истина;
		ОписаниеОшибки = "отсутствует файл " + ИмяФайлаИмпорта;
		Возврат;
	КонецЕсли;
	
	ОбъектИмпорта = ОбъектФайлаИмпорта(ФайлИмпорта, Отказ, ОписаниеОшибки);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВалидацияОбъектаИмпорта(ОбъектИмпорта, Отказ, ОписаниеОшибки);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ИмпортироватьДанныеPostman(ОбъектИмпорта);
КонецПроцедуры

&НаКлиенте
Функция ТекстФайлаИмпорта(Знач ФайлИмпорта, Отказ, ОписаниеОшибки)
	Чтение = Новый ТекстовыйДокумент;
	Чтение.Прочитать(ФайлИмпорта.ПолноеИмя, "UTF-8");
	
	Возврат Чтение.ПолучитьТекст();
КонецФункции

&НаКлиенте
Функция ОбъектФайлаИмпорта(Знач ФайлИмпорта, Отказ, ОписаниеОшибки)
	Перем фРезультат;
	
	ТекстJSON = ТекстФайлаИмпорта(ФайлИмпорта, Отказ, ОписаниеОшибки);
	Если Отказ Тогда
		Возврат фРезультат;
	КонецЕсли;
	
	Чтение = Новый ЧтениеJSON;
	Чтение.УстановитьСтроку(ТекстJSON);
	
	Попытка
		фРезультат = ПрочитатьJSON(Чтение, Истина);
		Чтение.Закрыть();
	Исключение
		Отказ = Истина;
		ОписаниеОшибки = ОписаниеОшибки();
	КонецПопытки;
	
	Возврат фРезультат;
КонецФункции

&НаКлиенте
Процедура ВалидацияОбъектаИмпорта(Знач ОбъектИмпорта, Отказ, ОписаниеОшибки)
	ТипМассив = Тип("Массив");
	ТипСоответствие = Тип("Соответствие");
	ТипСтрока = Тип("Строка");
	
	Если ТипЗнч(ОбъектИмпорта) <> ТипСоответствие Тогда
		Отказ = Истина;
		ОписаниеОшибки = СтрШаблон("неожиданный тип объекта импорта (%1)", ТипЗнч(ОбъектИмпорта));
		Возврат;
	КонецЕсли;
	
	ОписаниеОбъектаИмпорта = ОбъектИмпорта["info"];
	Если ОписаниеОбъектаИмпорта = Неопределено Тогда
		Отказ = Истина;
		ОписаниеОшибки = "у объекта импорта отсутствует поле ""info""";
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ОписаниеОбъектаИмпорта) <> ТипСоответствие Тогда
		Отказ = Истина;
		ОписаниеОшибки = СтрШаблон("неожиданный тип поля ""info"" объекта импорта (%1)", ТипЗнч(ОписаниеОбъектаИмпорта));
		Возврат;
	КонецЕсли;
	
	Если ОписаниеОбъектаИмпорта["schema"] <> "https://schema.getpostman.com/json/collection/v2.1.0/collection.json" Тогда
		Отказ = Истина;
		ОписаниеОшибки = "неожиданная версия схемы объекта импорта (ожидается 2.1.0)";
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИмпортироватьДанныеPostman(Знач ОбъектИмпорта)
	ЗапросыИмпорта = Новый Массив;
	
	Для Каждого ЭлементИмпорта Из ОбъектИмпорта["item"] Цикл
		СобратьЭлементыИмпортаPostman(ЭлементИмпорта, ЗапросыИмпорта);
	КонецЦикла;
	
	Оповещение = Новый ОписаниеОповещения(
		"ВыборЭлементаИмпортаPostmanЗавершение",
		ЭтотОбъект,
		Новый Структура("ЗапросыИмпорта, ПеременныеИмпорта", ЗапросыИмпорта, ОбъектИмпорта["variable"])
	);
	
	ОткрытьФорму(
		"Обработка.КонсольКлиентаHTTP.Форма.ЭлементыИмпортаPostman",
		Новый Структура("ЭлементыИмпорта", ЗапросыИмпорта),
		ЭтотОбъект, , , ,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
КонецПроцедуры

&НаКлиенте
Процедура СобратьЭлементыИмпортаPostman(Знач ОбъектИмпорта, ЗапросыИмпорта)
	Если ОбъектИмпорта["item"] <> Неопределено Тогда
		Для Каждого ЭлементИмпорта Из ОбъектИмпорта["item"] Цикл
			СобратьЭлементыИмпортаPostman(ЭлементИмпорта, ЗапросыИмпорта);
		КонецЦикла;
	ИначеЕсли ОбъектИмпорта["request"] <> Неопределено Тогда
		ЗапросыИмпорта.Добавить(ОбъектИмпорта);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция СхемаИмпортаPostman(Знач Запрос, Отказ, ОписаниеОшибки)
	фРезультат = Элементы.Схема.СписокВыбора.НайтиПоЗначению(Запрос["method"]);
	Если фРезультат = Неопределено Тогда
		Отказ = Истина;
		ОписаниеОшибки = СтрШаблон("неожиданный тип запроса ""%1""", Запрос["method"]);
	КонецЕсли;
	
	Возврат фРезультат;
КонецФункции

&НаКлиенте
Функция ИдентификаторРесурсаИмпортаPostman(Знач Запрос, Знач ЗначенияШаблонов)
	ИдентификаторРесурсаИмпорт = ?(
		Запрос["url"] = Неопределено,
		"",
		ЗначениеПеременнойИмпортаPostman(Запрос["url"]["raw"], ЗначенияШаблонов)
	);
	
	Возврат ?(ПустаяСтрока(ИдентификаторРесурсаИмпорт), "http://", ИдентификаторРесурсаИмпорт);
КонецФункции

&НаКлиенте
Функция АутентификацияИмпортаPostman(Знач Запрос, Знач ЗначенияШаблонов)
	Перем НайденныйТипАутентификации;
	
	ТипАутентификацииСписокВыбора = Элементы.ТипАутентификации.СписокВыбора;
	
	фРезультат = Новый Структура(
		"Тип, Пользователь, Пароль, Токен, РегионAWS, СервисAWS, ДополнениеHawk, ИдентификаторПриложенияHawk, ДелегированиеHawk",
		ТипАутентификацииСписокВыбора[0], "", "", "", "", "", "", "", ""
	);
	
	ОбъектАутентификации = Запрос["auth"];
	Если ОбъектАутентификации = Неопределено Тогда
		Возврат фРезультат;
	КонецЕсли;
	
	ТипАутентификацииИмпорт = ВРег(ОбъектАутентификации["type"]);
	Для Каждого ЭлементТиповАутентификации Из ТипАутентификацииСписокВыбора Цикл
		Если ВРег(ЭлементТиповАутентификации.Значение) = ТипАутентификацииИмпорт Тогда
			НайденныйТипАутентификации = ЭлементТиповАутентификации;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если НайденныйТипАутентификации = Неопределено И ТипАутентификацииИмпорт = "AWSV4" Тогда
		НайденныйТипАутентификации = ТипАутентификацииСписокВыбора[5]; // AWS4-HMAC-SHA256
	КонецЕсли;
	
	Если НайденныйТипАутентификации = Неопределено Тогда
		Возврат фРезультат;
	КонецЕсли;
	
	фРезультат.Тип = НайденныйТипАутентификации;
	
	Имена = СтрРазделить("Пароль,Пользователь,Токен,Пользователь,Пароль,РегионAWS,СервисAWS,Пользователь,Пароль,ДополнениеHawk,ИдентификаторПриложенияHawk,ДелегированиеHawk", ",");
	ИменаИмпорт = СтрРазделить("password,username,token,accesskey,secretkey,region,service,authid,authkey,extradata,app,delegation", ",");
	ПараметрыАутентификации = Новый Соответствие;
	Для я = 0 По Имена.ВГраница() Цикл
		ПараметрыАутентификации.Вставить(ИменаИмпорт[я], Имена[я]);
	КонецЦикла;
	
	ПараметрыАутентификацииИмпорт = ОбъектАутентификации[ОбъектАутентификации["type"]];
	Для Каждого ПараметрАутентификацииИмпорт Из ПараметрыАутентификацииИмпорт Цикл
		ИмяПараметраАутентификации = ПараметрыАутентификации.Получить(НРег(ПараметрАутентификацииИмпорт["key"]));
		Если ИмяПараметраАутентификации <> Неопределено Тогда
			фРезультат[ИмяПараметраАутентификации] = ЗначениеПеременнойИмпортаPostman(ПараметрАутентификацииИмпорт["value"], ЗначенияШаблонов);
		КонецЕсли;
	КонецЦикла;
	
	Возврат фРезультат;
КонецФункции

&НаКлиенте
Функция ЗаголовкиИмпортаPostman(Знач Запрос, Знач ЗначенияШаблонов)
	фРезультат = Новый Массив;
	
	Для Каждого ЭлементЗаголовок Из Запрос["header"] Цикл
		фРезультат.Добавить(Новый Структура(
			"Активно, Ключ, Значение",
			Истина,
			ЗначениеПеременнойИмпортаPostman(ЭлементЗаголовок["key"],   ЗначенияШаблонов),
			ЗначениеПеременнойИмпортаPostman(ЭлементЗаголовок["value"], ЗначенияШаблонов)
		));
	КонецЦикла;
	
	Возврат фРезультат;
КонецФункции

&НаКлиенте
Функция ТелоЗапросаИмпортаPostman(Знач Запрос, Знач ЗначенияШаблонов)
	фРезультат = Новый Структура("Тип, Значение", Элементы.ТипТелаЗапроса.СписокВыбора[0]);
	
	ОбъектТелаЗапроса = Запрос["body"];
	Если ОбъектТелаЗапроса = Неопределено Тогда
		Возврат фРезультат;
	КонецЕсли;
	
	ТипОбъектаТелаЗапроса = ОбъектТелаЗапроса["mode"];
	Если ТипОбъектаТелаЗапроса = "formdata" Тогда
		фРезультат.Тип = Элементы.ТипТелаЗапроса.СписокВыбора[1];
		ЗначениеТелаЗапросаИмпорта = Новый Массив;
		
		Для Каждого ЭлементТелаЗапроса Из ОбъектТелаЗапроса[ТипОбъектаТелаЗапроса] Цикл
			ЭлементТелаЗапросаИмпорта = Новый Структура(
				"Активно, Ключ, Тип, Значение",
				Истина, // Активно
				ЗначениеПеременнойИмпортаPostman(ЭлементТелаЗапроса["key"], ЗначенияШаблонов) // Ключ
			);
			Если ЭлементТелаЗапроса["type"] = "file" Тогда
				ЭлементТелаЗапросаИмпорта.Тип = Элементы.ДанныеФормыТип.СписокВыбора[1];
				ЭлементТелаЗапросаИмпорта.Значение = ОбработанныйПутьКФайлу(ЗначениеПеременнойИмпортаPostman(ЭлементТелаЗапроса["src"], ЗначенияШаблонов));
			Иначе // text
				ЭлементТелаЗапросаИмпорта.Тип = Элементы.ДанныеФормыТип.СписокВыбора[0];
				ЭлементТелаЗапросаИмпорта.Значение = ЗначениеПеременнойИмпортаPostman(ЭлементТелаЗапроса["value"], ЗначенияШаблонов);
			КонецЕсли;
			
			ЗначениеТелаЗапросаИмпорта.Добавить(ЭлементТелаЗапросаИмпорта);
		КонецЦикла;
		
		фРезультат.Значение = ЗначениеТелаЗапросаИмпорта;
	ИначеЕсли ТипОбъектаТелаЗапроса = "urlencoded" Тогда
		фРезультат.Тип = Элементы.ТипТелаЗапроса.СписокВыбора[2];
		ЗначениеТелаЗапросаИмпорта = Новый Массив;
		
		Для Каждого ЭлементТелаЗапроса Из ОбъектТелаЗапроса[ТипОбъектаТелаЗапроса] Цикл
			ЭлементТелаЗапросаИмпорта = Новый Структура(
				"Активно, Ключ, Значение",
				Истина, // Активно
				ЗначениеПеременнойИмпортаPostman(ЭлементТелаЗапроса["key"], ЗначенияШаблонов), // Ключ
				ЗначениеПеременнойИмпортаPostman(ЭлементТелаЗапроса["value"], ЗначенияШаблонов) // Значение
			);
			
			ЗначениеТелаЗапросаИмпорта.Добавить(ЭлементТелаЗапросаИмпорта);
		КонецЦикла;
		
		фРезультат.Значение = ЗначениеТелаЗапросаИмпорта;
	ИначеЕсли ТипОбъектаТелаЗапроса = "raw" Тогда
		фРезультат.Тип = Элементы.ТипТелаЗапроса.СписокВыбора[3];
		фРезультат.Значение = ЗначениеПеременнойИмпортаPostman(ОбъектТелаЗапроса[ТипОбъектаТелаЗапроса], ЗначенияШаблонов);
	ИначеЕсли ТипОбъектаТелаЗапроса = "file" Тогда
		фРезультат.Тип = Элементы.ТипТелаЗапроса.СписокВыбора[4];
		фРезультат.Значение = ОбработанныйПутьКФайлу(ЗначениеПеременнойИмпортаPostman(ОбъектТелаЗапроса[ТипОбъектаТелаЗапроса]["src"], ЗначенияШаблонов));
	КонецЕсли;
	
	Возврат фРезультат;
КонецФункции

&НаКлиенте
Процедура ИмпортироватьВыбранныйЭлементИмпортаPostman(Знач ОбъектИмпорта, Знач ПеременныеИмпорта, Отказ, ОписаниеОшибки)
	ЗначенияШаблонов = Новый Соответствие;
	Если ПеременныеИмпорта <> Неопределено Тогда
		Для Каждого ПеременнаяИмпорта Из ПеременныеИмпорта Цикл
			ЗначенияШаблонов.Вставить(ПеременнаяИмпорта["key"], ПеременнаяИмпорта["value"]);
		КонецЦикла;
	КонецЕсли;
	
	Запрос = ОбъектИмпорта["request"];
	
	СхемаИмпорт = СхемаИмпортаPostman(Запрос, Отказ, ОписаниеОшибки);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	АутентификацияИмпорт = АутентификацияИмпортаPostman(Запрос, ЗначенияШаблонов);
	ТелоЗапросаИмпорт = ТелоЗапросаИмпортаPostman(Запрос, ЗначенияШаблонов);
	
	Схема = СхемаИмпорт;
	ИдентификаторРесурса = ИдентификаторРесурсаИмпортаPostman(Запрос, ЗначенияШаблонов);
	
	ТипАутентификации = АутентификацияИмпорт.Тип.Значение;
	Если ТипАутентификации <> Элементы.ТипАутентификации.СписокВыбора[0].Значение Тогда
		СписокТиповАутентификации = Элементы.ТипАутентификации.СписокВыбора;
		Если ТипАутентификации = СписокТиповАутентификации[1].Значение // Basic
			ИЛИ ТипАутентификации = СписокТиповАутентификации[2].Значение // NTLM
			ИЛИ ТипАутентификации = СписокТиповАутентификации[3].Значение // Digest
		Тогда
			ПользовательАутентификации = АутентификацияИмпорт.Пользователь;
			ПарольАутентификации = АутентификацияИмпорт.Пароль;
		ИначеЕсли ТипАутентификации = СписокТиповАутентификации[4].Значение Тогда // Bearer
			ТокенАутентификации = АутентификацияИмпорт.Токен;
		ИначеЕсли ТипАутентификации = СписокТиповАутентификации[5].Значение Тогда // AWS4-HMAC-SHA256
			AWSКлючДоступа = АутентификацияИмпорт.Пользователь;
			AWSСекретныйКлюч = АутентификацияИмпорт.Пароль;
			AWSРегион = АутентификацияИмпорт.РегионAWS;
			AWSСервис = АутентификацияИмпорт.СервисAWS;
		ИначеЕсли ТипАутентификации = СписокТиповАутентификации[6].Значение Тогда // Hawk
			HawkИдентификатор = АутентификацияИмпорт.Пользователь;
			HawkКлюч = АутентификацияИмпорт.Пароль;
			HawkДополнение = АутентификацияИмпорт.ДополнениеHawk;
			HawkИдентификаторПриложения = АутентификацияИмпорт.ИдентификаторПриложенияHawk;
			HawkДелегирование = АутентификацияИмпорт.ДелегированиеHawk;
		КонецЕсли;
	КонецЕсли;
	
	ЗаголовкиЗапроса.Очистить();
	Для Каждого ЗаголовокИмпорт Из ЗаголовкиИмпортаPostman(Запрос, ЗначенияШаблонов) Цикл
		ЗаполнитьЗначенияСвойств(ЗаголовкиЗапроса.Добавить(), ЗаголовокИмпорт);
	КонецЦикла;
	
	ТипТелаЗапроса = ТелоЗапросаИмпорт.Тип.Значение;
	Если ТелоЗапросаИмпорт.Тип = Элементы.ТипТелаЗапроса.СписокВыбора[1] Тогда // form
		ТелоЗапросаДанныеФормы.Очистить();
		Для Каждого ЭлементТелаЗапросаИмпорт Из ТелоЗапросаИмпорт.Значение Цикл
			ЗаполнитьЗначенияСвойств(ТелоЗапросаДанныеФормы.Добавить(), ЭлементТелаЗапросаИмпорт);
		КонецЦикла;
	ИначеЕсли ТелоЗапросаИмпорт.Тип = Элементы.ТипТелаЗапроса.СписокВыбора[2] Тогда // x-www-form-urlencoded
		ТелоЗапросаДанныеHTMLФормы.Очистить();
		Для Каждого ЭлементТелаЗапросаИмпорт Из ТелоЗапросаИмпорт.Значение Цикл
			ЗаполнитьЗначенияСвойств(ТелоЗапросаДанныеHTMLФормы.Добавить(), ЭлементТелаЗапросаИмпорт);
		КонецЦикла;
	ИначеЕсли ТелоЗапросаИмпорт.Тип = Элементы.ТипТелаЗапроса.СписокВыбора[3] Тогда // raw
		ТелоЗапросаТекст = ТелоЗапросаИмпорт.Значение;
	ИначеЕсли ТелоЗапросаИмпорт.Тип = Элементы.ТипТелаЗапроса.СписокВыбора[4] Тогда // file
		ТелоЗапросаФайл = ТелоЗапросаИмпорт.Значение;
	КонецЕсли;
	
	ИдентификаторРесурсаПриИзменении(Неопределено);
	ТипАутентификацииПриИзменении(Неопределено);
	ТипТелаЗапросаПриИзменении(Неопределено);
	
	РазделыКонсоли = Элементы.РазделыКонсоли.СписокВыбора[0];
	
	РазделыКонсолиПриИзменении(Неопределено);
КонецПроцедуры

&НаКлиенте
Функция ЗначениеПеременнойИмпортаPostman(Знач ОбрабатываемаяСтрока, Знач ЗначенияШаблонов)
	фРезультат = ОбрабатываемаяСтрока;
	
	ПозицияНачалаШаблона = СтрНайти(фРезультат, "{{");
	Пока ПозицияНачалаШаблона > 0 Цикл
		ПозицияОкончанияШаблона = СтрНайти(фРезультат, "}}", , ПозицияНачалаШаблона);
		Если ПозицияОкончанияШаблона = 0 Тогда
			Прервать;
		КонецЕсли;
		
		ИмяШаблона = Сред(фРезультат, ПозицияНачалаШаблона + 2, ПозицияОкончанияШаблона - ПозицияНачалаШаблона - 2);
		ЗначениеШаблона = ЗначенияШаблонов.Получить(ИмяШаблона);
		Если ЗначениеЗаполнено(ЗначениеШаблона) Тогда
			фРезультат = СтрЗаменить(фРезультат, "{{" + ИмяШаблона + "}}", ЗначениеШаблона);
		КонецЕсли;
		
		ПозицияНачалаШаблона = СтрНайти(фРезультат, "{{", , ПозицияНачалаШаблона + 1);
	КонецЦикла;
	
	Возврат фРезультат;
КонецФункции
#КонецОбласти

#Область ИмпортКомандыCurl
&НаКлиенте
Функция ОпцииКомандыCurl()
	фРезультат = Новый Соответствие;
	фРезультат.Вставить("-X", Истина);
	фРезультат.Вставить("--request", Истина);
	фРезультат.Вставить("-d", Истина);
	фРезультат.Вставить("--data", Истина);
	фРезультат.Вставить("--data-ascii", Истина);
	фРезультат.Вставить("--data-binary", Истина);
	фРезультат.Вставить("--data-raw", Истина);
	фРезультат.Вставить("--data-urlencode", Истина);
	фРезультат.Вставить("-F", Истина);
	фРезультат.Вставить("--form", Истина);
	фРезультат.Вставить("--form-string", Истина);
	фРезультат.Вставить("-G", Ложь);
	фРезультат.Вставить("--get", Ложь);
	фРезультат.Вставить("-o", Истина);
	фРезультат.Вставить("--output", Истина);
	фРезультат.Вставить("-O", Ложь);
	фРезультат.Вставить("--remote-name", Ложь);
	фРезультат.Вставить("-I", Ложь);
	фРезультат.Вставить("--head", Ложь);
	фРезультат.Вставить("-H", Истина);
	фРезультат.Вставить("--header", Истина);
	фРезультат.Вставить("-u", Истина);
	фРезультат.Вставить("--user", Истина);
	фРезультат.Вставить("--basic", Ложь);
	фРезультат.Вставить("--digest", Ложь);
	фРезультат.Вставить("--ntlm", Ложь);
	фРезультат.Вставить("--ntlm-wb", Ложь);
	фРезультат.Вставить("--oauth2-bearer", Истина);
	фРезультат.Вставить("--aws-sigv4", Истина);
	фРезультат.Вставить("--compressed", Ложь);
	фРезультат.Вставить("--compressed-ssh", Ложь);
	фРезультат.Вставить("--tr-encoding", Ложь);
	фРезультат.Вставить("-L", Ложь);
	фРезультат.Вставить("--location", Ложь);
	фРезультат.Вставить("--location-trusted", Ложь);
	фРезультат.Вставить("--max-redirs", Истина);
	фРезультат.Вставить("-:", Ложь);
	фРезультат.Вставить("--next", Ложь);
	фРезультат.Вставить("--path-as-is", Ложь);
	фРезультат.Вставить("-k", Ложь);
	фРезультат.Вставить("--insecure", Ложь);
	фРезультат.Вставить("-x", Истина);
	фРезультат.Вставить("--proxy", Истина);
	фРезультат.Вставить("--proxy-basic", Ложь);
	
	Возврат фРезультат;
КонецФункции

&НаКлиенте
Функция НоваяОпцияCurl(Знач Имя, Знач Значение = Неопределено)
	Возврат Новый Структура("Имя, Значение", Имя, Значение);
КонецФункции

&НаКлиенте
Функция ТекстБезКавычек(Знач Текст, Знач ОткрывающийСимвол)
	Если ОткрывающийСимвол = "" Тогда
		Возврат Текст;
	КонецЕсли;
	
	Если СтрНачинаетсяС(Текст, ОткрывающийСимвол) Тогда
		Текст = Сред(Текст, 2);
	КонецЕсли;
	Если СтрЗаканчиваетсяНа(Текст, ОткрывающийСимвол) Тогда
		Текст = Лев(Текст, СтрДлина(Текст) - 1);
	КонецЕсли;
	
	Возврат Текст;
КонецФункции

&НаКлиенте
Процедура РазделитьСложнуюОпциюCurl(Токен, ЧастиКоманды, ДопустимыеОпции, Отказ, ОписаниеОшибки)
	Для я = 3 По СтрДлина(Токен) Цикл
		ЧастьОпции = "-" + Сред(Токен, я, 1);
		Проверка = ДопустимыеОпции.Получить(ЧастьОпции);
		Если Проверка = Неопределено ИЛИ Проверка = Истина Тогда
			Отказ = Истина;
			ОписаниеОшибки = "неожиданный флаг " + Токен;
			Возврат;
		КонецЕсли;
		
		ЧастиКоманды.Добавить(ЧастьОпции);
	КонецЦикла;
	
	Токен = Лев(Токен, 2);
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОпциюКомандыCurl(Опции, ЧастиКоманды, ЧастьКоманды, ДопустимыеОпции, Опция, СобиратьТокен, ЧастиТокена, Отказ, ОписаниеОшибки)
	Если Опция <> Неопределено Тогда
		Если СобиратьТокен И ЧастиТокена.Количество() = 0 Тогда
			Отказ = Истина;
			ОписаниеОшибки = "отсутствует значение для флага " + Опция.Имя;
			Возврат;
		КонецЕсли;
		
		Опции.Добавить(Опция);
	КонецЕсли;
	
	Токен = ЧастьКоманды;
	Если СтрНачинаетсяС(Токен, "--") Тогда
		Токен = НРег(Токен);
	ИначеЕсли СтрДлина(Токен) > 2 Тогда
		РазделитьСложнуюОпциюCurl(Токен, ЧастиКоманды, ДопустимыеОпции, Отказ, ОписаниеОшибки);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СобиратьТокен = ДопустимыеОпции.Получить(Токен);
	Если СобиратьТокен = Неопределено Тогда
		Отказ = Истина;
		ОписаниеОшибки = "неожиданный флаг " + Токен;
		Возврат;
	КонецЕсли;
	
	Если СобиратьТокен Тогда
		Опция = НоваяОпцияCurl(Токен);
	Иначе
		Опции.Добавить(НоваяОпцияCurl(Токен));
		Опция = Неопределено;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЧастьКомандыCurl(ЧастиКоманды, ЧастьКоманды, Опция, СобиратьТокен, ЧастиТокена, ОткрывающийСимвол, Отказ, ОписаниеОшибки)
	Если ОткрывающийСимвол = "" Тогда
		ОткрывающийСимвол = ?(
			СтрНачинаетсяС(ЧастьКоманды, """") ИЛИ СтрНачинаетсяС(ЧастьКоманды, "'"),
			Лев(ЧастьКоманды, 1),
			""
		);
	КонецЕсли;
	
	ЧастиТокена.Добавить(ЧастьКоманды);
	
	Если ОткрывающийСимвол = "" ИЛИ СтрЗаканчиваетсяНа(ЧастьКоманды, ОткрывающийСимвол) Тогда
		Если Опция = Неопределено Тогда
			Если ЧастиКоманды.ИдентификаторРесурса <> "" Тогда
				Отказ = Истина;
				ОписаниеОшибки = "команда с множественными запросами не допускается";
				Возврат;
			КонецЕсли;
			
			ЧастиКоманды.ИдентификаторРесурса = ТекстБезКавычек(СтрСоединить(ЧастиТокена), ОткрывающийСимвол);
		Иначе
			Опция.Значение = ТекстБезКавычек(СтрСоединить(ЧастиТокена), ОткрывающийСимвол);
			ЧастиКоманды.Опции.Добавить(Опция);
			Опция = Неопределено;
		КонецЕсли;
		
		ЧастиТокена = Новый Массив;
		СобиратьТокен = Ложь;
		ОткрывающийСимвол = "";
	Иначе
		ЧастиТокена.Добавить(" ");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ЧастиКомандыCurl(Знач СтрокаКоманды, Отказ, ОписаниеОшибки)
	фРезультат = Новый Структура("ИдентификаторРесурса, Опции", "", Новый Массив);
	
	ОткрывающийСимвол = "";
	СобиратьТокен = Ложь;
	ЧастиТокена = Новый Массив;
	Опция = Неопределено;
	ДопустимыеОпции = ОпцииКомандыCurl();
	
	ЧастиКоманды = СтрРазделить(СокрЛ(Сред(СтрокаКоманды, 6)), " ", Истина);
	Для Каждого ЧастьКоманды Из ЧастиКоманды Цикл
		Если СтрДлина(ЧастьКоманды) = 0 Тогда // это пробел
			Если СобиратьТокен Тогда
				ЧастиТокена.Добавить(" ");
			КонецЕсли;
			
			Продолжить;
		КонецЕсли;
		
		Если СтрНачинаетсяС(ЧастьКоманды, "-") И НЕ СобиратьТокен Тогда
			ОбработатьОпциюКомандыCurl(фРезультат.Опции, ЧастиКоманды, ЧастьКоманды, ДопустимыеОпции, Опция, СобиратьТокен, ЧастиТокена, Отказ, ОписаниеОшибки);
			Если Отказ Тогда
				Возврат фРезультат;
			КонецЕсли;
			
			Продолжить;
		КонецЕсли;
		
		ОбработатьЧастьКомандыCurl(фРезультат, ЧастьКоманды, Опция, СобиратьТокен, ЧастиТокена, ОткрывающийСимвол, Отказ, ОписаниеОшибки);
		Если Отказ Тогда
			Возврат фРезультат;
		КонецЕсли;
	КонецЦикла;
	
	Возврат фРезультат;
КонецФункции

&НаКлиенте
Функция НовыйОбъектДанныхCurl()
	Возврат Новый Структура(
		"Схема, ТолькоЗаголовки, Заголовки, ПоляФормы, ПоляHTMLФормы, ПоляКакПараметры, Аутентификация, ИспользоватьРедиректы, КоличествоРедиректов, ПоддержкаСжатогоОтвета, ИмяФайлаТелаОтвета, НормализоватьИдентификаторРесурса, Прокси, BasicАутентификацияПрокси",
		Неопределено,
		Ложь,
		Новый Массив,
		Новый Массив,
		Новый Массив,
		Ложь,
		Новый Структура("Тип, Пользователь, Пароль, Токен, РегионAWS, СервисAWS", Элементы.ТипАутентификации.СписокВыбора[0], "", "", "", "", ""),
		Ложь,
		Неопределено,
		Ложь,
		Неопределено,
		Истина,
		Неопределено,
		Ложь
	);
КонецФункции

&НаКлиенте
Функция ЭлементТелаЗапроса(Знач Ключ, Знач Значение, Знач ТипПоля = Неопределено)
	Возврат Новый Структура(
		"Активно, Ключ, Тип, Значение",
		Истина,  // Активно
		Ключ,    // Ключ
		ТипПоля, // Тип
		Значение // Значение
	);
КонецФункции

&НаКлиенте
Процедура ОбработатьСхемуCurl(ДанныеИмпорта, Знач Опция, Отказ, ОписаниеОшибки)
	НайденнаяСхема = Элементы.Схема.СписокВыбора.НайтиПоЗначению(Опция.Значение);
	Если НайденнаяСхема = Неопределено Тогда
		Отказ = Истина;
		ОписаниеОшибки = СтрШаблон("неожиданный тип запроса ""%1""", Опция.Значение);
		Возврат;
	КонецЕсли;
	
	ДанныеИмпорта.Схема = НайденнаяСхема;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПолеHTMLФормыCurl(ДанныеИмпорта, Знач Опция)
	ЗначениеОпции = Опция.Значение;
	Если НЕ ЗначениеЗаполнено(ЗначениеОпции) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Поле Из СтрРазделить(ЗначениеОпции, "&") Цикл
		Если СтрНачинаетсяС(Поле, "@") Тогда
			ТипПоля = 1;
			Ключ = Сред(Поле, 2);
			Значение = Неопределено;
		Иначе
			ТипПоля = 0;
			ЧастиПоля = СтрРазделить(Поле, "=");
			Ключ = ЧастиПоля[0];
			
			ЧастиПоля.Удалить(0);
			
			Значение = ?(ЧастиПоля.Количество() = 0, Неопределено, СтрСоединить(ЧастиПоля, "="));
		КонецЕсли;
		
		ДанныеИмпорта.ПоляHTMLФормы.Добавить(
			ЭлементТелаЗапроса(Ключ, Значение, ТипПоля)
		);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьТекстовоеПолеHTMLФормыCurl(ДанныеИмпорта, Знач Опция)
	ЗначениеОпции = Опция.Значение;
	Если НЕ ЗначениеЗаполнено(ЗначениеОпции) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Поле Из СтрРазделить(ЗначениеОпции, "&") Цикл
		ЧастиПоля = СтрРазделить(Поле, "=");
		Ключ = ЧастиПоля[0];
		
		ЧастиПоля.Удалить(0);
		
		Значение = ?(ЧастиПоля.Количество() = 0, Неопределено, СтрСоединить(ЧастиПоля, "="));
		
		ДанныеИмпорта.ПоляHTMLФормы.Добавить(
			ЭлементТелаЗапроса(Ключ, Значение, 0)
		);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьURLПолеHTMLФормыCurl(ДанныеИмпорта, Знач Опция)
	ЗначениеОпции = Опция.Значение;
	Если НЕ ЗначениеЗаполнено(ЗначениеОпции) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрНачинаетсяС(ЗначениеОпции, "@") Тогда
		Ключ = Сред(ЗначениеОпции, 2);
		Значение = Неопределено;
		ТипПоля = 1;
	ИначеЕсли СтрНачинаетсяС(ЗначениеОпции, "=") Тогда
		Ключ = КодированныйТекстВURL(Сред(ЗначениеОпции, 2));
		Значение = Неопределено;
		ТипПоля = 0;
	Иначе
		ЧастиПоля = СтрРазделить(ЗначениеОпции, "=");
		Ключ = ЧастиПоля[0];
		
		ЧастиПоля.Удалить(0);
		Если ЧастиПоля.Количество() = 0 Тогда
			Значение = Неопределено;
		Иначе
			Значение = СтрСоединить(ЧастиПоля, "=");
			Если СтрНачинаетсяС(Значение, "@") Тогда
				Значение = Сред(Значение, 2);
			КонецЕсли;
			Значение = КодированныйТекстВURL(Значение);
		КонецЕсли;
		ТипПоля = 0;
	КонецЕсли;
	
	ДанныеИмпорта.ПоляHTMLФормы.Добавить(
		ЭлементТелаЗапроса(Ключ, Значение, ТипПоля)
	);
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПолеФормыCurl(ДанныеИмпорта, Знач Опция, Отказ, ОписаниеОшибки)
	ЗначениеОпции = Опция.Значение;
	Если НЕ ЗначениеЗаполнено(ЗначениеОпции) Тогда
		Возврат;
	КонецЕсли;
	
	ЧастиПоля = СтрРазделить(ЗначениеОпции, "=");
	Ключ = ЧастиПоля[0];
	
	ЧастиПоля.Удалить(0);
	Если ЧастиПоля.Количество() = 0 Тогда
		Отказ = Истина;
		ОписаниеОшибки = СтрШаблон("неправильное использование опции ""%1""", Опция.Имя);
		Возврат;
	КонецЕсли;
	
	Значение = СтрСоединить(ЧастиПоля, "=");
	ИндексТипаПоля = ?(СтрНачинаетсяС(Значение, "@"), 1, 0);
	Если ИндексТипаПоля = 1 Тогда
		Значение = Сред(Значение, 2);
	КонецЕсли;
	
	ДанныеИмпорта.ПоляФормы.Добавить(
		ЭлементТелаЗапроса(Ключ, Значение, Элементы.ДанныеФормыТип.СписокВыбора[ИндексТипаПоля])
	);
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьТекстовоеПолеФормыCurl(ДанныеИмпорта, Знач Опция, Отказ, ОписаниеОшибки)
	ЗначениеОпции = Опция.Значение;
	Если НЕ ЗначениеЗаполнено(ЗначениеОпции) Тогда
		Возврат;
	КонецЕсли;
	
	ИндексТипаПоля = 0;
	ЧастиПоля = СтрРазделить(ЗначениеОпции, "=");
	Ключ = ЧастиПоля[0];
	
	ЧастиПоля.Удалить(0);
	Если ЧастиПоля.Количество() = 0 Тогда
		Отказ = Истина;
		ОписаниеОшибки = СтрШаблон("неправильное использование опции ""%1""", Опция.Имя);
		Возврат;
	КонецЕсли;
	
	Значение = СтрСоединить(ЧастиПоля, "=");
	
	ДанныеИмпорта.ПоляФормы.Добавить(
		ЭлементТелаЗапроса(Ключ, Значение, Элементы.ДанныеФормыТип.СписокВыбора[ИндексТипаПоля])
	);
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЗаголовокCurl(ДанныеИмпорта, Знач Опция)
	ЗначениеОпции = Опция.Значение;
	Если НЕ ЗначениеЗаполнено(ЗначениеОпции) Тогда
		Возврат;
	КонецЕсли;
	
	ЧастиПоля = СтрРазделить(ЗначениеОпции, "=");
	Ключ = ЧастиПоля[0];
	
	ЧастиПоля.Удалить(0);
	
	Значение = СтрСоединить(ЧастиПоля, "=");
	
	ДанныеИмпорта.Заголовки.Добавить(
		ЭлементТелаЗапроса(Ключ, Значение)
	);
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДанныеАутентификацииCurl(ДанныеИмпорта, Знач Опция)
	ЗначениеОпции = Опция.Значение;
	Если НЕ ЗначениеЗаполнено(ЗначениеОпции) Тогда
		Возврат;
	КонецЕсли;
	
	ЧастиЗначения = СтрРазделить(ЗначениеОпции, ":");
	Пользователь = ЧастиЗначения[0];
	
	ЧастиЗначения.Удалить(0);
	
	ДанныеИмпорта.Аутентификация.Пользователь = Пользователь;
	ДанныеИмпорта.Аутентификация.Пароль = СтрСоединить(ЧастиЗначения, ":");
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДанныеАутентификацииAWSCurl(ДанныеИмпорта, Знач Опция)
	ЗначениеОпции = Опция.Значение;
	Если НЕ ЗначениеЗаполнено(ЗначениеОпции) Тогда
		Возврат;
	КонецЕсли;
	
	ЧастиЗначения = СтрРазделить(ЗначениеОпции, ":");
	Если ЧастиЗначения.Количество() < 2 ИЛИ ЧастиЗначения[0] <> "aws" ИЛИ ЧастиЗначения[1] <> "amz" Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеИмпорта.Аутентификация.Тип = Элементы.ТипАутентификации.СписокВыбора[5];
	
	Если ЧастиЗначения.Количество() > 2 Тогда
		ДанныеИмпорта.Аутентификация.РегионAWS = ЧастиЗначения[2];
	КонецЕсли;
	Если ЧастиЗначения.Количество() > 3 Тогда
		ДанныеИмпорта.Аутентификация.СервисAWS = ЧастиЗначения[3];
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДанныеПрокси(ДанныеИмпорта, Знач Опция, Отказ, ОписаниеОшибки)
	ЗначениеОпции = Опция.Значение;
	Если НЕ ЗначениеЗаполнено(ЗначениеОпции) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеТипаЧисло = Новый ОписаниеТипов("Число");
	ДанныеИмпорта.Прокси = Новый Структура("Сервер, Порт, Пользователь, Пароль", "", 1080, "", "");
	Прокси = ДанныеИмпорта.Прокси;
	
	ПозицияОкончанияПротокола = СтрНайти(ЗначениеОпции, "://");
	Если ПозицияОкончанияПротокола > 0 Тогда
		ЗначениеОпции = Сред(ЗначениеОпции, ПозицияОкончанияПротокола + 3);
	КонецЕсли;

	ПозицияОкончанияАутентификации = СтрНайти(ЗначениеОпции, "@");
	Если ПозицияОкончанияАутентификации > 0 Тогда
		ПозицияРазделителя = СтрНайти(Лев(ЗначениеОпции, ПозицияОкончанияАутентификации - 1), ":");
		Если ПозицияРазделителя = 0 Тогда
			ПозицияРазделителя = ПозицияОкончанияАутентификации;
		КонецЕсли;
		
		ЗакодированныйПользователь = СокрЛП(Лев(ЗначениеОпции, ПозицияРазделителя - 1));
		ЗакодированныйПароль = Прав(
			Лев(ЗначениеОпции, ПозицияОкончанияАутентификации - 1),
			ПозицияОкончанияАутентификации - ПозицияРазделителя - 1
		);
		МножествоСтрок = Новый Соответствие;
		МножествоСтрок.Вставить(ЗакодированныйПользователь);
		МножествоСтрок.Вставить(ЗакодированныйПароль);
		
		МножествоСтрок = РаскодированныеСтрокиURLвURL(МножествоСтрок);
		Прокси.Пользователь = МножествоСтрок.Получить(ЗакодированныйПользователь);
		Прокси.Пароль = МножествоСтрок.Получить(ЗакодированныйПароль);
	КонецЕсли;

	ПозицияОкончанияАутентификации = ПозицияОкончанияАутентификации + 1;
	ЗначениеОпции = Сред(ЗначениеОпции, ПозицияОкончанияАутентификации);

	ПозицияРазделителя = СтрНайти(ЗначениеОпции, ":");
	Если ПозицияРазделителя = 0 Тогда
		ПозицияРазделителя = СтрДлина(ЗначениеОпции) + 1;
	КонецЕсли;

	Прокси.Сервер = СокрЛП(Лев(ЗначениеОпции, ПозицияРазделителя - 1));
	Если ПустаяСтрока(Прокси.Сервер) Тогда
		Отказ = Истина;
		ОписаниеОшибки = "Не указан прокси-сервер";
		Возврат;
	КонецЕсли;
	
	ПортСтрокой = Прав(ЗначениеОпции, СтрДлина(ЗначениеОпции) - ПозицияРазделителя);
	Если НЕ ПустаяСтрока(ПортСтрокой) Тогда
		Прокси.Порт = ОписаниеТипаЧисло.ПривестиЗначение(ПортСтрокой);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОпциюCurl(ДанныеИмпорта, Знач ИдентификаторРесурсаИмпорт, Знач Опция, Отказ, ОписаниеОшибки)
	ИмяОпции = Опция.Имя;
	Если ИмяОпции = "-X" ИЛИ ИмяОпции = "--request" Тогда
		ОбработатьСхемуCurl(ДанныеИмпорта, Опция, Отказ, ОписаниеОшибки);
	ИначеЕсли ИмяОпции = "-I" ИЛИ ИмяОпции = "--head" Тогда
		ДанныеИмпорта.ТолькоЗаголовки = Истина;
	ИначеЕсли ИмяОпции = "-d" ИЛИ ИмяОпции = "--data" ИЛИ ИмяОпции = "--data-ascii" ИЛИ ИмяОпции = "--data-binary" Тогда
		ОбработатьПолеHTMLФормыCurl(ДанныеИмпорта, Опция);
	ИначеЕсли ИмяОпции = "--data-raw" Тогда
		ОбработатьТекстовоеПолеHTMLФормыCurl(ДанныеИмпорта, Опция);
	ИначеЕсли ИмяОпции = "--data-urlencode" Тогда
		ОбработатьURLПолеHTMLФормыCurl(ДанныеИмпорта, Опция);
	ИначеЕсли ИмяОпции = "-F" ИЛИ ИмяОпции = "--form" Тогда
		ОбработатьПолеФормыCurl(ДанныеИмпорта, Опция, Отказ, ОписаниеОшибки);
	ИначеЕсли ИмяОпции = "--form-string" Тогда
		ОбработатьТекстовоеПолеФормыCurl(ДанныеИмпорта, Опция, Отказ, ОписаниеОшибки);
	ИначеЕсли ИмяОпции = "-H" ИЛИ ИмяОпции = "--header" Тогда
		ОбработатьЗаголовокCurl(ДанныеИмпорта, Опция);
	ИначеЕсли ИмяОпции = "-u" ИЛИ ИмяОпции = "--user" Тогда
		ОбработатьДанныеАутентификацииCurl(ДанныеИмпорта, Опция);
	ИначеЕсли ИмяОпции = "--basic" Тогда
		ДанныеИмпорта.Аутентификация.Тип = Элементы.ТипАутентификации.СписокВыбора[1];
	ИначеЕсли ИмяОпции = "--digest" Тогда
		ДанныеИмпорта.Аутентификация.Тип = Элементы.ТипАутентификации.СписокВыбора[3];
	ИначеЕсли ИмяОпции = "--ntlm" ИЛИ ИмяОпции = "--ntlm-wb" Тогда
		ДанныеИмпорта.Аутентификация.Тип = Элементы.ТипАутентификации.СписокВыбора[2];
	ИначеЕсли ИмяОпции = "--oauth2-bearer" Тогда
		ДанныеИмпорта.Аутентификация.Тип = Элементы.ТипАутентификации.СписокВыбора[4];
		ДанныеИмпорта.Аутентификация.Токен = Опция.Значение;
	ИначеЕсли ИмяОпции = "--aws-sigv4" Тогда
		ОбработатьДанныеАутентификацииAWSCurl(ДанныеИмпорта, Опция);
	ИначеЕсли ИмяОпции = "-L" ИЛИ ИмяОпции = "--location" ИЛИ ИмяОпции = "--location-trusted" Тогда
		ДанныеИмпорта.ИспользоватьРедиректы = Истина;
	ИначеЕсли ИмяОпции = "--max-redirs" Тогда
		ДанныеИмпорта.КоличествоРедиректов = Опция.Значение;
	ИначеЕсли ИмяОпции = "--compressed" ИЛИ ИмяОпции = "--compressed-ssh" ИЛИ ИмяОпции = "--tr-encoding" Тогда
		ДанныеИмпорта.ПоддержкаСжатогоОтвета = Истина;
	ИначеЕсли ИмяОпции = "-o" ИЛИ ИмяОпции = "--output" Тогда
		ДанныеИмпорта.ИмяФайлаТелаОтвета = Опция.Значение;
	ИначеЕсли ИмяОпции = "-O" ИЛИ ИмяОпции = "--remote-name" Тогда
		ОкончаниеИдентификатораРесурса = Сред(ИдентификаторРесурсаИмпорт, СтрНайти(ИдентификаторРесурсаИмпорт, "/", НаправлениеПоиска.СКонца) + 1);
		ДанныеИмпорта.ИмяФайлаТелаОтвета = КаталогВременныхФайлов() + ОкончаниеИдентификатораРесурса;
	ИначеЕсли ИмяОпции = "--path-as-is" Тогда
		ДанныеИмпорта.НормализоватьИдентификаторРесурса = Ложь;
	ИначеЕсли ИмяОпции = "-G" ИЛИ ИмяОпции = "--get" Тогда
		ДанныеИмпорта.ПоляКакПараметры = Истина;
	ИначеЕсли ИмяОпции = "-x" ИЛИ ИмяОпции = "--proxy" Тогда
		ОбработатьДанныеПрокси(ДанныеИмпорта, Опция, Отказ, ОписаниеОшибки);
	ИначеЕсли ИмяОпции = "--proxy-basic" Тогда
		ДанныеИмпорта.BasicАутентификацияПрокси = Истина;
	ИначеЕсли ИмяОпции = "-:" ИЛИ ИмяОпции = "--next" Тогда
		Отказ = Истина;
		ОписаниеОшибки = "команда с множественными запросами не допускается";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция РезультатРазбораКомандыCurl(ЧастиКоманды, Отказ, ОписаниеОшибки)
	фРезультат = НовыйОбъектДанныхCurl();
	
	Для Каждого Опция Из ЧастиКоманды.Опции Цикл
		ОбработатьОпциюCurl(фРезультат, ЧастиКоманды.ИдентификаторРесурса, Опция, Отказ, ОписаниеОшибки);
		Если Отказ Тогда
			Возврат фРезультат;
		КонецЕсли;
	КонецЦикла;
	
	Возврат фРезультат;
КонецФункции

&НаКлиенте
Функция ТелоЗапросаCurl(ДанныеИмпорта, Отказ, ОписаниеОшибки)
	фРезультат = Новый Структура("Тип, Значение", Элементы.ТипТелаЗапроса.СписокВыбора[0]);
	
	Если ДанныеИмпорта.ПоляHTMLФормы.Количество() = 0 И ДанныеИмпорта.ПоляФормы.Количество() = 0 Тогда
		Возврат фРезультат;
	КонецЕсли;
	
	Если ДанныеИмпорта.ПоляHTMLФормы.Количество() > 0 И ДанныеИмпорта.ПоляФормы.Количество() > 0 Тогда
		Отказ = Истина;
		ОписаниеОшибки = "нельзя совмещать опции полей application/x-www-form-urlencoded и multipart/form-data";
		Возврат фРезультат;
	КонецЕсли;
	
	Если ДанныеИмпорта.Схема = Неопределено Тогда
		ДанныеИмпорта.Схема = Элементы.Схема.СписокВыбора[1].Значение; // POST
	КонецЕсли;
	
	Если ДанныеИмпорта.ПоляHTMLФормы.Количество() > 0 Тогда
		ПервоеПолеТелаЗапроса = ДанныеИмпорта.ПоляHTMLФормы[0];
		
		Если ДанныеИмпорта.ПоляHTMLФормы.Количество() = 1 И ПервоеПолеТелаЗапроса.Значение = Неопределено Тогда
			Если ПервоеПолеТелаЗапроса.Тип = 0 Тогда // это текст
				фРезультат.Тип      = Элементы.ТипТелаЗапроса.СписокВыбора[3]; // raw
				фРезультат.Значение = ПервоеПолеТелаЗапроса.Ключ;
			Иначе // это файл
				фРезультат.Тип      = Элементы.ТипТелаЗапроса.СписокВыбора[4]; // file
				фРезультат.Значение = ПервоеПолеТелаЗапроса.Ключ;
			КонецЕсли;
		Иначе
			фРезультат.Тип      = Элементы.ТипТелаЗапроса.СписокВыбора[2]; // x-www-form-urlencoded
			фРезультат.Значение = ДанныеИмпорта.ПоляHTMLФормы;
		КонецЕсли;
	ИначеЕсли ДанныеИмпорта.ПоляФормы.Количество() > 0 Тогда
		фРезультат.Тип      = Элементы.ТипТелаЗапроса.СписокВыбора[1]; // form
		фРезультат.Значение = ДанныеИмпорта.ПоляФормы;
	КонецЕсли;
	
	Возврат фРезультат;
КонецФункции

&НаКлиенте
Функция НормализованныйИдентификаторРесурса(Знач ИдентификаторРесурсаИмпорт, Отказ, ОписаниеОшибки)
	ПозицияПараметров = СтрНайти(ИдентификаторРесурсаИмпорт, "?");
	ПараметрыURI = ?(
		ПозицияПараметров = 0,
		"",
		Сред(ИдентификаторРесурсаИмпорт, ПозицияПараметров)
	);
	
	URL = ?(
		ПозицияПараметров = 0,
		ИдентификаторРесурсаИмпорт,
		Лев(ИдентификаторРесурсаИмпорт, ПозицияПараметров - 1)
	);
	
	Стек = Новый Массив;
	Для Каждого ЧастьURL Из СтрРазделить(URL, "/", Истина) Цикл
		Если ЧастьURL = ".." Тогда
			Если Стек.Количество() = 0 Тогда
				Отказ = Истина;
				ОписаниеОшибки = "не удалось нормализовать идентификатор ресурса";
				Возврат ИдентификаторРесурсаИмпорт;
			КонецЕсли;
			
			Стек.Удалить(Стек.ВГраница());
		Иначе
			Стек.Добавить(ЧастьURL);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтрСоединить(Стек, "/") + ПараметрыURI;
КонецФункции

&НаКлиенте
Функция ИдентификаторРесурсаСПараметрамиИзТела(Знач ИдентификаторРесурсаИмпорт, Знач ПоляФормыHTML)
	ПозицияПараметров = СтрНайти(ИдентификаторРесурсаИмпорт, "?");
	
	ЧастиПараметров = Новый Массив;
	ЧастиПараметра = Новый Массив;
	Для Каждого Поле Из ПоляФормыHTML Цикл
		ЧастиПараметра.Очистить();
		ЧастиПараметра.Добавить(Поле.Ключ);
		
		Если Поле.Значение <> Неопределено Тогда
			ЧастиПараметра.Добавить(Поле.Значение);
		КонецЕсли;
		
		ЧастиПараметров.Добавить(СтрСоединить(ЧастиПараметра, "="));
	КонецЦикла;
	
	Возврат ИдентификаторРесурсаИмпорт + ?(ПозицияПараметров = 0, "?", "&") + СтрСоединить(ЧастиПараметров, "&");
КонецФункции

&НаКлиенте
Процедура ПрочитатьКомандуCurl(Знач СтрокаКоманды, Отказ, ОписаниеОшибки)
	СтрокаКоманды = СокрЛП(СтрЗаменить(СтрокаКоманды, "\" + Символы.ПС, " "));
	Если НЕ СтрНачинаетсяС(НРег(СтрокаКоманды), "curl ") Тогда
		Отказ = Истина;
		ОписаниеОшибки = "команда должна начинаться с имени утилиты curl";
		Возврат;
	КонецЕсли;
	
	ЧастиКоманды = ЧастиКомандыCurl(СтрокаКоманды, Отказ, ОписаниеОшибки);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеИмпорта = РезультатРазбораКомандыCurl(ЧастиКоманды, Отказ, ОписаниеОшибки);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеИмпорта.НормализоватьИдентификаторРесурса Тогда
		ЧастиКоманды.ИдентификаторРесурса = НормализованныйИдентификаторРесурса(ЧастиКоманды.ИдентификаторРесурса, Отказ, ОписаниеОшибки);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ТелоЗапросаИмпорт = ТелоЗапросаCurl(ДанныеИмпорта, Отказ, ОписаниеОшибки);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеИмпорта.ПоляКакПараметры И ТелоЗапросаИмпорт.Тип = Элементы.ТипТелаЗапроса.СписокВыбора[2] Тогда
		ЧастиКоманды.ИдентификаторРесурса = ИдентификаторРесурсаСПараметрамиИзТела(ЧастиКоманды.ИдентификаторРесурса, ТелоЗапросаИмпорт.Значение);
		ДанныеИмпорта.Схема = Элементы.Схема.СписокВыбора[0]; // GET
		ТелоЗапросаИмпорт.Тип = Элементы.ТипТелаЗапроса.СписокВыбора[0]; // none
	КонецЕсли;
	
	Если ДанныеИмпорта.ТолькоЗаголовки Тогда
		ДанныеИмпорта.Схема = Элементы.Схема.СписокВыбора[4]; // HEAD
	КонецЕсли;
	
	Если ДанныеИмпорта.Схема = Неопределено Тогда
		ДанныеИмпорта.Схема = Элементы.Схема.СписокВыбора[0].Значение; // GET
	КонецЕсли;
	
	ИдентификаторРесурса = ЧастиКоманды.ИдентификаторРесурса;
	Схема = ДанныеИмпорта.Схема;
	
	ТипАутентификации = ДанныеИмпорта.Аутентификация.Тип;
	Если ТипАутентификации <> Элементы.ТипАутентификации.СписокВыбора[0].Значение Тогда
		СписокТиповАутентификации = Элементы.ТипАутентификации.СписокВыбора;
		Если ТипАутентификации = СписокТиповАутентификации[1].Значение // Basic
			ИЛИ ТипАутентификации = СписокТиповАутентификации[2].Значение // NTLM
			ИЛИ ТипАутентификации = СписокТиповАутентификации[3].Значение // Digest
		Тогда
			ПользовательАутентификации = ДанныеИмпорта.Аутентификация.Пользователь;
			ПарольАутентификации = ДанныеИмпорта.Аутентификация.Пароль;
		ИначеЕсли ТипАутентификации = СписокТиповАутентификации[4].Значение Тогда // Bearer
			ТокенАутентификации = ДанныеИмпорта.Аутентификация.Токен;
		ИначеЕсли ТипАутентификации = СписокТиповАутентификации[5].Значение Тогда // AWS4-HMAC-SHA256
			AWSКлючДоступа = ДанныеИмпорта.Аутентификация.Пользователь;
			AWSСекретныйКлюч = ДанныеИмпорта.Аутентификация.Пароль;
			AWSРегион = ДанныеИмпорта.Аутентификация.РегионAWS;
			AWSСервис = ДанныеИмпорта.Аутентификация.СервисAWS;
		КонецЕсли;
	КонецЕсли;
	
	ЗаголовкиЗапроса.Очистить();
	Для Каждого ЗаголовокИмпорт Из ДанныеИмпорта.Заголовки Цикл
		ЗаполнитьЗначенияСвойств(ЗаголовкиЗапроса.Добавить(), ЗаголовокИмпорт);
	КонецЦикла;
	
	ТипТелаЗапроса = ТелоЗапросаИмпорт.Тип.Значение;
	Если ТелоЗапросаИмпорт.Тип = Элементы.ТипТелаЗапроса.СписокВыбора[1] Тогда // form
		ТелоЗапросаДанныеФормы.Очистить();
		Для Каждого ЭлементТелаЗапросаИмпорт Из ТелоЗапросаИмпорт.Значение Цикл
			ЗаполнитьЗначенияСвойств(ТелоЗапросаДанныеФормы.Добавить(), ЭлементТелаЗапросаИмпорт);
		КонецЦикла;
	ИначеЕсли ТелоЗапросаИмпорт.Тип = Элементы.ТипТелаЗапроса.СписокВыбора[2] Тогда // x-www-form-urlencoded
		ТелоЗапросаДанныеHTMLФормы.Очистить();
		Для Каждого ЭлементТелаЗапросаИмпорт Из ТелоЗапросаИмпорт.Значение Цикл
			ЗаполнитьЗначенияСвойств(ТелоЗапросаДанныеHTMLФормы.Добавить(), ЭлементТелаЗапросаИмпорт);
		КонецЦикла;
	ИначеЕсли ТелоЗапросаИмпорт.Тип = Элементы.ТипТелаЗапроса.СписокВыбора[3] Тогда // raw
		ТелоЗапросаТекст = ТелоЗапросаИмпорт.Значение;
	ИначеЕсли ТелоЗапросаИмпорт.Тип = Элементы.ТипТелаЗапроса.СписокВыбора[4] Тогда // file
		ТелоЗапросаФайл = ТелоЗапросаИмпорт.Значение;
	КонецЕсли;
	
	ИспользоватьСессию = ДанныеИмпорта.ИспользоватьРедиректы;
	Если ДанныеИмпорта.ИспользоватьРедиректы Тогда
		ПорогПеренаправлений = ?(
			ДанныеИмпорта.КоличествоРедиректов = Неопределено,
			50,
			ДанныеИмпорта.КоличествоРедиректов
		);
	КонецЕсли;
	
	ТелоОтветаВФайл = (ДанныеИмпорта.ИмяФайлаТелаОтвета <> Неопределено);
	Если ТелоОтветаВФайл Тогда
		ИмяФайлаТелаОтвета = ДанныеИмпорта.ИмяФайлаТелаОтвета;
	КонецЕсли;
	
	ПоддержкаСжатогоОтвета = ДанныеИмпорта.ПоддержкаСжатогоОтвета;
	
	ИспользоватьПрокси = (ДанныеИмпорта.Прокси <> Неопределено);
	Если ИспользоватьПрокси Тогда
		СерверПрокси       = ДанныеИмпорта.Прокси.Сервер;
		ПортПрокси         = ДанныеИмпорта.Прокси.Порт;
		ПользовательПрокси = ДанныеИмпорта.Прокси.Пользователь;
		ПарольПрокси       = ДанныеИмпорта.Прокси.Пароль;
		ИспользоватьАутентификациюОСПрокси = НЕ ДанныеИмпорта.BasicАутентификацияПрокси;
		НеИспользоватьПроксиДляЛокальныхАдресов = Ложь;
	КонецЕсли;
	
	ИдентификаторРесурсаПриИзменении(Неопределено);
	ТипАутентификацииПриИзменении(Неопределено);
	ТипТелаЗапросаПриИзменении(Неопределено);
	ИспользоватьПроксиПриИзменении(Неопределено);
	
	РазделыКонсоли = Элементы.РазделыКонсоли.СписокВыбора[0];
	
	РазделыКонсолиПриИзменении(Неопределено);
КонецПроцедуры
#КонецОбласти

&НаКлиенте
Функция ОбработанныйПутьКФайлу(Знач ПутьКФайлу)
	фРезультат = ПутьКФайлу;
	
	Если Лев(фРезультат, 1) <> "/" Тогда
		Возврат фРезультат;
	КонецЕсли;
	
	ПозицияДвоеточия = СтрНайти(фРезультат, ":");
	Если ПозицияДвоеточия = 0 Тогда
		Возврат фРезультат;
	КонецЕсли;
	
	ПозицияВторогоСлеша = СтрНайти(фРезультат, "/", , 2);
	Если ПозицияДвоеточия < ПозицияВторогоСлеша Тогда
		фРезультат = СтрЗаменить(Сред(фРезультат, 2), "/", "\");
	КонецЕсли;
	
	Возврат фРезультат;
КонецФункции

&НаКлиенте
Функция ТипыMIMEКартинок()
	фРезультат = Новый Соответствие;
	фРезультат.Вставить(КлиентHTTPПовтИсп.ТипMIMEJPEG(), Истина);
	фРезультат.Вставить(КлиентHTTPПовтИсп.ТипMIMEJPEG(), Истина);
	фРезультат.Вставить(КлиентHTTPПовтИсп.ТипMIMEPNG(), Истина);
	фРезультат.Вставить(КлиентHTTPПовтИсп.ТипMIMEGIF(), Истина);
	фРезультат.Вставить(КлиентHTTPПовтИсп.ТипыMIME().image.tiff, Истина);
	фРезультат.Вставить(КлиентHTTPПовтИсп.ТипыMIME().image.webp, Истина);
	фРезультат.Вставить(КлиентHTTPПовтИсп.ТипыMIME().image.bmp, Истина);
	
	Возврат фРезультат;
КонецФункции

&НаСервереБезКонтекста
Функция РаскодированныеСтрокиURLвURL(Знач МножествоСтрок)
	Возврат КлиентHTTP.РаскодированныеСтрокиURLвURL(МножествоСтрок);
КонецФункции

&НаСервереБезКонтекста
Функция РаскодированныеСтроки(Знач КоллекцияСтрок)
	Возврат КлиентHTTP.РаскодированныеСтроки(КоллекцияСтрок);
КонецФункции

&НаСервереБезКонтекста
Функция КодированныйТекстВURL(Знач Текст)
	Возврат КодироватьСтроку(Текст, СпособКодированияСтроки.КодировкаURL);
КонецФункции

&НаСервереБезКонтекста
Функция КодированныйURIВURL(Знач URI)
	Кодировано = КодироватьСтроку(URI, СпособКодированияСтроки.URLВКодировкеURL);
	Позиция = СтрНайти(Кодировано, "?");
	Если Позиция = 0 Тогда
		Позиция = СтрДлина(Кодировано) + 1;
	КонецЕсли;                                                                                                                                       
	
	Возврат РаскодироватьСтроку(
		Лев(Кодировано, Позиция-1),
		СпособКодированияСтроки.URLВКодировкеURL
	) + Сред(
		Кодировано,
		Позиция,
		СтрДлина(Кодировано) - Позиция + 1
	);
КонецФункции

&НаСервереБезКонтекста
Функция РазделительПутиСервера()
	Возврат ПолучитьРазделительПутиСервера();
КонецФункции

&НаКлиенте
Процедура ИзменитьКонтекстВыполненияЗапроса()
	Элементы.ИмяФайлаТелаОтвета.КнопкаВыбора = ВыполнятьНаСервере;
	Элементы.ТелоЗапросаФайл.КнопкаВыбора = ВыполнятьНаСервере;
	Элементы.ДанныеФормыЗначение.КнопкаВыбора = ВыполнятьНаСервере;
	Элементы.ДанныеФормыЗначение.КнопкаОткрытия = НЕ ВыполнятьНаСервере;
	ВыполнятьНаСервере = НЕ ВыполнятьНаСервере;
	ЗаголовокКонтекстаВыполнения = ?(
		ВыполнятьНаСервере,
		"на сервере",
		"на клиенте"
	);
	Элементы.ДекорацияКонтекстВыполнения.Заголовок = ЗаголовокКонтекстаВыполнения;
	Элементы.ДекорацияКонтекстВыполненияНастройки.Заголовок = ЗаголовокКонтекстаВыполнения;
КонецПроцедуры

&НаСервереБезКонтекста
Функция Сериализовано1С(Знач Данные)
	Возврат ЗначениеВСтрокуВнутр(Данные);
КонецФункции

&НаСервереБезКонтекста
Функция Десериализовано1С(Знач СтрокаВнутр)
	Возврат ЗначениеИзСтрокиВнутр(СтрокаВнутр);
КонецФункции

&НаКлиенте
Функция ПараметрыОткрытияФормыКомандыCurl(Знач Текст)
	Возврат Новый Структура("Текст, ЗаголовокФормы, ЦветРедактируемогоТекста", Текст, "Команда curl", WebЦвета.Серебряный);
КонецФункции

#Область ОБРАТНЫЕ_ВЫЗОВЫ
&НаКлиенте
Процедура КонструкторURIЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторРесурса = Результат;
	
	РассчитатьПараметрыИдентификатораРесурса();
КонецПроцедуры

&НаКлиенте
Процедура РедакторТекстовогоПоляЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат <> Неопределено Тогда
		ДополнительныеПараметры = Результат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РедакторПараметраЗапросаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ПараметрыЗапроса.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДвойнойПеренос = Символы.ПС + Символы.ПС;
	Пока СтрНайти(Результат, ДвойнойПеренос) > 0 Цикл
		Результат = СтрЗаменить(Результат, ДвойнойПеренос, Символы.ПС);
	КонецЦикла;
	
	ТекущиеДанные[ДополнительныеПараметры] = СтрЗаменить(Результат, Символы.ПС, " ");
	
	РассчитатьПараметрыИдентификатораРесурса();
КонецПроцедуры

&НаКлиенте
Процедура РедакторИмениЗаголовкаЗапросаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ЗаголовкиЗапроса.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.Ключ = ИсправленноеИмяЗаголовкаЗапроса(Результат);
КонецПроцедуры

&НаКлиенте
Процедура РедакторЗначенияЗаголовкаЗапросаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ЗаголовкиЗапроса.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДвойнойПеренос = Символы.ПС + Символы.ПС;
	Пока СтрНайти(Результат, ДвойнойПеренос) > 0 Цикл
		Результат = СтрЗаменить(Результат, ДвойнойПеренос, Символы.ПС);
	КонецЦикла;
	
	ТекущиеДанные.Значение = СтрЗаменить(Результат, Символы.ПС, " ");
КонецПроцедуры

&НаКлиенте
Процедура РедакторПоляТелаЗапросаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = ДополнительныеПараметры.ТаблицаФормы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат <> Неопределено Тогда
		ТекущиеДанные[ДополнительныеПараметры.ИмяПоля] = Результат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаИмпортаPostmanЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	ОписаниеОшибки = "";
	
	ПрочитатьФайлИмпорта(ВыбранныеФайлы[0], Отказ, ОписаниеОшибки);
	Если Отказ Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не удалось прочитать файл импорта по причине: " + ОписаниеОшибки;
		Сообщение.Сообщить();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыборЭлементаИмпортаPostmanЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	ОписаниеОшибки = "";
	
	ИмпортироватьВыбранныйЭлементИмпортаPostman(ДополнительныеПараметры.ЗапросыИмпорта[Результат], ДополнительныеПараметры.ПеременныеИмпорта, Отказ, ОписаниеОшибки);
	Если Отказ Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон("Не удалось импортировать запрос %1 по причине: %2", ДополнительныеПараметры[Результат]["name"], ОписаниеОшибки);
		Сообщение.Сообщить();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РедакторКомандыCurlЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	ОписаниеОшибки = "";
	
	ПрочитатьКомандуCurl(Результат, Отказ, ОписаниеОшибки);
	Если Отказ Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не удалось прочитать команду curl по причине: " + ОписаниеОшибки;
		Сообщение.Сообщить();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаТелаЗапросаЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	Если ВыбранныеФайлы <> Неопределено Тогда
		ТелоЗапросаФайл = ВыбранныеФайлы[0];
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаСохраненияТелаОтветаЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	Если ВыбранныеФайлы <> Неопределено Тогда
		ИмяФайлаТелаОтвета = ВыбранныеФайлы[0];
	КонецЕсли;
	
	ИмяФайлаТелаОтветаПриИзменении(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаПоляФормыЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	Если ВыбранныеФайлы <> Неопределено Тогда
		ДополнительныеПараметры.Значение = ВыбранныеФайлы[0];
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РедакторCookiesЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат <> Неопределено Тогда
		ДополнительныеПараметры.Печенье = Результат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаЭкспортаИстории(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТД = Новый ТекстовыйДокумент;
	ТД.ДобавитьСтроку(Сериализовано1С(Дополнительно.История));
	ТД.Записать(ВыбранныеФайлы[0]);
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаИмпортаИстории(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТД = Новый ТекстовыйДокумент;
	ТД.Прочитать(ВыбранныеФайлы[0]);
	
	Дополнительно.История = Десериализовано1С(ТД.ПолучитьТекст());
	
	ВывестиИсторию();
КонецПроцедуры
#КонецОбласти
#КонецОбласти
