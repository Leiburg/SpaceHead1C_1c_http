
// SPDX-License-Identifier: Apache-2.0+

#Область ОписаниеПеременных
&НаКлиенте
Перем ТекущееИмяЗаголовка;
#КонецОбласти

#Область ОбработчикиСобытийФормы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ПоддержкаСжатогоОтвета = Истина;
	ИспользоватьСессию = Истина;
	ПоддержкаCookie = Истина;
	ПорогПеренаправлений = 10;
	
	Схема = Элементы.Схема.СписокВыбора[0];
	ТипАвторизации = Элементы.ТипАвторизации.СписокВыбора[0];
	ТипТелаЗапроса = Элементы.ТипТелаЗапроса.СписокВыбора[0].Значение;
	ТипТелаЗапросаКакЕсть = Элементы.ТипТелаЗапросаКакЕсть.СписокВыбора[0];
	ИдентификаторРесурса = "https://ya.ru";
	
	Дополнительно = Новый Структура("Сессия", Новый Структура("Печенье", Новый Соответствие));
КонецПроцедуры
#КонецОбласти

#Область КОНСОЛЬ
#Область ОбработчикиСобытийЭлементовШапкиФормы
&НаКлиенте
Процедура ЗаголовкиОтветаПриАктивизацииСтроки(Элемент)
	ТекущиеДанные = Элементы.ЗаголовкиОтвета.ТекущиеДанные;
	ЗначениеЗаголовкаОтвета = ?(ТекущиеДанные = Неопределено, "", ТекущиеДанные.Значение);
КонецПроцедуры

&НаКлиенте
Процедура ТипАвторизацииПриИзменении(Элемент)
	ОтображатьПользовательПароль = (
		ТипАвторизации = Элементы.ТипАвторизации.СписокВыбора[1].Значение
		ИЛИ ТипАвторизации = Элементы.ТипАвторизации.СписокВыбора[2].Значение
		ИЛИ ТипАвторизации = Элементы.ТипАвторизации.СписокВыбора[3].Значение
	);
	ОтображатьТокен = (ТипАвторизации = Элементы.ТипАвторизации.СписокВыбора[4].Значение);
	
	Элементы.ПользовательАвторизации.Видимость = ОтображатьПользовательПароль;
	Элементы.ГруппаПарольАвторизации.Видимость = ОтображатьПользовательПароль;
	
	ИзменитьРежимОтображенияПароля(НЕ ОтображатьПользовательПароль);
	
	Элементы.ТокенАвторизации.Видимость = ОтображатьТокен;
КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторРесурсаПриИзменении(Элемент)
	ЗаполнитьПараметрыПоИдентификаторуРесурса();
	РассчитатьПараметрыИдентификатораРесурса();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройки(Элемент)
	Элементы.ПрименитьНастройки.КнопкаПоУмолчанию = Истина;
	Элементы.Основная.ТекущаяСтраница = Элементы.СтраницаНастройки;
КонецПроцедуры

&НаКлиенте
Процедура СгенерироватьКод(Элемент)
	ОткрытьФорму(
		"Обработка.КонсольКлиентаHTTP.Форма.РедакторТекстовогоПоля",
		Новый Структура("Текст", КодЗапросаКонсоли()),
		ЭтотОбъект, , , , ,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьCookies(Элемент)
	Если НЕ ПоддержкаCookie Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("РедакторCookiesЗавершение", ЭтотОбъект, Дополнительно.Сессия);
	
	ОткрытьФорму(
		"Обработка.КонсольКлиентаHTTP.Форма.РедакторCookies",
		Новый Структура("Печенье", Дополнительно.Сессия.Печенье),
		ЭтотОбъект, , , ,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиКомандФормы
&НаКлиенте
Процедура ВыполнитьЗапрос(Команда)
	ПЗ = МножествоПараметровЗапроса();
	ДП = ДополнительныеПараметрыЗапроса();
	
	ОтветHTTP = ОтветВыполненногоЗапроса(ПЗ, ДП);
	
	Если ИспользоватьСессию И ПоддержкаCookie Тогда
		КлиентHTTPКлиентСервер.СкопироватьПеченье(Дополнительно, ДП);
	КонецЕсли;
	
	КодСостояния = ОтветHTTP.КодСостояния;
	
	ЗаголовкиОтвета.Очистить();
	Для Каждого КЗ Из ОтветHTTP.Заголовки Цикл
		ЗаполнитьЗначенияСвойств(ЗаголовкиОтвета.Добавить(), КЗ);
	КонецЦикла;
	ЗаголовкиОтвета.Сортировать("Ключ");
	
	ИмяФайлаТела = ОтветHTTP.ИмяФайлаТела;
	КодировкаТелаОтвета = КлиентHTTPКлиентСервер.КодировкаИзЗаголовков(ОтветHTTP.Заголовки);
	
	ТелоОтветаЭтоТекст = (КлиентHTTPПовтИсп.ТипыMIMEТекстовыхДанных().Получить(КлиентHTTPКлиентСервер.ТипMIMEИзЗаголовков(ОтветHTTP.Заголовки)) <> Неопределено);
	Если ТелоОтветаВФайл Тогда
		ТекстТелаОтвета = "файл";
	ИначеЕсли ТелоОтветаЭтоТекст Тогда
		ТекстТелаОтвета = ПолучитьСтрокуИзДвоичныхДанных(
			ОтветHTTP.Тело,
			?(КодировкаТелаОтвета = Неопределено, КлиентHTTPПовтИсп.КодировкаПоУмолчанию(), КодировкаТелаОтвета)
		);
	Иначе
		ТекстТелаОтвета = "двоичные данные";
	КонецЕсли;
	
	ОтветТекст.УстановитьФорматированнуюСтроку(Новый ФорматированнаяСтрока(ТекстТелаОтвета));
	
	Элементы.ГруппаРазделы.ТекущаяСтраница = Элементы.РазделОтвет;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПарольАвторизации(Команда)
	ИзменитьРежимОтображенияПароля(НЕ Элементы.ПоказатьПарольАвторизации.Пометка);
КонецПроцедуры

&НаКлиенте
Процедура ИмпортироватьPostman(Команда)
	Оповещение = Новый ОписаниеОповещения("ВыборФайлаИмпортаPostmanЗавершение", ЭтотОбъект);
		
	ПоказатьДиалогВыбораФайла(Оповещение, "Выбор файла для импорта", "JSON(*.json)|*.json");
КонецПроцедуры

&НаКлиенте
Процедура ИмпортироватьCurl(Команда)
	Оповещение = Новый ОписаниеОповещения("РедакторКомандыCurlЗавершение", ЭтотОбъект);
	
	ОткрытьФорму(
		"Обработка.КонсольКлиентаHTTP.Форма.РедакторТекстовогоПоля",
		Новый Структура("ЗаголовокФормы", "Команда curl"),
		ЭтотОбъект, , , ,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
КонецПроцедуры
#КонецОбласти
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПараметрыЗапроса
&НаКлиенте
Процедура ПараметрыЗапросаПриИзменении(Элемент)
	РассчитатьПараметрыИдентификатораРесурса();
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗапросаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И НЕ Копирование Тогда
		Элемент.ТекущиеДанные.Активно = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗапросаКлючОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	Оповещение = Новый ОписаниеОповещения("РедакторПараметраЗапросаЗавершение", ЭтотОбъект, "Ключ");
	
	ОткрытьФорму(
		"Обработка.КонсольКлиентаHTTP.Форма.РедакторТекстовогоПоля",
		Новый Структура("Текст", ТекущиеДанные.Ключ),
		ЭтотОбъект, , , ,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗапросаЗначениеОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	Оповещение = Новый ОписаниеОповещения("РедакторПараметраЗапросаЗавершение", ЭтотОбъект, "Значение");
	
	ОткрытьФорму(
		"Обработка.КонсольКлиентаHTTP.Форма.РедакторТекстовогоПоля",
		Новый Структура("Текст", ТекущиеДанные.Значение),
		ЭтотОбъект, , , ,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗаголовкиЗапроса
&НаКлиенте
Процедура ЗаголовкиЗапросаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И НЕ Копирование Тогда
		Элемент.ТекущиеДанные.Активно = Истина;
	КонецЕсли;
	
	ТекущееИмяЗаголовка = ?(НоваяСтрока, Неопределено, Элемент.ТекущиеДанные.Ключ);
КонецПроцедуры

&НаКлиенте
Процедура ЗаголовкиЗапросаПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если ОтменаРедактирования Тогда
		Если НЕ НоваяСтрока Тогда
			Элемент.ТекущиеДанные.Ключ = ТекущееИмяЗаголовка;
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	ИмяЗаголовка = ИсправленноеИмяЗаголовкаЗапроса(Элемент.ТекущиеДанные.Ключ);
	Если ТекущееИмяЗаголовка <> Неопределено И ИмяЗаголовка = ТекущееИмяЗаголовка Тогда
		Возврат;
	КонецЕсли;
	
	НайденныеСтроки = ЗаголовкиЗапроса.НайтиСтроки(Новый Структура("Ключ", ИмяЗаголовка));
	ПозицияТекущейСтрокиВНайденных = НайденныеСтроки.Найти(ЗаголовкиЗапроса.НайтиПоИдентификатору(Элемент.ТекущаяСтрока));
	Если ПозицияТекущейСтрокиВНайденных <> Неопределено Тогда
		НайденныеСтроки.Удалить(ПозицияТекущейСтрокиВНайденных);
	КонецЕсли;
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		Отказ = Истина;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Введите уникальное имя заголовка (ограничение платформы 1С)";
		Сообщение.Сообщить();
		
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаголовкиЗапросаКлючПриИзменении(Элемент)
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	ТекущиеДанные.Ключ = ИсправленноеИмяЗаголовкаЗапроса(ТекущиеДанные.Ключ);
КонецПроцедуры

&НаКлиенте
Процедура ЗаголовкиЗапросаКлючОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	Оповещение = Новый ОписаниеОповещения("РедакторИмениЗаголовкаЗапросаЗавершение", ЭтотОбъект);
	
	ОткрытьФорму(
		"Обработка.КонсольКлиентаHTTP.Форма.РедакторТекстовогоПоля",
		Новый Структура("Текст", ТекущиеДанные.Ключ),
		ЭтотОбъект, , , ,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
КонецПроцедуры

&НаКлиенте
Процедура ЗаголовкиЗапросаЗначениеОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	Оповещение = Новый ОписаниеОповещения("РедакторЗначенияЗаголовкаЗапросаЗавершение", ЭтотОбъект);
	
	ОткрытьФорму(
		"Обработка.КонсольКлиентаHTTP.Форма.РедакторТекстовогоПоля",
		Новый Структура("Текст", ТекущиеДанные.Значение),
		ЭтотОбъект, , , ,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
КонецПроцедуры
#КонецОбласти

#Область ТЕЛО_ЗАПРОСА
#Область ОбработчикиСобытийЭлементовШапкиФормы
&НаКлиенте
Процедура ТипТелаЗапросаПриИзменении(Элемент)
	ТипТелаЗапросаСписокВыбора = Элементы.ТипТелаЗапроса.СписокВыбора;
	Элементы.ГруппаТипыТелаЗапроса.Видимость = (ТипТелаЗапроса <> ТипТелаЗапросаСписокВыбора[0].Значение);
	Если ТипТелаЗапроса = ТипТелаЗапросаСписокВыбора[1].Значение Тогда // form-data
		Если ПустаяСтрока(Разделитель) Тогда
			РазделительОчистка(Неопределено, Ложь);
		КонецЕсли;
		
		Элементы.ГруппаТипыТелаЗапроса.ТекущаяСтраница = Элементы.ТипыТелаЗапросаДанныеФормы;
	ИначеЕсли ТипТелаЗапроса = ТипТелаЗапросаСписокВыбора[2].Значение Тогда // x-www-form-urlencoded
		Элементы.ГруппаТипыТелаЗапроса.ТекущаяСтраница = Элементы.ТипыТелаЗапросаДанныеHTMLФормы;
	ИначеЕсли ТипТелаЗапроса = ТипТелаЗапросаСписокВыбора[3].Значение Тогда // raw
		Элементы.ГруппаТипыТелаЗапроса.ТекущаяСтраница = Элементы.ТипыТелаЗапросаКакЕсть;
	ИначеЕсли ТипТелаЗапроса = ТипТелаЗапросаСписокВыбора[4].Значение Тогда // binary
		Элементы.ГруппаТипыТелаЗапроса.ТекущаяСтраница = Элементы.ТипыТелаЗапросаДвоичныеДанные;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РазделительОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Разделитель = XMLСтрока(Новый УникальныйИдентификатор);
КонецПроцедуры

&НаКлиенте
Процедура ФайлТелаЗапросаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Оповещение = Новый ОписаниеОповещения("ВыборФайлаТелаЗапросаЗавершение", ЭтотОбъект);
	
	ПоказатьДиалогВыбораФайла(Оповещение, "Выбор файла для отправки");
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТелоЗапросаДанныеФормы
&НаКлиенте
Процедура ДанныеФормыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И НЕ Копирование Тогда
		ТекущиеДанные = Элемент.ТекущиеДанные;
		ТекущиеДанные.Тип     = Элемент.ПодчиненныеЭлементы.ДанныеФормыТип.СписокВыбора[0]; // Текст
		ТекущиеДанные.Активно = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДанныеФормыКлючОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	Оповещение = Новый ОписаниеОповещения(
		"РедакторПоляТелаЗапросаЗавершение",
		ЭтотОбъект,
		Новый Структура("ТаблицаФормы, ИмяПоля", Элемент.Родитель, "Ключ")
	);
	
	ОткрытьФорму(
		"Обработка.КонсольКлиентаHTTP.Форма.РедакторТекстовогоПоля",
		Новый Структура("Текст", ТекущиеДанные.Ключ),
		ЭтотОбъект, , , ,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
КонецПроцедуры

&НаКлиенте
Процедура ДанныеФормыТипПриИзменении(Элемент)
	Элемент.Родитель.ТекущиеДанные.Значение = "";
КонецПроцедуры

&НаКлиенте
Процедура ДанныеФормыЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	ДанныеФормыТипСписокВыбора = Элемент.Родитель.ПодчиненныеЭлементы.ДанныеФормыТип.СписокВыбора;
	
	Если ТекущиеДанные.Тип = ДанныеФормыТипСписокВыбора[1].Значение Тогда // Файл
		Оповещение = Новый ОписаниеОповещения("ВыборФайлаПоляФормыЗавершение", ЭтотОбъект, ТекущиеДанные);
		
		ПоказатьДиалогВыбораФайла(Оповещение, "Выбор файла для отправки");
	Иначе // Текст
		Оповещение = Новый ОписаниеОповещения(
			"РедакторПоляТелаЗапросаЗавершение",
			ЭтотОбъект,
			Новый Структура("ТаблицаФормы, ИмяПоля", Элемент.Родитель, "Значение")
		);
		
		ОткрытьФорму(
			"Обработка.КонсольКлиентаHTTP.Форма.РедакторТекстовогоПоля",
			Новый Структура("Текст", ТекущиеДанные.Значение),
			ЭтотОбъект, , , ,
			Оповещение,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
		);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТелоЗапросаДанныеHTMLФормы
&НаКлиенте
Процедура ТелоЗапросаДанныеHTMLФормыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И НЕ Копирование Тогда
		Элемент.ТекущиеДанные.Активно = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДанныеHTMLФормыКлючОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	Оповещение = Новый ОписаниеОповещения(
		"РедакторПоляТелаЗапросаЗавершение",
		ЭтотОбъект,
		Новый Структура("ТаблицаФормы, ИмяПоля", Элемент.Родитель, "Ключ")
	);
	
	ОткрытьФорму(
		"Обработка.КонсольКлиентаHTTP.Форма.РедакторТекстовогоПоля",
		Новый Структура("Текст", ТекущиеДанные.Ключ),
		ЭтотОбъект, , , ,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
КонецПроцедуры

&НаКлиенте
Процедура ДанныеHTMLФормыЗначениеОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	Оповещение = Новый ОписаниеОповещения(
		"РедакторПоляТелаЗапросаЗавершение",
		ЭтотОбъект,
		Новый Структура("ТаблицаФормы, ИмяПоля", Элемент.Родитель, "Значение")
	);
	
	ОткрытьФорму(
		"Обработка.КонсольКлиентаHTTP.Форма.РедакторТекстовогоПоля",
		Новый Структура("Текст", ТекущиеДанные.Значение),
		ЭтотОбъект, , , ,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
КонецПроцедуры
#КонецОбласти
#КонецОбласти

#Область НАСТРОЙКИ
#Область ОбработчикиСобытийЭлементовШапкиФормы
&НаКлиенте
Процедура ИмяФайлаТелаОтветаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Оповещение = Новый ОписаниеОповещения("ВыборФайлаСохраненияТелаОтветаЗавершение", ЭтотОбъект);
		
	ПоказатьДиалогСохраненияФайла(Оповещение, "Выбор файла для сохранения");
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаТелаОтветаПриИзменении(Элемент)
	ТелоОтветаВФайл = НЕ ПустаяСтрока(ИмяФайлаТелаОтвета);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьСессиюПриИзменении(Элемент)
	Элементы.ГруппаНастройкиСессии.Доступность = ИспользоватьСессию;
	
	ПоддержкаCookieПриИзменении(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ПоддержкаCookieПриИзменении(Элемент)
	Элементы.ОткрытьCookies.Доступность = (ИспользоватьСессию И ПоддержкаCookie);
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиКомандФормы
&НаКлиенте
Процедура ПрименитьНастройки(Команда)
	Элементы.ФормаВыполнить.КнопкаПоУмолчанию = Истина;
	Элементы.Основная.ТекущаяСтраница = Элементы.СтраницаКонсоль;
КонецПроцедуры
#КонецОбласти
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
&НаКлиенте
Функция ОтветВыполненногоЗапроса(Знач ПараметрыЗапроса, ДополнительныеПараметры)
	Схемы = Элементы.Схема.СписокВыбора;
	Если Схема = Схемы[0].Значение Тогда // GET
		фРезультат = КлиентHTTPКлиентСервер.Получить(ИдентификаторРесурса, ПараметрыЗапроса, ДополнительныеПараметры);
	ИначеЕсли Схема = Схемы[1].Значение Тогда // POST
		фРезультат = ОтветВыполненногоЗапросаPOST(ПараметрыЗапроса, ДополнительныеПараметры); 
	ИначеЕсли Схема = Схемы[2].Значение Тогда // PUT
		фРезультат = ОтветВыполненногоЗапросаPUT(ПараметрыЗапроса, ДополнительныеПараметры);
	ИначеЕсли Схема = Схемы[3].Значение Тогда // DELETE
		ТипыТелаЗапроса = Элементы.ТипТелаЗапроса.СписокВыбора;
		ТелоЗапроса = ?(
			ТипТелаЗапроса = ТипыТелаЗапроса[3].Значение, // raw
			ТелоЗапросаТекст,
			""
		);
		фРезультат = КлиентHTTPКлиентСервер.Удалить(
			ИдентификаторРесурса,
			ТелоЗапроса,
			ДополнительныеПараметры,
			ПараметрыЗапроса
		);
	ИначеЕсли Схема = Схемы[4].Значение Тогда // HEAD
		ВызватьИсключение "Не реализовано";
	Иначе
		ВызватьИсключение "Неизвестная схема запроса";
	КонецЕсли;
	
	Возврат фРезультат;
КонецФункции

&НаКлиенте
Функция ОтветВыполненногоЗапросаPOST(Знач ПараметрыЗапроса, ДополнительныеПараметры)
	ТипыТелаЗапроса = Элементы.ТипТелаЗапроса.СписокВыбора;
	Если ТипТелаЗапроса = ТипыТелаЗапроса[0].Значение Тогда // none
		фРезультат = КлиентHTTPКлиентСервер.ОтправитьТекст(
			ИдентификаторРесурса,
			"",
			ДополнительныеПараметры,
			ПараметрыЗапроса
		);
	ИначеЕсли ТипТелаЗапроса = ТипыТелаЗапроса[1].Значение Тогда // form-data
		фРезультат = КлиентHTTPКлиентСервер.ОтправитьДанныеФормы(
			ИдентификаторРесурса,
			ДанныеФормыТелаЗапроса(), 
			ПараметрыОтправкиДанныхФормы(ДополнительныеПараметры),
			ПараметрыЗапроса
		);
	ИначеЕсли ТипТелаЗапроса = ТипыТелаЗапроса[2].Значение Тогда // x-www-form-urlencoded
		фРезультат = КлиентHTTPКлиентСервер.ОтправитьДанныеHTMLФормы(
			ИдентификаторРесурса,
			ДанныеHTMLФормыТелаЗапроса(), 
			ДополнительныеПараметры,
			ПараметрыЗапроса
		);
	ИначеЕсли ТипТелаЗапроса = ТипыТелаЗапроса[3].Значение Тогда // raw
		фРезультат = КлиентHTTPКлиентСервер.ОтправитьТекст(
			ИдентификаторРесурса,
			ТелоЗапросаТекст,
			ДополнительныеПараметры,
			ПараметрыЗапроса
		);
	ИначеЕсли ТипТелаЗапроса = ТипыТелаЗапроса[4].Значение Тогда // binary
		фРезультат = КлиентHTTPКлиентСервер.ОтправитьФайл(
			ИдентификаторРесурса,
			Новый Файл(ТелоЗапросаФайл),
			ДополнительныеПараметры,
			ПараметрыЗапроса
		);
	Иначе 
		ВызватьИсключение СтрШаблон("Тип тела запроса %1 не поддерживается для %2", ТипТелаЗапроса, Схема);
	КонецЕсли;
	
	Возврат фРезультат;
КонецФункции

&НаКлиенте
Функция ОтветВыполненногоЗапросаPUT(Знач ПараметрыЗапроса, ДополнительныеПараметры)
	ТипыТелаЗапроса = Элементы.ТипТелаЗапроса.СписокВыбора;
	Если ТипТелаЗапроса = ТипыТелаЗапроса[0].Значение Тогда // none
		фРезультат = КлиентHTTPКлиентСервер.ЗаписатьТекст(
			ИдентификаторРесурса,
			"",
			ДополнительныеПараметры,
			ПараметрыЗапроса
		);
	ИначеЕсли ТипТелаЗапроса = ТипыТелаЗапроса[3].Значение Тогда // raw
		фРезультат = КлиентHTTPКлиентСервер.ЗаписатьТекст(
			ИдентификаторРесурса,
			ТелоЗапросаТекст,
			ДополнительныеПараметры,
			ПараметрыЗапроса
		);
	ИначеЕсли ТипТелаЗапроса = ТипыТелаЗапроса[4].Значение Тогда // binary
		фРезультат = КлиентHTTPКлиентСервер.ЗаписатьФайл(
			ИдентификаторРесурса,
			Новый Файл(ТелоЗапросаФайл),
			ДополнительныеПараметры,
			ПараметрыЗапроса
		);
	Иначе 
		ВызватьИсключение СтрШаблон("Тип тела запроса %1 не поддерживается для %2", ТипТелаЗапроса, Схема);
	КонецЕсли;
	
	Возврат фРезультат;
КонецФункции

&НаКлиенте
Функция ПараметрыИдентификатораСПорядком(Знач ИдентификаторРесурса, Знач ПозицияНачала)
	фРезультат = Новый Структура("Параметры, Порядок", Новый Соответствие, Новый Массив);
	
	ПараметрыСтрока = ?(
		ПозицияНачала = 0,
		"",
		Сред(ИдентификаторРесурса, ПозицияНачала + 1)
	);
	
	ПараметрыИдентификатора = СтрРазделить(ПараметрыСтрока, "&", Ложь);
	Для Каждого Параметр Из ПараметрыИдентификатора Цикл
		ПозицияРазделителя = СтрНайти(Параметр, "=");
		Если ПозицияРазделителя = 0 Тогда
			ПозицияРазделителя = СтрДлина(Параметр) + 1;
		КонецЕсли;
		
		ИмяПараметра = Лев(Параметр, ПозицияРазделителя - 1);
		Если ПустаяСтрока(ИмяПараметра) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗначениеПараметра = Прав(Параметр, СтрДлина(Параметр) - ПозицияРазделителя);
		
		ЗначенияПараметра = фРезультат.Параметры.Получить(ИмяПараметра);
		Если ЗначенияПараметра = Неопределено Тогда
			ЗначенияПараметра = Новый Соответствие;
			фРезультат.Параметры.Вставить(ИмяПараметра, ЗначенияПараметра);
			Добавлять = Истина;
		Иначе
			Добавлять = (ЗначенияПараметра.Получить(ЗначениеПараметра) = Неопределено);
		КонецЕсли;
		
		Если Добавлять Тогда
			ЗначенияПараметра.Вставить(ЗначениеПараметра, Истина);
			фРезультат.Порядок.Добавить(Новый Структура("Ключ, Значение", ИмяПараметра, ЗначениеПараметра));
		КонецЕсли;
	КонецЦикла;
	
	Возврат фРезультат;
КонецФункции

&НаКлиенте
Процедура УдалитьСтрокиОтсутствующихПараметров(ЗначенияПараметров)
	СтрокиНаУдаление = Новый Массив;
	
	Для Каждого Стр Из ПараметрыЗапроса Цикл
		ЗначенияПараметра = ЗначенияПараметров.Параметры.Получить(Стр.Ключ);
		Если ЗначенияПараметра = Неопределено
			 ИЛИ ЗначенияПараметра.Получить(Стр.Значение) = Неопределено Тогда
			Если Стр.Активно Тогда
				СтрокиНаУдаление.Добавить(Стр);
			КонецЕсли;
		Иначе
			Стр.Активно = Истина;
			ЗначенияПараметра.Удалить(Стр.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Стр Из СтрокиНаУдаление Цикл
		ПараметрыЗапроса.Удалить(Стр);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПараметрыПоИдентификаторуРесурса()
	Если СтрНачинаетсяС(ИдентификаторРесурса, "https://") Тогда
		ПозицияНачалаПоиска = 8;
	ИначеЕсли СтрНачинаетсяС(ИдентификаторРесурса, "http://") Тогда
		ПозицияНачалаПоиска = 7;
	Иначе
		ВызватьИсключение "Не удалось разобрать URI";
	КонецЕсли;
	
	ПозицияНачалаСтрокиПараметров = СтрНайти(ИдентификаторРесурса, "?", , ПозицияНачалаПоиска);
	КоллекцияПараметров = ПараметрыИдентификатораСПорядком(ИдентификаторРесурса, ПозицияНачалаСтрокиПараметров);
	
	УдалитьСтрокиОтсутствующихПараметров(КоллекцияПараметров);
	
	Для Каждого ЗначениеПараметра Из КоллекцияПараметров.Порядок Цикл
		ЗначенияПараметра = КоллекцияПараметров.Параметры.Получить(ЗначениеПараметра.Ключ);
		Если ЗначенияПараметра = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если ЗначенияПараметра.Получить(ЗначениеПараметра.Значение) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Стр = ПараметрыЗапроса.Добавить();
		Стр.Ключ     = ЗначениеПараметра.Ключ;
		Стр.Значение = ЗначениеПараметра.Значение;
		Стр.Активно  = Истина;
	КонецЦикла; 
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьПараметрыИдентификатораРесурса()
	ДлинаИдентификатораРесурса = СтрДлина(ИдентификаторРесурса);
	ПозицияНачалаПоиска = 7;
	
	Если СтрНачинаетсяС(ИдентификаторРесурса, "https://") Тогда
		ПозицияНачалаПоиска = 8;
	ИначеЕсли НЕ СтрНачинаетсяС(ИдентификаторРесурса, "http://") Тогда
		ВызватьИсключение "Не удалось разобрать URI";
	КонецЕсли;
	
	ПозицияНачалаСтрокиПараметров = СтрНайти(ИдентификаторРесурса, "?", , ПозицияНачалаПоиска);
	
	НовыйИдентификатор = ?(
		ПозицияНачалаСтрокиПараметров = 0,
		ИдентификаторРесурса,
		Лев(ИдентификаторРесурса, ПозицияНачалаСтрокиПараметров - 1)
	);
	
	ПараметрыИдентификатора = Новый Массив;
	Для Каждого Стр Из ПараметрыЗапроса Цикл
		Если ПустаяСтрока(Стр.Ключ) ИЛИ НЕ Стр.Активно Тогда
			Продолжить;
		КонецЕсли;
		
		ЗначениеПараметра = Новый Массив;
		ЗначениеПараметра.Добавить(Стр.Значение);
		
		// Имитация элемента соответствия
		ПараметрыИдентификатора.Добавить(Новый Структура("Ключ, Значение", Стр.Ключ, ЗначениеПараметра));
	КонецЦикла;
	
	ИдентификаторРесурса = НовыйИдентификатор + КлиентHTTPКлиентСервер.ПараметрыЗапросаСтрокой(ПараметрыИдентификатора);
КонецПроцедуры

&НаКлиенте
Функция МножествоПараметровЗапроса()
	фРезультат = КлиентHTTPКлиентСервер.НовыеПараметрыЗапроса();
	
	Для Каждого Стр Из ПараметрыЗапроса Цикл
		Если НЕ Стр.Активно Тогда
			Продолжить;
		КонецЕсли;
		
		КлиентHTTPКлиентСервер.ДобавитьПараметр(фРезультат, Стр.Ключ, Стр.Значение);
	КонецЦикла;
	
	Возврат фРезультат;
КонецФункции

&НаКлиенте
Функция ДополнительныеПараметрыЗапроса()
	фРезультат = КлиентHTTPКлиентСервер.НовыеДополнительныеПараметры();
	
	УстановитьЗаголовкиЗапроса(фРезультат);
	
	ТипАвторизацииСписокВыбора = Элементы.ТипАвторизации.СписокВыбора;
	Если ТипАвторизации = ТипАвторизацииСписокВыбора[1].Значение Тогда // Basic
		КлиентHTTPКлиентСервер.УстановитьBasicАвторизацию(фРезультат, ПользовательАвторизации, ПарольАвторизации);
	ИначеЕсли ТипАвторизации = ТипАвторизацииСписокВыбора[2].Значение Тогда // NTLM
		КлиентHTTPКлиентСервер.УстановитьNTLMАвторизацию(фРезультат, ПользовательАвторизации, ПарольАвторизации);
	ИначеЕсли ТипАвторизации = ТипАвторизацииСписокВыбора[3].Значение Тогда // Digest
		КлиентHTTPКлиентСервер.УстановитьDigestАвторизацию(фРезультат, ПользовательАвторизации, ПарольАвторизации);
	ИначеЕсли ТипАвторизации = ТипАвторизацииСписокВыбора[4].Значение Тогда // Bearer
		КлиентHTTPКлиентСервер.УстановитьBearerАвторизацию(фРезультат, ТокенАвторизации);
	КонецЕсли;
	
	Если ИспользоватьСессию Тогда
		КлиентHTTPКлиентСервер
			.ИспользоватьСессию(фРезультат)
			.УстановитьПорогПеренаправлений(фРезультат, ПорогПеренаправлений);
		
		Если ПоддержкаCookie Тогда
			КлиентHTTPКлиентСервер.СкопироватьПеченье(фРезультат, Дополнительно);
		КонецЕсли;
	КонецЕсли;
	
	Если ПоддержкаСжатогоОтвета Тогда
		КлиентHTTPКлиентСервер.УстановитьСжатиеОтветаGZIP(фРезультат);
	КонецЕсли;
	
	Если ТелоОтветаВФайл Тогда
		Если ПустаяСтрока(ИмяФайлаТелаОтвета) Тогда
			Элементы.Основная.ТекущаяСтраница = Элементы.СтраницаНастройки;
			ВызватьИсключение "Укажите путь к файлу ответа";
		КонецЕсли;
		
		КлиентHTTPКлиентСервер.УстановитьИмяВыходногоФайла(фРезультат, ИмяФайлаТелаОтвета);
	КонецЕсли;
	
	Возврат фРезультат;
КонецФункции

&НаКлиенте
Процедура УстановитьЗаголовкиЗапроса(Знач ДополнительныеПараметры)
	Для Каждого Стр Из ЗаголовкиЗапроса Цикл
		Если НЕ Стр.Активно Тогда
			Продолжить;
		КонецЕсли;
		
		КлиентHTTPКлиентСервер.УстановитьЗаголовок(ДополнительныеПараметры, Стр.Ключ, Стр.Значение);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ДанныеФормыТелаЗапроса()
	фРезультат = КлиентHTTPКлиентСервер.НовыеПоляФормы();
	ТипыДанныхФормы = Элементы.ТелоЗапросаДанныеФормы.ПодчиненныеЭлементы.ДанныеФормыТип.СписокВыбора;
	
	Для Каждого Стр Из ТелоЗапросаДанныеФормы Цикл
		Если НЕ Стр.Активно Тогда
			Продолжить;
		КонецЕсли;
		
		Если Стр.Тип = ТипыДанныхФормы[0].Значение Тогда // Текст
			КлиентHTTPКлиентСервер.ДобавитьПолеФормыТекст(фРезультат, Стр.Ключ, Стр.Значение);
		Иначе // Файл
			Если ПустаяСтрока(Стр.Значение) Тогда
				Элементы.ГруппаРазделыЗапроса.ТекущаяСтраница = Элементы.РазделТелоЗапроса;
				Элементы.ГруппаРазделы.ТекущаяСтраница = Элементы.РазделЗапрос;
				
				ВызватьИсключение "Укажите выгружаемый файл в форме тела запроса";
			КонецЕсли;
			
			ФайлПоля = Новый Файл(Стр.Значение);
			Если НЕ ФайлПоля.Существует() Тогда
				Продолжить;
			КонецЕсли;
			
			ТипMIME = КлиентHTTPСлужебный.ТипMIMEРасширенияФайла(ФайлПоля.Расширение);
			
			КлиентHTTPКлиентСервер.ДобавитьПолеФормыФайл(фРезультат, Стр.Ключ, ФайлПоля, ФайлПоля.Имя, ТипMIME);
		КонецЕсли;
	КонецЦикла;
	
	Возврат фРезультат;
КонецФункции

&НаКлиенте
Функция ДанныеHTMLФормыТелаЗапроса()
	фРезультат = КлиентHTTPКлиентСервер.НовыеПоляФормы();
	
	Для Каждого Стр Из ТелоЗапросаДанныеHTMLФормы Цикл
		Если НЕ Стр.Активно Тогда
			Продолжить;
		КонецЕсли;
		
		КлиентHTTPКлиентСервер.ДобавитьПолеHTMLФормы(фРезультат, Стр.Ключ, Стр.Значение);
	КонецЦикла;
	
	Возврат фРезультат;
КонецФункции

&НаКлиенте
Функция ПараметрыОтправкиДанныхФормы(Знач ДополнительныеПараметры)
	фРезультат = КлиентHTTPКлиентСервер.КопияДополнительныхПараметров(ДополнительныеПараметры);
	
	КлиентHTTPКлиентСервер.УстановитьРазделительПолейФормы(фРезультат, Разделитель);
	
	Возврат фРезультат;
КонецФункции

&НаКлиенте
Процедура ИзменитьРежимОтображенияПароля(Знач РежимПароля)
	Элементы.ПоказатьПарольАвторизации.Пометка = РежимПароля;
	Элементы.ПарольАвторизации.РежимПароля = НЕ Элементы.ПоказатьПарольАвторизации.Пометка;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДиалогВыбораФайла(Знач Оповещение, Знач Заголовок = "Выбор файла", Знач Фильтр = Неопределено)
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Заголовок                   = Заголовок;
	Диалог.ПредварительныйПросмотр     = Ложь;
	Диалог.ПроверятьСуществованиеФайла = Истина;
	Диалог.МножественныйВыбор          = Ложь;
	
	Если Фильтр <> Неопределено Тогда
		Диалог.Фильтр = Фильтр;
	КонецЕсли;
	
	Диалог.Показать(Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДиалогСохраненияФайла(Знач Оповещение, Знач Заголовок = "Выбор файла")
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	Диалог.Заголовок                   = Заголовок;
	Диалог.ПредварительныйПросмотр     = Ложь;
	Диалог.ПроверятьСуществованиеФайла = Ложь;
	Диалог.МножественныйВыбор          = Ложь;
	Диалог.Показать(Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура СообщитьПользователю(Знач Текст, Знач Поле)
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = Текст;
	Сообщение.Поле  = Поле;
	Сообщение.Сообщить();
КонецПроцедуры

&НаКлиенте
Функция ИсправленноеИмяЗаголовкаЗапроса(Знач Имя)
	фРезультат = Новый Массив;
	ДопустимыеСимволы = КлиентHTTPПовтИсп.ДопустимыеСимволыИмениЗаголовка();
	
	Для я = 1 По СтрДлина(Имя) Цикл
		СимволИмениЗаголовка = Сред(Имя, я, 1);
		
		фРезультат.Добавить(?(ДопустимыеСимволы.Получить(СимволИмениЗаголовка) = Неопределено, "-", СимволИмениЗаголовка));
	КонецЦикла;
	
	Возврат СтрСоединить(фРезультат);
КонецФункции

&НаКлиенте
Процедура ДобавитьВКодЗапросаИдентификаторРесурса(Построитель)
	ПозицияПараметровЗапроса = СтрНайти(ИдентификаторРесурса, "?");
	
	Построитель.Добавить(
		СтрШаблон(
			"ИдентификаторРесурса = ""%1"";",
			?(ПозицияПараметровЗапроса = 0, ИдентификаторРесурса, Лев(ИдентификаторРесурса, ПозицияПараметровЗапроса - 1))
		)
	);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВКодЗапросаИспользованиеСессии(Построитель, ЕстьДополнительныеПараметры)
	Если ИспользоватьСессию Тогда
		Построитель.Добавить("	.ИспользоватьСессию(ДополнительныеПараметры)");
		Построитель.Добавить(СтрШаблон("	.УстановитьПорогПеренаправлений(ДополнительныеПараметры, %1)", XMLСтрока(ПорогПеренаправлений)));
		
		ЕстьДополнительныеПараметры = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВКодЗапросаПараметры(Построитель, ЕстьПараметрыЗапроса)
	Для Каждого Стр Из ПараметрыЗапроса Цикл
		Если НЕ Стр.Активно Тогда
			Продолжить;
		КонецЕсли;
		
		Построитель.Добавить(СтрШаблон(
			"	.ДобавитьПараметр(ПараметрыЗапроса, ""%1"", ""%2"")",
			СтрЗаменить(Стр.Ключ, """", """"""),
			СтрЗаменить(Стр.Значение, """", """""")
		));
		
		ЕстьПараметрыЗапроса = Истина;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВКодЗапросаЗаголовки(Построитель, ЕстьДополнительныеПараметры)
	Для Каждого Стр Из ЗаголовкиЗапроса Цикл
		Если НЕ Стр.Активно Тогда
			Продолжить;
		КонецЕсли;
		
		Построитель.Добавить(СтрШаблон("	.УстановитьЗаголовок(ДополнительныеПараметры, ""%1"", ""%2"")", Стр.Ключ, СтрЗаменить(Стр.Значение, """", """""")));
		
		ЕстьДополнительныеПараметры = Истина;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВКодЗапросаСжатиеОтвета(Построитель, ЕстьДополнительныеПараметры)
	Если ПоддержкаСжатогоОтвета Тогда
		Построитель.Добавить("	.УстановитьСжатиеОтветаGZIP(ДополнительныеПараметры)");
		
		ЕстьДополнительныеПараметры = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВКодЗапросаАвторизацию(Построитель)
	ТипАвторизацииСписокВыбора = Элементы.ТипАвторизации.СписокВыбора;
	Если ТипАвторизации = ТипАвторизацииСписокВыбора[1].Значение Тогда // Basic
		Построитель.Добавить(СтрШаблон(
			"	.УстановитьBasicАвторизацию(ДополнительныеПараметры, ""%1"", ""%2"")",
			ПользовательАвторизации,
			ПарольАвторизации
		));
	ИначеЕсли ТипАвторизации = ТипАвторизацииСписокВыбора[2].Значение Тогда // NTLM
		Построитель.Добавить(СтрШаблон(
			"	.УстановитьNTLMАвторизацию(ДополнительныеПараметры, ""%1"", ""%2"")",
			ПользовательАвторизации,
			ПарольАвторизации
		));
	ИначеЕсли ТипАвторизации = ТипАвторизацииСписокВыбора[3].Значение Тогда // Digest
		Построитель.Добавить(СтрШаблон(
			"	.УстановитьDigestАвторизацию(ДополнительныеПараметры, ""%1"", ""%2"")",
			ПользовательАвторизации,
			ПарольАвторизации
		));
	ИначеЕсли ТипАвторизации = ТипАвторизацииСписокВыбора[4].Значение Тогда // Bearer
		Построитель.Добавить(СтрШаблон(
			"	.УстановитьBearerАвторизацию(ДополнительныеПараметры, ""%1"")",
			ТокенАвторизации
		));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВКодЗапросаФайлТелаОтвета(Построитель, ЕстьДополнительныеПараметры, ТребуетсяИмяФайлаТелаОтвета)
	Если ТелоОтветаВФайл Тогда
		ЕстьДополнительныеПараметры = Истина;
		ТребуетсяИмяФайлаТелаОтвета = ПустаяСтрока(ИмяФайлаТелаОтвета);
		
		Построитель.Добавить(СтрШаблон(
			"	.УстановитьИмяВыходногоФайла(ДополнительныеПараметры, %1)",
			?(ТребуетсяИмяФайлаТелаОтвета, "ИмяФайлаТелаОтвета", СтрШаблон("""%1""", ИмяФайлаТелаОтвета))
		));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВКодЗапросаМетодGet(Построитель, Знач ЕстьПараметрыЗапроса, Знач ЕстьДополнительныеПараметры)
	Построитель.Добавить(СтрШаблон(
		"	.Получить(ИдентификаторРесурса%1%2%3);",
		?(ЕстьПараметрыЗапроса ИЛИ ЕстьДополнительныеПараметры, ", ", ""),
		?(ЕстьПараметрыЗапроса, "ПараметрыЗапроса", ""),
		?(ЕстьДополнительныеПараметры, ", ДополнительныеПараметры", "")
	));
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВКодЗапросаМетодPostБезТела(Построитель, Знач ЕстьПараметрыЗапроса, Знач ЕстьДополнительныеПараметры)
	Построитель.Добавить(СтрШаблон(
		"	.ОтправитьТекст(ИдентификаторРесурса, """"%1%2%3);",
		?(ЕстьПараметрыЗапроса ИЛИ ЕстьДополнительныеПараметры, ", ", ""),
		?(ЕстьДополнительныеПараметры, "ДополнительныеПараметры", ""),
		?(ЕстьПараметрыЗапроса, ", ПараметрыЗапроса", "")
	));
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВКодЗапросаМетодPostПолеФормыТекст(Построитель, ТекстПолейФормы, НомерТекста, Знач ПолеФормыТелаЗапроса)
	НомерТекста = НомерТекста + 1;
	ИмяПеременной = "ТекстПоля" + XMLСтрока(НомерТекста);
	
	ТекстПолейФормы.Добавить(Новый Структура("ИмяПеременной, ЗначениеПеременной", ИмяПеременной, ПолеФормыТелаЗапроса.Значение));
	Построитель.Добавить(СтрШаблон("	.ДобавитьПолеФормыТекст(ПоляФормы, ""%1"", %2)", ПолеФормыТелаЗапроса.Ключ, ИмяПеременной));
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВКодЗапросаМетодPostПолеФормыФайл(Построитель, ФайлыПолейФормы, НомерФайла, ПропуститьПоле, Знач ПолеФормыТелаЗапроса)
	Если ПустаяСтрока(ПолеФормыТелаЗапроса.Значение) Тогда
		ПропуститьПоле = Истина;
		Возврат;
	КонецЕсли;
	
	НомерФайла = НомерФайла + 1;
	ИмяПеременной = "ФайлПоля" + XMLСтрока(НомерФайла);
	
	ФайлыПолейФормы.Добавить(Новый Структура("ИмяПеременной, Путь", ИмяПеременной, ПолеФормыТелаЗапроса.Значение));
	Построитель.Добавить(
		СтрШаблон(
			"	.ДобавитьПолеФормыФайл(ПоляФормы, ""%1"", %2, %3.Имя, КлиентHTTPСлужебный.ТипMIMEРасширенияФайла(%4.Расширение))",
			ПолеФормыТелаЗапроса.Ключ,
			ИмяПеременной,
			ИмяПеременной,
			ИмяПеременной
		)
	);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВКодЗапросаМетодPostФорма(Построитель, ЕстьПоляФормы, ТекстПолейФормы, ФайлыПолейФормы, Знач ЕстьПараметрыЗапроса, Знач ЕстьДополнительныеПараметры)
	Построитель.Добавить(СтрШаблон("	.УстановитьРазделительПолейФормы(ДополнительныеПараметры, ""%1"")", Разделитель));
	
	// Тело запроса
	НомерТекста = 0;
	НомерФайла = 0;
	ТипыДанныхФормы = Элементы.ТелоЗапросаДанныеФормы.ПодчиненныеЭлементы.ДанныеФормыТип.СписокВыбора;
	
	Для Каждого Стр Из ТелоЗапросаДанныеФормы Цикл
		Если НЕ Стр.Активно Тогда
			Продолжить;
		КонецЕсли;
		
		Если Стр.Тип = ТипыДанныхФормы[0].Значение Тогда // Текст
			ДобавитьВКодЗапросаМетодPostПолеФормыТекст(Построитель, ТекстПолейФормы, НомерТекста, Стр);
		Иначе // Файл
			ПропуститьПоле = Ложь;
			ДобавитьВКодЗапросаМетодPostПолеФормыФайл(Построитель, ФайлыПолейФормы, НомерФайла, ПропуститьПоле, Стр);
			Если ПропуститьПоле Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ЕстьПоляФормы = Истина;
	КонецЦикла;
	
	Построитель.Добавить(СтрШаблон(
		"	.ОтправитьДанныеФормы(ИдентификаторРесурса, %1%2%3%4);",
		?(ЕстьПоляФормы, "ПоляФормы", "КлиентHTTPКлиентСервер.НовыеПоляФормы()"),
		?(ЕстьПараметрыЗапроса ИЛИ ЕстьДополнительныеПараметры, ", ", ""),
		?(ЕстьДополнительныеПараметры, "ДополнительныеПараметры", ""),
		?(ЕстьПараметрыЗапроса, ", ПараметрыЗапроса", "")
	));
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВКодЗапросаМетодPostHtmlФорма(Построитель, ЕстьПоляФормы, Знач ЕстьПараметрыЗапроса, Знач ЕстьДополнительныеПараметры)
	Для Каждого Стр Из ТелоЗапросаДанныеHTMLФормы Цикл
		Если НЕ Стр.Активно Тогда
			Продолжить;
		КонецЕсли;
		
		Построитель.Добавить(СтрШаблон("	.ДобавитьПолеHTMLФормы(ПоляФормы, ""%1"", ""%2"")", Стр.Ключ, Стр.Значение));
		
		ЕстьПоляФормы = Истина;
	КонецЦикла;
	
	Построитель.Добавить(СтрШаблон(
		"	.ОтправитьДанныеHTMLФормы(ИдентификаторРесурса, %1%2%3%4);",
		?(ЕстьПоляФормы, "ПоляФормы", "КлиентHTTPКлиентСервер.НовыеПоляФормы()"),
		?(ЕстьПараметрыЗапроса ИЛИ ЕстьДополнительныеПараметры, ", ", ""),
		?(ЕстьДополнительныеПараметры, "ДополнительныеПараметры", ""),
		?(ЕстьПараметрыЗапроса, ", ПараметрыЗапроса", "")
	));
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВКодЗапросаМетодPostТекст(Построитель, ЕстьТекстТелаЗапроса, Знач ЕстьПараметрыЗапроса, Знач ЕстьДополнительныеПараметры)
	Построитель.Добавить(СтрШаблон(
		"	.ОтправитьТекст(ИдентификаторРесурса, ТелоЗапросаТекст%1%2%3);",
		?(ЕстьПараметрыЗапроса ИЛИ ЕстьДополнительныеПараметры, ", ", ""),
		?(ЕстьДополнительныеПараметры, "ДополнительныеПараметры", ""),
		?(ЕстьПараметрыЗапроса, ", ПараметрыЗапроса", "")
	));
	
	ЕстьТекстТелаЗапроса = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВКодЗапросаМетодPostФайл(Построитель, ФайлыПолейФормы, Знач ЕстьПараметрыЗапроса, Знач ЕстьДополнительныеПараметры)
	Если ПустаяСтрока(ТелоЗапросаФайл) Тогда
		Элементы.ГруппаТипыТелаЗапроса.ТекущаяСтраница = Элементы.ТипыТелаЗапросаДвоичныеДанные;
		Элементы.ГруппаРазделыЗапроса.ТекущаяСтраница = Элементы.РазделТелоЗапроса;
		Элементы.ГруппаРазделы.ТекущаяСтраница = Элементы.РазделЗапрос;
		ВызватьИсключение "Укажите выгружаемый файл в теле запроса";
	КонецЕсли;
	
	ФайлыПолейФормы.Добавить(Новый Структура("ИмяПеременной, Путь", "ФайлТела", ТелоЗапросаФайл));
	Построитель.Добавить(СтрШаблон(
		"	.ОтправитьФайл(ИдентификаторРесурса, ФайлТела%1%2%3);",
		?(ЕстьПараметрыЗапроса ИЛИ ЕстьДополнительныеПараметры, ", ", ""),
		?(ЕстьДополнительныеПараметры, "ДополнительныеПараметры", ""),
		?(ЕстьПараметрыЗапроса, ", ПараметрыЗапроса", "")
	));
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВКодЗапросаМетодPost(Построитель, ЕстьТекстТелаЗапроса, ЕстьПоляФормы, ТекстПолейФормы, ФайлыПолейФормы, Знач ЕстьПараметрыЗапроса, Знач ЕстьДополнительныеПараметры)
	ТипТелаЗапросаСписокВыбора = Элементы.ТипТелаЗапроса.СписокВыбора;
	Если ТипТелаЗапроса = ТипТелаЗапросаСписокВыбора[0].Значение Тогда // none
		ДобавитьВКодЗапросаМетодPostБезТела(Построитель, ЕстьПараметрыЗапроса, ЕстьДополнительныеПараметры);
	ИначеЕсли ТипТелаЗапроса = ТипТелаЗапросаСписокВыбора[1].Значение Тогда // form-data
		ДобавитьВКодЗапросаМетодPostФорма(Построитель, ЕстьПоляФормы, ТекстПолейФормы, ФайлыПолейФормы, ЕстьПараметрыЗапроса, ЕстьДополнительныеПараметры);
	ИначеЕсли ТипТелаЗапроса = ТипТелаЗапросаСписокВыбора[2].Значение Тогда // x-www-form-urlencoded
		ДобавитьВКодЗапросаМетодPostHtmlФорма(Построитель, ЕстьПоляФормы, ЕстьПараметрыЗапроса, ЕстьДополнительныеПараметры);
	ИначеЕсли ТипТелаЗапроса = ТипТелаЗапросаСписокВыбора[3].Значение Тогда // raw
		ДобавитьВКодЗапросаМетодPostТекст(Построитель, ЕстьТекстТелаЗапроса, ЕстьПараметрыЗапроса, ЕстьДополнительныеПараметры);
	ИначеЕсли ТипТелаЗапроса = ТипТелаЗапросаСписокВыбора[4].Значение Тогда // binary
		ДобавитьВКодЗапросаМетодPostФайл(Построитель, ФайлыПолейФормы, ЕстьПараметрыЗапроса, ЕстьДополнительныеПараметры);
	Иначе
		ВызватьИсключение СтрШаблон("Тип тела запроса %1 не поддерживается для %2", ТипТелаЗапроса, Схема);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВКодЗапросаМетодPutБезТела(Построитель, Знач ЕстьПараметрыЗапроса, Знач ЕстьДополнительныеПараметры)
	Построитель.Добавить(СтрШаблон(
		"	.ЗаписатьТекст(ИдентификаторРесурса, """"%1%2%3);",
		?(ЕстьПараметрыЗапроса ИЛИ ЕстьДополнительныеПараметры, ", ", ""),
		?(ЕстьДополнительныеПараметры, "ДополнительныеПараметры", ""),
		?(ЕстьПараметрыЗапроса, ", ПараметрыЗапроса", "")
	));
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВКодЗапросаМетодPutТекст(Построитель, ЕстьТекстТелаЗапроса, Знач ЕстьПараметрыЗапроса, Знач ЕстьДополнительныеПараметры)
	Построитель.Добавить(СтрШаблон(
		"	.ЗаписатьТекст(ИдентификаторРесурса, ТелоЗапросаТекст%1%2%3);",
		?(ЕстьПараметрыЗапроса ИЛИ ЕстьДополнительныеПараметры, ", ", ""),
		?(ЕстьДополнительныеПараметры, "ДополнительныеПараметры", ""),
		?(ЕстьПараметрыЗапроса, ", ПараметрыЗапроса", "")
	));
	
	ЕстьТекстТелаЗапроса = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВКодЗапросаМетодPutФайл(Построитель, ФайлыПолейФормы, Знач ЕстьПараметрыЗапроса, Знач ЕстьДополнительныеПараметры)
	Если ПустаяСтрока(ТелоЗапросаФайл) Тогда
		Элементы.ГруппаТипыТелаЗапроса.ТекущаяСтраница = Элементы.ТипыТелаЗапросаДвоичныеДанные;
		Элементы.ГруппаРазделыЗапроса.ТекущаяСтраница = Элементы.РазделТелоЗапроса;
		Элементы.ГруппаРазделы.ТекущаяСтраница = Элементы.РазделЗапрос;
		ВызватьИсключение "Укажите выгружаемый файл в теле запроса";
	КонецЕсли;
	
	ФайлыПолейФормы.Добавить(Новый Структура("ИмяПеременной, Путь", "ФайлТела", ТелоЗапросаФайл));
	Построитель.Добавить(СтрШаблон(
		"	.ЗаписатьФайл(ИдентификаторРесурса, ФайлТела%1%2%3);",
		?(ЕстьПараметрыЗапроса ИЛИ ЕстьДополнительныеПараметры, ", ", ""),
		?(ЕстьДополнительныеПараметры, "ДополнительныеПараметры", ""),
		?(ЕстьПараметрыЗапроса, ", ПараметрыЗапроса", "")
	));
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВКодЗапросаМетодPut(Построитель, ЕстьТекстТелаЗапроса, ФайлыПолейФормы, Знач ЕстьПараметрыЗапроса, Знач ЕстьДополнительныеПараметры)
	ТипТелаЗапросаСписокВыбора = Элементы.ТипТелаЗапроса.СписокВыбора;
	Если ТипТелаЗапроса = ТипТелаЗапросаСписокВыбора[0].Значение Тогда // none
		ДобавитьВКодЗапросаМетодPutБезТела(Построитель, ЕстьПараметрыЗапроса, ЕстьДополнительныеПараметры);
	ИначеЕсли ТипТелаЗапроса = ТипТелаЗапросаСписокВыбора[3].Значение Тогда // raw
		ДобавитьВКодЗапросаМетодPutТекст(Построитель, ЕстьТекстТелаЗапроса, ЕстьПараметрыЗапроса, ЕстьДополнительныеПараметры);
	ИначеЕсли ТипТелаЗапроса = ТипТелаЗапросаСписокВыбора[4].Значение Тогда // binary
		ДобавитьВКодЗапросаМетодPutФайл(Построитель, ФайлыПолейФормы, ЕстьПараметрыЗапроса, ЕстьДополнительныеПараметры);
	Иначе
		ВызватьИсключение СтрШаблон("Тип тела запроса %1 не поддерживается для %2", ТипТелаЗапроса, Схема);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВКодЗапросаМетодDeleteТекст(Построитель, ЕстьТекстТелаЗапроса, Знач ЕстьПараметрыЗапроса, Знач ЕстьДополнительныеПараметры)
	Построитель.Добавить(СтрШаблон(
		"	.Удалить(ИдентификаторРесурса, ТелоЗапросаТекст%1%2%3);",
		?(ЕстьПараметрыЗапроса ИЛИ ЕстьДополнительныеПараметры, ", ", ""),
		?(ЕстьДополнительныеПараметры, "ДополнительныеПараметры", ""),
		?(ЕстьПараметрыЗапроса, ", ПараметрыЗапроса", "")
	));
	
	ЕстьТекстТелаЗапроса = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВКодЗапросаМетодDeleteБезТела(Построитель, Знач ЕстьПараметрыЗапроса, Знач ЕстьДополнительныеПараметры)
	Построитель.Добавить(СтрШаблон(
		"	.Удалить(ИдентификаторРесурса%1%2%3);",
		?(ЕстьПараметрыЗапроса ИЛИ ЕстьДополнительныеПараметры, ", , ", ""),
		?(ЕстьДополнительныеПараметры, "ДополнительныеПараметры", ""),
		?(ЕстьПараметрыЗапроса, ", ПараметрыЗапроса", "")
	));
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВКодЗапросаМетодDelete(Построитель, ЕстьТекстТелаЗапроса, Знач ЕстьПараметрыЗапроса, Знач ЕстьДополнительныеПараметры)
	ТипТелаЗапросаСписокВыбора = Элементы.ТипТелаЗапроса.СписокВыбора;
	Если ТипТелаЗапроса = ТипТелаЗапросаСписокВыбора[3].Значение Тогда // raw
		ДобавитьВКодЗапросаМетодDeleteТекст(Построитель, ЕстьТекстТелаЗапроса, ЕстьПараметрыЗапроса, ЕстьДополнительныеПараметры);
	Иначе
		ДобавитьВКодЗапросаМетодDeleteБезТела(Построитель, ЕстьПараметрыЗапроса, ЕстьДополнительныеПараметры);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВКодЗапросаМетодHead(Построитель, Знач ЕстьПараметрыЗапроса, Знач ЕстьДополнительныеПараметры)
	Построитель.Добавить(СтрШаблон(
		"	.ПолучитьЗаголовки(ИдентификаторРесурса%1%2%3);",
		?(ЕстьПараметрыЗапроса ИЛИ ЕстьДополнительныеПараметры, ", ", ""),
		?(ЕстьПараметрыЗапроса, "ПараметрыЗапроса", ""),
		?(ЕстьДополнительныеПараметры, ", ДополнительныеПараметры", "")
	));
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВКодЗапросаМетод(Построитель, ЕстьТекстТелаЗапроса, ЕстьПоляФормы, ТекстПолейФормы, ФайлыПолейФормы, Знач ЕстьПараметрыЗапроса, Знач ЕстьДополнительныеПараметры)
	Если Схема = Элементы.Схема.СписокВыбора[0].Значение Тогда // GET
		ДобавитьВКодЗапросаМетодGet(Построитель, ЕстьПараметрыЗапроса, ЕстьДополнительныеПараметры);
	ИначеЕсли Схема = Элементы.Схема.СписокВыбора[1].Значение Тогда // POST
		ДобавитьВКодЗапросаМетодPost(Построитель, ЕстьТекстТелаЗапроса, ЕстьПоляФормы, ТекстПолейФормы, ФайлыПолейФормы, ЕстьПараметрыЗапроса, ЕстьДополнительныеПараметры); 
	ИначеЕсли Схема = Элементы.Схема.СписокВыбора[2].Значение Тогда // PUT
		ДобавитьВКодЗапросаМетодPut(Построитель, ЕстьТекстТелаЗапроса, ФайлыПолейФормы, ЕстьПараметрыЗапроса, ЕстьДополнительныеПараметры);
	ИначеЕсли Схема = Элементы.Схема.СписокВыбора[3].Значение Тогда // DELETE
		ДобавитьВКодЗапросаМетодDelete(Построитель, ЕстьТекстТелаЗапроса, ЕстьПараметрыЗапроса, ЕстьДополнительныеПараметры);
	ИначеЕсли Схема = Элементы.Схема.СписокВыбора[4].Значение Тогда // HEAD
		ДобавитьВКодЗапросаМетодHead(Построитель, ЕстьПараметрыЗапроса, ЕстьДополнительныеПараметры);
	Иначе
		ВызватьИсключение СтрШаблон("Схема запроса %1 не поддерживается", Схема);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВКодЗапросаИнициализациюПолейФормы(Построитель, ТекстПолейФормы, ФайлыПолейФормы)
	Смещение = 0;
	Для Каждого ФайлПоляФормы Из ФайлыПолейФормы Цикл
		Построитель.Вставить(
			1 + Смещение,
			СтрШаблон("%1 = Новый Файл(""%2"");", ФайлПоляФормы.ИмяПеременной, ФайлПоляФормы.Путь)
		);
		
		Смещение = Смещение + 1;
	КонецЦикла;
	Если Смещение > 0 Тогда
		Построитель.Вставить(1 + Смещение, "");
	КонецЕсли;
	
	Смещение = 0;
	Для Каждого ТекстПоляФормы Из ТекстПолейФормы Цикл
		Построитель.Вставить(
			1 + Смещение,
			ИнициализацияТекстовойПеременной(ТекстПоляФормы.ИмяПеременной, ТекстПоляФормы.ЗначениеПеременной)
		);
		
		Смещение = Смещение + 1;
	КонецЦикла;
	Если Смещение > 0 Тогда
		Построитель.Вставить(1 + Смещение, "");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВКодЗапросаИнициализациюКонфигурации(Построитель, Знач ЕстьПараметрыЗапроса, Знач ЕстьДополнительныеПараметры, Знач ТребуетсяИмяФайлаТелаОтвета, Знач ЕстьТекстТелаЗапроса, Знач ЕстьПоляФормы)
	Если ЕстьПоляФормы Тогда
		Построитель.Вставить(1, "ПоляФормы = КлиентHTTPКлиентСервер.НовыеПоляФормы();");
	КонецЕсли;
	
	Если ЕстьТекстТелаЗапроса Тогда
		Построитель.Вставить(1, ИнициализацияТекстовойПеременной("ТелоЗапросаТекст", ТелоЗапросаТекст));
	КонецЕсли;
	
	Если ЕстьДополнительныеПараметры Тогда
		Построитель.Вставить(1, "ДополнительныеПараметры = КлиентHTTPКлиентСервер.НовыеДополнительныеПараметры();");
	КонецЕсли;
	
	Если ЕстьПараметрыЗапроса Тогда
		Построитель.Вставить(1, "ПараметрыЗапроса = КлиентHTTPКлиентСервер.НовыеПараметрыЗапроса();");
	КонецЕсли;
	
	Если ТребуетсяИмяФайлаТелаОтвета Тогда
		Построитель.Вставить(1, "ИмяФайлаТелаОтвета = ПолучитьИмяВременногоФайла(""dat"");");
	КонецЕсли;
	
	Построитель.Вставить(
		1 + ТребуетсяИмяФайлаТелаОтвета + ЕстьПараметрыЗапроса + ЕстьДополнительныеПараметры + ЕстьПоляФормы + ЕстьТекстТелаЗапроса,
		""
	);
КонецПроцедуры

&НаКлиенте
Функция КодЗапросаКонсоли()
	ЧастиКода = Новый Массив;
	ЧастиСтрокиКода = Новый Массив;
	
	ЕстьДополнительныеПараметры = Ложь;
	ЕстьПараметрыЗапроса = Ложь;
	ЕстьПоляФормы = Ложь;
	ЕстьТекстТелаЗапроса = Ложь;
	ТребуетсяИмяФайлаТелаОтвета = Ложь;
	ТекстПолейФормы = Новый Массив;
	ФайлыПолейФормы = Новый Массив;
	
	ДобавитьВКодЗапросаИдентификаторРесурса(ЧастиКода);
	
	// Начало текучего интерфейса
	ЧастиКода.Добавить("Ответ = КлиентHTTPКлиентСервер");
	
	ДобавитьВКодЗапросаИспользованиеСессии(ЧастиКода, ЕстьДополнительныеПараметры);
	ДобавитьВКодЗапросаПараметры(ЧастиКода, ЕстьПараметрыЗапроса);
	ДобавитьВКодЗапросаЗаголовки(ЧастиКода, ЕстьДополнительныеПараметры);
	ДобавитьВКодЗапросаСжатиеОтвета(ЧастиКода, ЕстьДополнительныеПараметры);
	ДобавитьВКодЗапросаАвторизацию(ЧастиКода);
	ДобавитьВКодЗапросаФайлТелаОтвета(ЧастиКода, ЕстьДополнительныеПараметры, ТребуетсяИмяФайлаТелаОтвета);
	ДобавитьВКодЗапросаМетод(ЧастиКода, ЕстьТекстТелаЗапроса, ЕстьПоляФормы, ТекстПолейФормы, ФайлыПолейФормы, ЕстьПараметрыЗапроса, ЕстьДополнительныеПараметры);
	ДобавитьВКодЗапросаИнициализациюПолейФормы(ЧастиКода, ТекстПолейФормы, ФайлыПолейФормы);
	ДобавитьВКодЗапросаИнициализациюКонфигурации(ЧастиКода, ЕстьПараметрыЗапроса, ЕстьДополнительныеПараметры, ТребуетсяИмяФайлаТелаОтвета, ЕстьТекстТелаЗапроса, ЕстьПоляФормы);
	
	Возврат СтрСоединить(ЧастиКода, Символы.ПС);
КонецФункции

&НаКлиенте
Функция ИнициализацияТекстовойПеременной(Знач ИмяПеременной, Знач ЗначениеПеременной)
	Возврат СтрШаблон(
		"%1 = %2""%3"";",
		ИмяПеременной,
		?(
			СтрНайти(ЗначениеПеременной, Символы.ПС) > 0,
			"
			|	",
			""
		),
		СтрЗаменить(СтрЗаменить(ЗначениеПеременной, """", """"""), Символы.ПС, Символы.ПС + "	|")
	);
КонецФункции

&НаКлиенте
Процедура ПрочитатьФайлИмпорта(Знач ИмяФайлаИмпорта, Отказ, ОписаниеОшибки)
	ФайлИмпорта = Новый Файл(ИмяФайлаИмпорта);
	Если НЕ ФайлИмпорта.Существует() Тогда
		Отказ = Истина;
		ОписаниеОшибки = "отсутствует файл " + ИмяФайлаИмпорта;
		Возврат;
	КонецЕсли;
	
	ОбъектИмпорта = ОбъектФайлаИмпорта(ФайлИмпорта, Отказ, ОписаниеОшибки);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВалидацияОбъектаИмпорта(ОбъектИмпорта, Отказ, ОписаниеОшибки);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ИмпортироватьДанныеPostman(ОбъектИмпорта);
КонецПроцедуры

&НаКлиенте
Функция ТекстФайлаИмпорта(Знач ФайлИмпорта, Отказ, ОписаниеОшибки)
	Чтение = Новый ТекстовыйДокумент;
	Чтение.Прочитать(ФайлИмпорта.ПолноеИмя, "UTF-8");
	
	Возврат Чтение.ПолучитьТекст();
КонецФункции

&НаКлиенте
Функция ОбъектФайлаИмпорта(Знач ФайлИмпорта, Отказ, ОписаниеОшибки)
	Перем фРезультат;
	
	ТекстJSON = ТекстФайлаИмпорта(ФайлИмпорта, Отказ, ОписаниеОшибки);
	Если Отказ Тогда
		Возврат фРезультат;
	КонецЕсли;
	
	Чтение = Новый ЧтениеJSON;
	Чтение.УстановитьСтроку(ТекстJSON);
	
	Попытка
		фРезультат = ПрочитатьJSON(Чтение, Истина);
		Чтение.Закрыть();
	Исключение
		Отказ = Истина;
		ОписаниеОшибки = ОписаниеОшибки();
	КонецПопытки;
	
	Возврат фРезультат;
КонецФункции

&НаКлиенте
Процедура ВалидацияОбъектаИмпорта(Знач ОбъектИмпорта, Отказ, ОписаниеОшибки)
	ТипМассив = Тип("Массив");
	ТипСоответствие = Тип("Соответствие");
	ТипСтрока = Тип("Строка");
	
	Если ТипЗнч(ОбъектИмпорта) <> ТипСоответствие Тогда
		Отказ = Истина;
		ОписаниеОшибки = СтрШаблон("неожиданный тип объекта импорта (%1)", ТипЗнч(ОбъектИмпорта));
		Возврат;
	КонецЕсли;
	
	ОписаниеОбъектаИмпорта = ОбъектИмпорта["info"];
	Если ОписаниеОбъектаИмпорта = Неопределено Тогда
		Отказ = Истина;
		ОписаниеОшибки = "у объекта импорта отсутствует поле ""info""";
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ОписаниеОбъектаИмпорта) <> ТипСоответствие Тогда
		Отказ = Истина;
		ОписаниеОшибки = СтрШаблон("неожиданный тип поля ""info"" объекта импорта (%1)", ТипЗнч(ОписаниеОбъектаИмпорта));
		Возврат;
	КонецЕсли;
	
	Если ОписаниеОбъектаИмпорта["schema"] <> "https://schema.getpostman.com/json/collection/v2.1.0/collection.json" Тогда
		Отказ = Истина;
		ОписаниеОшибки = "неожиданная версия схемы объекта импорта (ожидается 2.1.0)";
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИмпортироватьДанныеPostman(Знач ОбъектИмпорта)
	ЗапросыИмпорта = Новый Массив;
	
	Для Каждого ЭлементИмпорта Из ОбъектИмпорта["item"] Цикл
		СобратьЭлементыИмпортаPostman(ЭлементИмпорта, ЗапросыИмпорта);
	КонецЦикла;
	
	Оповещение = Новый ОписаниеОповещения(
		"ВыборЭлементаИмпортаPostmanЗавершение",
		ЭтотОбъект,
		Новый Структура("ЗапросыИмпорта, ПеременныеИмпорта", ЗапросыИмпорта, ОбъектИмпорта["variable"])
	);
	
	ОткрытьФорму(
		"Обработка.КонсольКлиентаHTTP.Форма.ЭлементыИмпортаPostman",
		Новый Структура("ЭлементыИмпорта", ЗапросыИмпорта),
		ЭтотОбъект, , , ,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
КонецПроцедуры

&НаКлиенте
Процедура СобратьЭлементыИмпортаPostman(Знач ОбъектИмпорта, ЗапросыИмпорта)
	Если ОбъектИмпорта["item"] <> Неопределено Тогда
		Для Каждого ЭлементИмпорта Из ОбъектИмпорта["item"] Цикл
			СобратьЭлементыИмпортаPostman(ЭлементИмпорта, ЗапросыИмпорта);
		КонецЦикла;
	ИначеЕсли ОбъектИмпорта["request"] <> Неопределено Тогда
		ЗапросыИмпорта.Добавить(ОбъектИмпорта);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция СхемаИмпортаPostman(Знач Запрос, Отказ, ОписаниеОшибки)
	фРезультат = Элементы.Схема.СписокВыбора.НайтиПоЗначению(Запрос["method"]);
	Если фРезультат = Неопределено Тогда
		Отказ = Истина;
		ОписаниеОшибки = СтрШаблон("неожиданный тип запроса ""%1""", Запрос["method"]);
	КонецЕсли;
	
	Возврат фРезультат;
КонецФункции

&НаКлиенте
Функция ИдентификаторРесурсаИмпортаPostman(Знач Запрос, Знач ЗначенияШаблонов)
	ИдентификаторРесурсаИмпорт = ЗначениеПеременнойИмпортаPostman(Запрос["url"]["raw"], ЗначенияШаблонов);
	
	Возврат ?(ПустаяСтрока(ИдентификаторРесурсаИмпорт), "http://", ИдентификаторРесурсаИмпорт);
КонецФункции

&НаКлиенте
Функция АвторизацияИмпортаPostman(Знач Запрос, Знач ЗначенияШаблонов)
	Перем НайденныйТипАвторизации;
	
	фРезультат = Новый Структура("Тип, Пользователь, Пароль, Токен", Элементы.ТипАвторизации.СписокВыбора[0], "", "", "");
	
	ОбъектАвторизации = Запрос["auth"];
	Если ОбъектАвторизации = Неопределено Тогда
		Возврат фРезультат;
	КонецЕсли;
	
	ТипАвторизацииИмпорт = ВРег(ОбъектАвторизации["type"]);
	Для Каждого ЭлементТиповАвторизации Из Элементы.ТипАвторизации.СписокВыбора Цикл
		Если ВРег(ЭлементТиповАвторизации.Значение) = ТипАвторизацииИмпорт Тогда
			НайденныйТипАвторизации = ЭлементТиповАвторизации;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НайденныйТипАвторизации = Неопределено Тогда
		Возврат фРезультат;
	КонецЕсли;
	
	фРезультат.Тип = НайденныйТипАвторизации;
	
	Имена = СтрРазделить("Пароль,Пользователь,Токен", ",");
	ИменаИмпорт = СтрРазделить("password,username,token", ",");
	ПараметрыАвторизации = Новый Соответствие;
	Для я = 0 По Имена.ВГраница() Цикл
		ПараметрыАвторизации.Вставить(ИменаИмпорт[я], Имена[я]);
	КонецЦикла;
	
	ПараметрыАвторизацииИмпорт = ОбъектАвторизации[ОбъектАвторизации["type"]];
	Для Каждого ПараметрАвторизацииИмпорт Из ПараметрыАвторизацииИмпорт Цикл
		ИмяПараметраАвторизации = ПараметрыАвторизации.Получить(НРег(ПараметрАвторизацииИмпорт["key"]));
		Если ИмяПараметраАвторизации <> Неопределено Тогда
			фРезультат[ИмяПараметраАвторизации] = ЗначениеПеременнойИмпортаPostman(ПараметрАвторизацииИмпорт["value"], ЗначенияШаблонов);
		КонецЕсли;
	КонецЦикла;
	
	Возврат фРезультат;
КонецФункции

&НаКлиенте
Функция ЗаголовкиИмпортаPostman(Знач Запрос, Знач ЗначенияШаблонов)
	фРезультат = Новый Массив;
	
	Для Каждого ЭлементЗаголовок Из Запрос["header"] Цикл
		фРезультат.Добавить(Новый Структура(
			"Активно, Ключ, Значение",
			Истина,
			ЗначениеПеременнойИмпортаPostman(ЭлементЗаголовок["key"],   ЗначенияШаблонов),
			ЗначениеПеременнойИмпортаPostman(ЭлементЗаголовок["value"], ЗначенияШаблонов)
		));
	КонецЦикла;
	
	Возврат фРезультат;
КонецФункции

&НаКлиенте
Функция ТелоЗапросаИмпортаPostman(Знач Запрос, Знач ЗначенияШаблонов)
	фРезультат = Новый Структура("Тип, Значение", Элементы.ТипТелаЗапроса.СписокВыбора[0]);
	
	ОбъектТелаЗапроса = Запрос["body"];
	Если ОбъектТелаЗапроса = Неопределено Тогда
		Возврат фРезультат;
	КонецЕсли;
	
	ТипОбъектаТелаЗапроса = ОбъектТелаЗапроса["mode"];
	Если ТипОбъектаТелаЗапроса = "formdata" Тогда
		фРезультат.Тип = Элементы.ТипТелаЗапроса.СписокВыбора[1];
		ЗначениеТелаЗапросаИмпорта = Новый Массив;
		
		Для Каждого ЭлементТелаЗапроса Из ОбъектТелаЗапроса[ТипОбъектаТелаЗапроса] Цикл
			ЭлементТелаЗапросаИмпорта = Новый Структура(
				"Активно, Ключ, Тип, Значение",
				Истина, // Активно
				ЗначениеПеременнойИмпортаPostman(ЭлементТелаЗапроса["key"], ЗначенияШаблонов) // Ключ
			);
			Если ЭлементТелаЗапроса["type"] = "file" Тогда
				ЭлементТелаЗапросаИмпорта.Тип = Элементы.ДанныеФормыТип.СписокВыбора[1];
				ЭлементТелаЗапросаИмпорта.Значение = ОбработанныйПутьКФайлу(ЗначениеПеременнойИмпортаPostman(ЭлементТелаЗапроса["src"], ЗначенияШаблонов));
			Иначе // text
				ЭлементТелаЗапросаИмпорта.Тип = Элементы.ДанныеФормыТип.СписокВыбора[0];
				ЭлементТелаЗапросаИмпорта.Значение = ЗначениеПеременнойИмпортаPostman(ЭлементТелаЗапроса["value"], ЗначенияШаблонов);
			КонецЕсли;
			
			ЗначениеТелаЗапросаИмпорта.Добавить(ЭлементТелаЗапросаИмпорта);
		КонецЦикла;
		
		фРезультат.Значение = ЗначениеТелаЗапросаИмпорта;
	ИначеЕсли ТипОбъектаТелаЗапроса = "urlencoded" Тогда
		фРезультат.Тип = Элементы.ТипТелаЗапроса.СписокВыбора[2];
		ЗначениеТелаЗапросаИмпорта = Новый Массив;
		
		Для Каждого ЭлементТелаЗапроса Из ОбъектТелаЗапроса[ТипОбъектаТелаЗапроса] Цикл
			ЭлементТелаЗапросаИмпорта = Новый Структура(
				"Активно, Ключ, Значение",
				Истина, // Активно
				ЗначениеПеременнойИмпортаPostman(ЭлементТелаЗапроса["key"], ЗначенияШаблонов), // Ключ
				ЗначениеПеременнойИмпортаPostman(ЭлементТелаЗапроса["value"], ЗначенияШаблонов) // Значение
			);
			
			ЗначениеТелаЗапросаИмпорта.Добавить(ЭлементТелаЗапросаИмпорта);
		КонецЦикла;
		
		фРезультат.Значение = ЗначениеТелаЗапросаИмпорта;
	ИначеЕсли ТипОбъектаТелаЗапроса = "raw" Тогда
		фРезультат.Тип = Элементы.ТипТелаЗапроса.СписокВыбора[3];
		фРезультат.Значение = ЗначениеПеременнойИмпортаPostman(ОбъектТелаЗапроса[ТипОбъектаТелаЗапроса], ЗначенияШаблонов);
	ИначеЕсли ТипОбъектаТелаЗапроса = "file" Тогда
		фРезультат.Тип = Элементы.ТипТелаЗапроса.СписокВыбора[4];
		фРезультат.Значение = ОбработанныйПутьКФайлу(ЗначениеПеременнойИмпортаPostman(ОбъектТелаЗапроса[ТипОбъектаТелаЗапроса]["src"], ЗначенияШаблонов));
	КонецЕсли;
	
	Возврат фРезультат;
КонецФункции

&НаКлиенте
Процедура ИмпортироватьВыбранныйЭлементИмпортаPostman(Знач ОбъектИмпорта, Знач ПеременныеИмпорта, Отказ, ОписаниеОшибки)
	ЗначенияШаблонов = Новый Соответствие;
	Если ПеременныеИмпорта <> Неопределено Тогда
		Для Каждого ПеременнаяИмпорта Из ПеременныеИмпорта Цикл
			ЗначенияШаблонов.Вставить(ПеременнаяИмпорта["key"], ПеременнаяИмпорта["value"]);
		КонецЦикла;
	КонецЕсли;
	
	Запрос = ОбъектИмпорта["request"];
	
	СхемаИмпорт = СхемаИмпортаPostman(Запрос, Отказ, ОписаниеОшибки);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	АвторизацияИмпорт = АвторизацияИмпортаPostman(Запрос, ЗначенияШаблонов);
	ТелоЗапросаИмпорт = ТелоЗапросаИмпортаPostman(Запрос, ЗначенияШаблонов);
	
	Схема = СхемаИмпорт;
	ИдентификаторРесурса = ИдентификаторРесурсаИмпортаPostman(Запрос, ЗначенияШаблонов);
	
	ТипАвторизации = АвторизацияИмпорт.Тип;
	Если ТипАвторизации <> Элементы.ТипАвторизации.СписокВыбора[0] Тогда
		ПользовательАвторизации = АвторизацияИмпорт.Пользователь;
		ПарольАвторизации = АвторизацияИмпорт.Пароль;
		ТокенАвторизации = АвторизацияИмпорт.Токен;
	КонецЕсли;
	
	ЗаголовкиЗапроса.Очистить();
	Для Каждого ЗаголовокИмпорт Из ЗаголовкиИмпортаPostman(Запрос, ЗначенияШаблонов) Цикл
		ЗаполнитьЗначенияСвойств(ЗаголовкиЗапроса.Добавить(), ЗаголовокИмпорт);
	КонецЦикла;
	
	ТипТелаЗапроса = ТелоЗапросаИмпорт.Тип.Значение;
	Если ТелоЗапросаИмпорт.Тип = Элементы.ТипТелаЗапроса.СписокВыбора[1] Тогда // form
		ТелоЗапросаДанныеФормы.Очистить();
		Для Каждого ЭлементТелаЗапросаИмпорт Из ТелоЗапросаИмпорт.Значение Цикл
			ЗаполнитьЗначенияСвойств(ТелоЗапросаДанныеФормы.Добавить(), ЭлементТелаЗапросаИмпорт);
		КонецЦикла;
	ИначеЕсли ТелоЗапросаИмпорт.Тип = Элементы.ТипТелаЗапроса.СписокВыбора[2] Тогда // x-www-form-urlencoded
		ТелоЗапросаДанныеHTMLФормы.Очистить();
		Для Каждого ЭлементТелаЗапросаИмпорт Из ТелоЗапросаИмпорт.Значение Цикл
			ЗаполнитьЗначенияСвойств(ТелоЗапросаДанныеHTMLФормы.Добавить(), ЭлементТелаЗапросаИмпорт);
		КонецЦикла;
	ИначеЕсли ТелоЗапросаИмпорт.Тип = Элементы.ТипТелаЗапроса.СписокВыбора[3] Тогда // raw
		ТелоЗапросаТекст = ТелоЗапросаИмпорт.Значение;
	ИначеЕсли ТелоЗапросаИмпорт.Тип = Элементы.ТипТелаЗапроса.СписокВыбора[4] Тогда // file
		ТелоЗапросаФайл = ТелоЗапросаИмпорт.Значение;
	КонецЕсли;
	
	ИдентификаторРесурсаПриИзменении(Неопределено);
	ТипАвторизацииПриИзменении(Неопределено);
	ТипТелаЗапросаПриИзменении(Неопределено);
	
	Элементы.ГруппаРазделы.ТекущаяСтраница = Элементы.РазделЗапрос;
КонецПроцедуры

&НаКлиенте
Функция ЗначениеПеременнойИмпортаPostman(Знач ОбрабатываемаяСтрока, Знач ЗначенияШаблонов)
	фРезультат = ОбрабатываемаяСтрока;
	
	ПозицияНачалаШаблона = СтрНайти(фРезультат, "{{");
	Пока ПозицияНачалаШаблона > 0 Цикл
		ПозицияОкончанияШаблона = СтрНайти(фРезультат, "}}", , ПозицияНачалаШаблона);
		Если ПозицияОкончанияШаблона = 0 Тогда
			Прервать;
		КонецЕсли;
		
		ИмяШаблона = Сред(фРезультат, ПозицияНачалаШаблона + 2, ПозицияОкончанияШаблона - ПозицияНачалаШаблона - 2);
		ЗначениеШаблона = ЗначенияШаблонов.Получить(ИмяШаблона);
		Если ЗначениеЗаполнено(ЗначениеШаблона) Тогда
			фРезультат = СтрЗаменить(фРезультат, "{{" + ИмяШаблона + "}}", ЗначениеШаблона);
		КонецЕсли;
		
		ПозицияНачалаШаблона = СтрНайти(фРезультат, "{{", , ПозицияНачалаШаблона + 1);
	КонецЦикла;
	
	Возврат фРезультат;
КонецФункции

&НаКлиенте
Функция ОпцииКомандыCurl()
	фРезультат = Новый Соответствие;
	фРезультат.Вставить("-X", Истина);
	фРезультат.Вставить("--request", Истина);
	фРезультат.Вставить("-d", Истина);
	фРезультат.Вставить("--data", Истина);
	фРезультат.Вставить("--data-ascii", Истина);
	фРезультат.Вставить("--data-binary", Истина);
	фРезультат.Вставить("--data-raw", Истина);
	фРезультат.Вставить("--data-urlencode", Истина);
	фРезультат.Вставить("-F", Истина);
	фРезультат.Вставить("--form", Истина);
	фРезультат.Вставить("--form-string", Истина);
	фРезультат.Вставить("-G", Ложь);
	фРезультат.Вставить("--get", Ложь);
	фРезультат.Вставить("-o", Истина);
	фРезультат.Вставить("--output", Истина);
	фРезультат.Вставить("-O", Ложь);
	фРезультат.Вставить("--remote-name", Ложь);
	фРезультат.Вставить("-I", Ложь);
	фРезультат.Вставить("--head", Ложь);
	фРезультат.Вставить("-H", Истина);
	фРезультат.Вставить("--header", Истина);
	фРезультат.Вставить("-u", Истина);
	фРезультат.Вставить("--user", Истина);
	фРезультат.Вставить("--basic", Ложь);
	фРезультат.Вставить("--digest", Ложь);
	фРезультат.Вставить("--ntlm", Ложь);
	фРезультат.Вставить("--ntlm-wb", Ложь);
	фРезультат.Вставить("--oauth2-bearer", Истина);
	фРезультат.Вставить("--compressed", Ложь);
	фРезультат.Вставить("--compressed-ssh", Ложь);
	фРезультат.Вставить("--tr-encoding", Ложь);
	фРезультат.Вставить("-L", Ложь);
	фРезультат.Вставить("--location", Ложь);
	фРезультат.Вставить("--location-trusted", Ложь);
	фРезультат.Вставить("--max-redirs", Истина);
	фРезультат.Вставить("-:", Ложь);
	фРезультат.Вставить("--next", Ложь);
	фРезультат.Вставить("--path-as-is", Ложь);
	фРезультат.Вставить("-k", Ложь);
	фРезультат.Вставить("--insecure", Ложь);
	
	Возврат фРезультат;
КонецФункции

&НаКлиенте
Функция НоваяОпцияCurl(Знач Имя, Знач Значение = Неопределено)
	Возврат Новый Структура("Имя, Значение", Имя, Значение);
КонецФункции

&НаКлиенте
Функция ТекстБезКавычек(Знач Текст, Знач ОткрывающийСимвол)
	Если ОткрывающийСимвол = "" Тогда
		Возврат Текст;
	КонецЕсли;
	
	Если СтрНачинаетсяС(Текст, ОткрывающийСимвол) Тогда
		Текст = Сред(Текст, 2);
	КонецЕсли;
	Если СтрЗаканчиваетсяНа(Текст, ОткрывающийСимвол) Тогда
		Текст = Лев(Текст, СтрДлина(Текст) - 1);
	КонецЕсли;
	
	Возврат Текст;
КонецФункции

&НаСервереБезКонтекста
Функция КодированныйТекстВURL(Знач Текст)
	Возврат КодироватьСтроку(Текст, СпособКодированияСтроки.КодировкаURL);
КонецФункции

&НаКлиенте
Процедура РазделитьСложнуюОпциюCurl(Токен, ЧастиКоманды, ДопустимыеОпции, Отказ, ОписаниеОшибки)
	Для я = 3 По СтрДлина(Токен) Цикл
		ЧастьОпции = "-" + Сред(Токен, я, 1);
		Проверка = ДопустимыеОпции.Получить(ЧастьОпции);
		Если Проверка = Неопределено ИЛИ Проверка = Истина Тогда
			Отказ = Истина;
			ОписаниеОшибки = "неожиданный флаг " + Токен;
			Возврат;
		КонецЕсли;
		
		ЧастиКоманды.Добавить(ЧастьОпции);
	КонецЦикла;
	
	Токен = Лев(Токен, 2);
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОпциюКомандыCurl(Опции, ЧастиКоманды, ЧастьКоманды, ДопустимыеОпции, Опция, СобиратьТокен, ЧастиТокена, Отказ, ОписаниеОшибки)
	Если Опция <> Неопределено Тогда
		Если СобиратьТокен И ЧастиТокена.Количество() = 0 Тогда
			Отказ = Истина;
			ОписаниеОшибки = "отсутствует значение для флага " + Опция.Имя;
			Возврат;
		КонецЕсли;
		
		Опции.Добавить(Опция);
	КонецЕсли;
	
	Токен = ЧастьКоманды;
	Если СтрНачинаетсяС(Токен, "--") Тогда
		Токен = НРег(Токен);
	ИначеЕсли СтрДлина(Токен) > 2 Тогда
		РазделитьСложнуюОпциюCurl(Токен, ЧастиКоманды, ДопустимыеОпции, Отказ, ОписаниеОшибки);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СобиратьТокен = ДопустимыеОпции.Получить(Токен);
	Если СобиратьТокен = Неопределено Тогда
		Отказ = Истина;
		ОписаниеОшибки = "неожиданный флаг " + Токен;
		Возврат;
	КонецЕсли;
	
	Если СобиратьТокен Тогда
		Опция = НоваяОпцияCurl(Токен);
	Иначе
		Опции.Добавить(НоваяОпцияCurl(Токен));
		Опция = Неопределено;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЧастьКомандыCurl(ЧастиКоманды, ЧастьКоманды, Опция, СобиратьТокен, ЧастиТокена, ОткрывающийСимвол, Отказ, ОписаниеОшибки)
	Если ОткрывающийСимвол = "" Тогда
		ОткрывающийСимвол = ?(
			СтрНачинаетсяС(ЧастьКоманды, """") ИЛИ СтрНачинаетсяС(ЧастьКоманды, "'"),
			Лев(ЧастьКоманды, 1),
			""
		);
	КонецЕсли;
	
	ЧастиТокена.Добавить(ЧастьКоманды);
	
	Если ОткрывающийСимвол = "" ИЛИ СтрЗаканчиваетсяНа(ЧастьКоманды, ОткрывающийСимвол) Тогда
		Если Опция = Неопределено Тогда
			Если ЧастиКоманды.ИдентификаторРесурса <> "" Тогда
				Отказ = Истина;
				ОписаниеОшибки = "команда с множественными запросами не допускается";
				Возврат;
			КонецЕсли;
			
			ЧастиКоманды.ИдентификаторРесурса = ТекстБезКавычек(СтрСоединить(ЧастиТокена), ОткрывающийСимвол);
		Иначе
			Опция.Значение = ТекстБезКавычек(СтрСоединить(ЧастиТокена), ОткрывающийСимвол);
			ЧастиКоманды.Опции.Добавить(Опция);
			Опция = Неопределено;
		КонецЕсли;
		
		ЧастиТокена = Новый Массив;
		СобиратьТокен = Ложь;
		ОткрывающийСимвол = "";
	Иначе
		ЧастиТокена.Добавить(" ");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ЧастиКомандыCurl(Знач СтрокаКоманды, Отказ, ОписаниеОшибки)
	фРезультат = Новый Структура("ИдентификаторРесурса, Опции", "", Новый Массив);
	
	ОткрывающийСимвол = "";
	ИдентификаторРесурсаИмпорт = "";
	СобиратьТокен = Ложь;
	ЧастиТокена = Новый Массив;
	Опция = Неопределено;
	ДопустимыеОпции = ОпцииКомандыCurl();
	
	ЧастиКоманды = СтрРазделить(СокрЛ(Сред(СтрокаКоманды, 6)), " ", Истина);
	Для Каждого ЧастьКоманды Из ЧастиКоманды Цикл
		Если СтрДлина(ЧастьКоманды) = 0 Тогда // это пробел
			Если СобиратьТокен Тогда
				ЧастиТокена.Добавить(" ");
			КонецЕсли;
			
			Продолжить;
		КонецЕсли;
		
		Если СтрНачинаетсяС(ЧастьКоманды, "-") И НЕ СобиратьТокен Тогда
			ОбработатьОпциюКомандыCurl(фРезультат.Опции, ЧастиКоманды, ЧастьКоманды, ДопустимыеОпции, Опция, СобиратьТокен, ЧастиТокена, Отказ, ОписаниеОшибки);
			Если Отказ Тогда
				Возврат фРезультат;
			КонецЕсли;
			
			Продолжить;
		КонецЕсли;
		
		ОбработатьЧастьКомандыCurl(фРезультат, ЧастьКоманды, Опция, СобиратьТокен, ЧастиТокена, ОткрывающийСимвол, Отказ, ОписаниеОшибки);
		Если Отказ Тогда
			Возврат фРезультат;
		КонецЕсли;
	КонецЦикла;
	
	Возврат фРезультат;
КонецФункции

&НаКлиенте
Функция НовыйОбъектДанныхCurl()
	Возврат Новый Структура(
		"Схема, ТолькоЗаголовки, Заголовки, ПоляФормы, ПоляHTMLФормы, ПоляКакПараметры, Авторизация, ИспользоватьРедиректы, КоличествоРедиректов, ПоддержкаСжатогоОтвета, ИмяФайлаТелаОтвета, НормализоватьИдентификаторРесурса",
		Неопределено,
		Ложь,
		Новый Массив,
		Новый Массив,
		Новый Массив,
		Ложь,
		Новый Структура("Тип, Пользователь, Пароль, Токен", Элементы.ТипАвторизации.СписокВыбора[0], "", "", ""),
		Ложь,
		Неопределено,
		Ложь,
		Неопределено,
		Истина
	);
КонецФункции

&НаКлиенте
Функция ЭлементТелаЗапроса(Знач Ключ, Знач Значение, Знач ТипПоля = Неопределено)
	Возврат Новый Структура(
		"Активно, Ключ, Тип, Значение",
		Истина,  // Активно
		Ключ,    // Ключ
		ТипПоля, // Тип
		Значение // Значение
	);
КонецФункции

&НаКлиенте
Процедура ОбработатьСхемуCurl(ДанныеИмпорта, Знач Опция, Отказ, ОписаниеОшибки)
	НайденнаяСхема = Элементы.Схема.СписокВыбора.НайтиПоЗначению(Опция.Значение);
	Если НайденнаяСхема = Неопределено Тогда
		Отказ = Истина;
		ОписаниеОшибки = СтрШаблон("неожиданный тип запроса ""%1""", Опция.Значение);
		Возврат;
	КонецЕсли;
	
	ДанныеИмпорта.Схема = НайденнаяСхема;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПолеHTMLФормыCurl(ДанныеИмпорта, Знач Опция)
	ЗначениеОпции = Опция.Значение;
	Если НЕ ЗначениеЗаполнено(ЗначениеОпции) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Поле Из СтрРазделить(ЗначениеОпции, "&") Цикл
		Если СтрНачинаетсяС(Поле, "@") Тогда
			ТипПоля = 1;
			Ключ = Сред(Поле, 2);
			Значение = Неопределено;
		Иначе
			ТипПоля = 0;
			ЧастиПоля = СтрРазделить(Поле, "=");
			Ключ = ЧастиПоля[0];
			
			ЧастиПоля.Удалить(0);
			
			Значение = ?(ЧастиПоля.Количество() = 0, Неопределено, СтрСоединить(ЧастиПоля, "="));
		КонецЕсли;
		
		ДанныеИмпорта.ПоляHTMLФормы.Добавить(
			ЭлементТелаЗапроса(Ключ, Значение, ТипПоля)
		);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьТекстовоеПолеHTMLФормыCurl(ДанныеИмпорта, Знач Опция)
	ЗначениеОпции = Опция.Значение;
	Если НЕ ЗначениеЗаполнено(ЗначениеОпции) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Поле Из СтрРазделить(ЗначениеОпции, "&") Цикл
		ЧастиПоля = СтрРазделить(Поле, "=");
		Ключ = ЧастиПоля[0];
		
		ЧастиПоля.Удалить(0);
		
		Значение = ?(ЧастиПоля.Количество() = 0, Неопределено, СтрСоединить(ЧастиПоля, "="));
		
		ДанныеИмпорта.ПоляHTMLФормы.Добавить(
			ЭлементТелаЗапроса(Ключ, Значение, 0)
		);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьURLПолеHTMLФормыCurl(ДанныеИмпорта, Знач Опция)
	ЗначениеОпции = Опция.Значение;
	Если НЕ ЗначениеЗаполнено(ЗначениеОпции) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрНачинаетсяС(ЗначениеОпции, "@") Тогда
		Ключ = Сред(ЗначениеОпции, 2);
		Значение = Неопределено;
		ТипПоля = 1;
	ИначеЕсли СтрНачинаетсяС(ЗначениеОпции, "=") Тогда
		Ключ = КодированныйТекстВURL(Сред(ЗначениеОпции, 2));
		Значение = Неопределено;
		ТипПоля = 0;
	Иначе
		ЧастиПоля = СтрРазделить(ЗначениеОпции, "=");
		Ключ = ЧастиПоля[0];
		
		ЧастиПоля.Удалить(0);
		Если ЧастиПоля.Количество() = 0 Тогда
			Значение = Неопределено;
		Иначе
			Значение = СтрСоединить(ЧастиПоля, "=");
			Если СтрНачинаетсяС(Значение, "@") Тогда
				Значение = Сред(Значение, 2);
			КонецЕсли;
			Значение = КодированныйТекстВURL(Значение);
		КонецЕсли;
		ТипПоля = 0;
	КонецЕсли;
	
	ДанныеИмпорта.ПоляHTMLФормы.Добавить(
		ЭлементТелаЗапроса(Ключ, Значение, ТипПоля)
	);
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПолеФормыCurl(ДанныеИмпорта, Знач Опция, Отказ, ОписаниеОшибки)
	ЗначениеОпции = Опция.Значение;
	Если НЕ ЗначениеЗаполнено(ЗначениеОпции) Тогда
		Возврат;
	КонецЕсли;
	
	ЧастиПоля = СтрРазделить(ЗначениеОпции, "=");
	Ключ = ЧастиПоля[0];
	
	ЧастиПоля.Удалить(0);
	Если ЧастиПоля.Количество() = 0 Тогда
		Отказ = Истина;
		ОписаниеОшибки = СтрШаблон("неправильное использование опции ""%1""", Опция.Имя);
		Возврат;
	КонецЕсли;
	
	Значение = СтрСоединить(ЧастиПоля, "=");
	ИндексТипаПоля = ?(СтрНачинаетсяС(Значение, "@"), 1, 0);
	Если ИндексТипаПоля = 1 Тогда
		Значение = Сред(Значение, 2);
	КонецЕсли;
	
	ДанныеИмпорта.ПоляФормы.Добавить(
		ЭлементТелаЗапроса(Ключ, Значение, Элементы.ДанныеФормыТип.СписокВыбора[ИндексТипаПоля])
	);
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьТекстовоеПолеФормыCurl(ДанныеИмпорта, Знач Опция, Отказ, ОписаниеОшибки)
	ЗначениеОпции = Опция.Значение;
	Если НЕ ЗначениеЗаполнено(ЗначениеОпции) Тогда
		Возврат;
	КонецЕсли;
	
	ИндексТипаПоля = 0;
	ЧастиПоля = СтрРазделить(ЗначениеОпции, "=");
	Ключ = ЧастиПоля[0];
	
	ЧастиПоля.Удалить(0);
	Если ЧастиПоля.Количество() = 0 Тогда
		Отказ = Истина;
		ОписаниеОшибки = СтрШаблон("неправильное использование опции ""%1""", Опция.Имя);
		Возврат;
	КонецЕсли;
	
	Значение = СтрСоединить(ЧастиПоля, "=");
	
	ДанныеИмпорта.ПоляФормы.Добавить(
		ЭлементТелаЗапроса(Ключ, Значение, Элементы.ДанныеФормыТип.СписокВыбора[ИндексТипаПоля])
	);
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЗаголовокCurl(ДанныеИмпорта, Знач Опция)
	ЗначениеОпции = Опция.Значение;
	Если НЕ ЗначениеЗаполнено(ЗначениеОпции) Тогда
		Возврат;
	КонецЕсли;
	
	ЧастиПоля = СтрРазделить(ЗначениеОпции, "=");
	Ключ = ЧастиПоля[0];
	
	ЧастиПоля.Удалить(0);
	
	Значение = СтрСоединить(ЧастиПоля, "=");
	
	ДанныеИмпорта.Заголовки.Добавить(
		ЭлементТелаЗапроса(Ключ, Значение)
	);
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДанныеАвторизацииCurl(ДанныеИмпорта, Знач Опция)
	ЗначениеОпции = Опция.Значение;
	Если НЕ ЗначениеЗаполнено(ЗначениеОпции) Тогда
		Возврат;
	КонецЕсли;
	
	ЧастиПоля = СтрРазделить(ЗначениеОпции, ":");
	Пользователь = ЧастиПоля[0];
	
	ЧастиПоля.Удалить(0);
	
	ДанныеИмпорта.Авторизация.Пользователь = Пользователь;
	ДанныеИмпорта.Авторизация.Пароль = СтрСоединить(ЧастиПоля, ":");
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОпциюCurl(ДанныеИмпорта, Знач ИдентификаторРесурсаИмпорт, Знач Опция, Отказ, ОписаниеОшибки)
	ИмяОпции = Опция.Имя;
	Если ИмяОпции = "-X" ИЛИ ИмяОпции = "--request" Тогда
		ОбработатьСхемуCurl(ДанныеИмпорта, Опция, Отказ, ОписаниеОшибки);
	ИначеЕсли ИмяОпции = "-I" ИЛИ ИмяОпции = "--head" Тогда
		ДанныеИмпорта.ТолькоЗаголовки = Истина;
	ИначеЕсли ИмяОпции = "-d" ИЛИ ИмяОпции = "--data" ИЛИ ИмяОпции = "--data-ascii" ИЛИ ИмяОпции = "--data-binary" Тогда
		ОбработатьПолеHTMLФормыCurl(ДанныеИмпорта, Опция);
	ИначеЕсли ИмяОпции = "--data-raw" Тогда
		ОбработатьТекстовоеПолеHTMLФормыCurl(ДанныеИмпорта, Опция);
	ИначеЕсли ИмяОпции = "--data-urlencode" Тогда
		ОбработатьURLПолеHTMLФормыCurl(ДанныеИмпорта, Опция);
	ИначеЕсли ИмяОпции = "-F" ИЛИ ИмяОпции = "--form" Тогда
		ОбработатьПолеФормыCurl(ДанныеИмпорта, Опция, Отказ, ОписаниеОшибки);
	ИначеЕсли ИмяОпции = "--form-string" Тогда
		ОбработатьТекстовоеПолеФормыCurl(ДанныеИмпорта, Опция, Отказ, ОписаниеОшибки);
	ИначеЕсли ИмяОпции = "-H" ИЛИ ИмяОпции = "--header" Тогда
		ОбработатьЗаголовокCurl(ДанныеИмпорта, Опция);
	ИначеЕсли ИмяОпции = "-u" ИЛИ ИмяОпции = "--user" Тогда
		ОбработатьДанныеАвторизацииCurl(ДанныеИмпорта, Опция);
	ИначеЕсли ИмяОпции = "--basic" Тогда
		ДанныеИмпорта.Авторизация.Тип = Элементы.ТипАвторизации.СписокВыбора[1];
	ИначеЕсли ИмяОпции = "--digest" Тогда
		ДанныеИмпорта.Авторизация.Тип = Элементы.ТипАвторизации.СписокВыбора[3];
	ИначеЕсли ИмяОпции = "--ntlm" ИЛИ ИмяОпции = "--ntlm-wb" Тогда
		ДанныеИмпорта.Авторизация.Тип = Элементы.ТипАвторизации.СписокВыбора[2];
	ИначеЕсли ИмяОпции = "--oauth2-bearer" Тогда
		ДанныеИмпорта.Авторизация.Тип = Элементы.ТипАвторизации.СписокВыбора[4];
		ДанныеИмпорта.Авторизация.Токен = Опция.Значение;
	ИначеЕсли ИмяОпции = "-L" ИЛИ ИмяОпции = "--location" ИЛИ ИмяОпции = "--location-trusted" Тогда
		ДанныеИмпорта.ИспользоватьРедиректы = Истина;
	ИначеЕсли ИмяОпции = "--max-redirs" Тогда
		ДанныеИмпорта.КоличествоРедиректов = Опция.Значение;
	ИначеЕсли ИмяОпции = "--compressed" ИЛИ ИмяОпции = "--compressed-ssh" ИЛИ ИмяОпции = "--tr-encoding" Тогда
		ДанныеИмпорта.ПоддержкаСжатогоОтвета = Истина;
	ИначеЕсли ИмяОпции = "-o" ИЛИ ИмяОпции = "--output" Тогда
		ДанныеИмпорта.ИмяФайлаТелаОтвета = Опция.Значение;
	ИначеЕсли ИмяОпции = "-O" ИЛИ ИмяОпции = "--remote-name" Тогда
		ОкончаниеИдентификатораРесурса = Сред(ИдентификаторРесурсаИмпорт, СтрНайти(ИдентификаторРесурсаИмпорт, "/", НаправлениеПоиска.СКонца) + 1);
		ДанныеИмпорта.ИмяФайлаТелаОтвета = КаталогВременныхФайлов() + ОкончаниеИдентификатораРесурса;
	ИначеЕсли ИмяОпции = "--path-as-is" Тогда
		ДанныеИмпорта.НормализоватьИдентификаторРесурса = Ложь;
	ИначеЕсли ИмяОпции = "-G" ИЛИ ИмяОпции = "--get" Тогда
		ДанныеИмпорта.ПоляКакПараметры = Истина;
	ИначеЕсли ИмяОпции = "-:" ИЛИ ИмяОпции = "--next" Тогда
		Отказ = Истина;
		ОписаниеОшибки = "команда с множественными запросами не допускается";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция РезультатРазбораКомандыCurl(ЧастиКоманды, Отказ, ОписаниеОшибки)
	фРезультат = НовыйОбъектДанныхCurl();
	
	Для Каждого Опция Из ЧастиКоманды.Опции Цикл
		ОбработатьОпциюCurl(фРезультат, ЧастиКоманды.ИдентификаторРесурса, Опция, Отказ, ОписаниеОшибки);
		Если Отказ Тогда
			Возврат фРезультат;
		КонецЕсли;
	КонецЦикла;
	
	Возврат фРезультат;
КонецФункции

&НаКлиенте
Функция ТелоЗапросаCurl(ДанныеИмпорта, Отказ, ОписаниеОшибки)
	фРезультат = Новый Структура("Тип, Значение", Элементы.ТипТелаЗапроса.СписокВыбора[0]);
	
	Если ДанныеИмпорта.ПоляHTMLФормы.Количество() = 0 И ДанныеИмпорта.ПоляФормы.Количество() = 0 Тогда
		Возврат фРезультат;
	КонецЕсли;
	
	Если ДанныеИмпорта.ПоляHTMLФормы.Количество() > 0 И ДанныеИмпорта.ПоляФормы.Количество() > 0 Тогда
		Отказ = Истина;
		ОписаниеОшибки = "нельзя совмещать опции полей application/x-www-form-urlencoded и multipart/form-data";
		Возврат фРезультат;
	КонецЕсли;
	
	Если ДанныеИмпорта.Схема = Неопределено Тогда
		ДанныеИмпорта.Схема = Элементы.Схема.СписокВыбора[1].Значение; // POST
	КонецЕсли;
	
	Если ДанныеИмпорта.ПоляHTMLФормы.Количество() > 0 Тогда
		ПервоеПолеТелаЗапроса = ДанныеИмпорта.ПоляHTMLФормы[0];
		
		Если ДанныеИмпорта.ПоляHTMLФормы.Количество() = 1 И ПервоеПолеТелаЗапроса.Значение = Неопределено Тогда
			Если ПервоеПолеТелаЗапроса.Тип = 0 Тогда // это текст
				фРезультат.Тип      = Элементы.ТипТелаЗапроса.СписокВыбора[3]; // raw
				фРезультат.Значение = ПервоеПолеТелаЗапроса.Ключ;
			Иначе // это файл
				фРезультат.Тип      = Элементы.ТипТелаЗапроса.СписокВыбора[4]; // file
				фРезультат.Значение = ПервоеПолеТелаЗапроса.Ключ;
			КонецЕсли;
		Иначе
			фРезультат.Тип      = Элементы.ТипТелаЗапроса.СписокВыбора[2]; // x-www-form-urlencoded
			фРезультат.Значение = ДанныеИмпорта.ПоляHTMLФормы;
		КонецЕсли;
	ИначеЕсли ДанныеИмпорта.ПоляФормы.Количество() > 0 Тогда
		фРезультат.Тип      = Элементы.ТипТелаЗапроса.СписокВыбора[1]; // form
		фРезультат.Значение = ДанныеИмпорта.ПоляФормы;
	КонецЕсли;
	
	Возврат фРезультат;
КонецФункции

&НаКлиенте
Функция НормализованныйИдентификаторРесурса(Знач ИдентификаторРесурсаИмпорт, Отказ, ОписаниеОшибки)
	ПозицияПараметров = СтрНайти(ИдентификаторРесурсаИмпорт, "?");
	ПараметрыURI = ?(
		ПозицияПараметров = 0,
		"",
		Сред(ИдентификаторРесурсаИмпорт, ПозицияПараметров)
	);
	
	URL = ?(
		ПозицияПараметров = 0,
		ИдентификаторРесурсаИмпорт,
		Лев(ИдентификаторРесурсаИмпорт, ПозицияПараметров - 1)
	);
	
	Стек = Новый Массив;
	Для Каждого ЧастьURL Из СтрРазделить(URL, "/", Истина) Цикл
		Если ЧастьURL = ".." Тогда
			Если Стек.Количество() = 0 Тогда
				Отказ = Истина;
				ОписаниеОшибки = "не удалось нормализовать идентификатор ресурса";
				Возврат ИдентификаторРесурсаИмпорт;
			КонецЕсли;
			
			Стек.Удалить(Стек.ВГраница());
		Иначе
			Стек.Добавить(ЧастьURL);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтрСоединить(Стек, "/") + ПараметрыURI;
КонецФункции

&НаКлиенте
Функция ИдентификаторРесурсаСПараметрамиИзТела(Знач ИдентификаторРесурсаИмпорт, Знач ПоляФормыHTML)
	ПозицияПараметров = СтрНайти(ИдентификаторРесурсаИмпорт, "?");
	
	ЧастиПараметров = Новый Массив;
	ЧастиПараметра = Новый Массив;
	Для Каждого Поле Из ПоляФормыHTML Цикл
		ЧастиПараметра.Очистить();
		ЧастиПараметра.Добавить(Поле.Ключ);
		
		Если Поле.Значение <> Неопределено Тогда
			ЧастиПараметра.Добавить(Поле.Значение);
		КонецЕсли;
		
		ЧастиПараметров.Добавить(СтрСоединить(ЧастиПараметра, "="));
	КонецЦикла;
	
	Возврат ИдентификаторРесурсаИмпорт + ?(ПозицияПараметров = 0, "?", "&") + СтрСоединить(ЧастиПараметров, "&");
КонецФункции

&НаКлиенте
Процедура ПрочитатьКомандуCurl(Знач СтрокаКоманды, Отказ, ОписаниеОшибки)
	СтрокаКоманды = СокрЛП(СтрЗаменить(СтрокаКоманды, "\" + Символы.ПС, " "));
	Если НЕ СтрНачинаетсяС(НРег(СтрокаКоманды), "curl ") Тогда
		Отказ = Истина;
		ОписаниеОшибки = "команда должна начинаться с имени утилиты curl";
		Возврат;
	КонецЕсли;
	
	ЧастиКоманды = ЧастиКомандыCurl(СтрокаКоманды, Отказ, ОписаниеОшибки);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеИмпорта = РезультатРазбораКомандыCurl(ЧастиКоманды, Отказ, ОписаниеОшибки);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеИмпорта.НормализоватьИдентификаторРесурса Тогда
		ЧастиКоманды.ИдентификаторРесурса = НормализованныйИдентификаторРесурса(ЧастиКоманды.ИдентификаторРесурса, Отказ, ОписаниеОшибки);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ТелоЗапросаИмпорт = ТелоЗапросаCurl(ДанныеИмпорта, Отказ, ОписаниеОшибки);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеИмпорта.ПоляКакПараметры И ТелоЗапросаИмпорт.Тип = Элементы.ТипТелаЗапроса.СписокВыбора[2] Тогда
		ЧастиКоманды.ИдентификаторРесурса = ИдентификаторРесурсаСПараметрамиИзТела(ЧастиКоманды.ИдентификаторРесурса, ТелоЗапросаИмпорт.Значение);
		ДанныеИмпорта.Схема = Элементы.Схема.СписокВыбора[0]; // GET
		ТелоЗапросаИмпорт.Тип = Элементы.ТипТелаЗапроса.СписокВыбора[0]; // none
	КонецЕсли;
	
	Если ДанныеИмпорта.ТолькоЗаголовки Тогда
		ДанныеИмпорта.Схема = Элементы.Схема.СписокВыбора[4]; // HEAD
	КонецЕсли;
	
	Если ДанныеИмпорта.Схема = Неопределено Тогда
		ДанныеИмпорта.Схема = Элементы.Схема.СписокВыбора[0].Значение; // GET
	КонецЕсли;
	
	ИдентификаторРесурса = ЧастиКоманды.ИдентификаторРесурса;
	Схема = ДанныеИмпорта.Схема;
	
	ТипАвторизации = ДанныеИмпорта.Авторизация.Тип;
	Если ТипАвторизации <> Элементы.ТипАвторизации.СписокВыбора[0].Значение Тогда
		ПользовательАвторизации = ДанныеИмпорта.Авторизация.Пользователь;
		ПарольАвторизации = ДанныеИмпорта.Авторизация.Пароль;
		ТокенАвторизации = ДанныеИмпорта.Авторизация.Токен;
	КонецЕсли;
	
	ЗаголовкиЗапроса.Очистить();
	Для Каждого ЗаголовокИмпорт Из ДанныеИмпорта.Заголовки Цикл
		ЗаполнитьЗначенияСвойств(ЗаголовкиЗапроса.Добавить(), ЗаголовокИмпорт);
	КонецЦикла;
	
	ТипТелаЗапроса = ТелоЗапросаИмпорт.Тип.Значение;
	Если ТелоЗапросаИмпорт.Тип = Элементы.ТипТелаЗапроса.СписокВыбора[1] Тогда // form
		ТелоЗапросаДанныеФормы.Очистить();
		Для Каждого ЭлементТелаЗапросаИмпорт Из ТелоЗапросаИмпорт.Значение Цикл
			ЗаполнитьЗначенияСвойств(ТелоЗапросаДанныеФормы.Добавить(), ЭлементТелаЗапросаИмпорт);
		КонецЦикла;
	ИначеЕсли ТелоЗапросаИмпорт.Тип = Элементы.ТипТелаЗапроса.СписокВыбора[2] Тогда // x-www-form-urlencoded
		ТелоЗапросаДанныеHTMLФормы.Очистить();
		Для Каждого ЭлементТелаЗапросаИмпорт Из ТелоЗапросаИмпорт.Значение Цикл
			ЗаполнитьЗначенияСвойств(ТелоЗапросаДанныеHTMLФормы.Добавить(), ЭлементТелаЗапросаИмпорт);
		КонецЦикла;
	ИначеЕсли ТелоЗапросаИмпорт.Тип = Элементы.ТипТелаЗапроса.СписокВыбора[3] Тогда // raw
		ТелоЗапросаТекст = ТелоЗапросаИмпорт.Значение;
	ИначеЕсли ТелоЗапросаИмпорт.Тип = Элементы.ТипТелаЗапроса.СписокВыбора[4] Тогда // file
		ТелоЗапросаФайл = ТелоЗапросаИмпорт.Значение;
	КонецЕсли;
	
	ИспользоватьСессию = ДанныеИмпорта.ИспользоватьРедиректы;
	Если ДанныеИмпорта.ИспользоватьРедиректы Тогда
		ПорогПеренаправлений = ?(
			ДанныеИмпорта.КоличествоРедиректов = Неопределено,
			50,
			ДанныеИмпорта.КоличествоРедиректов
		);
	КонецЕсли;
	
	ТелоОтветаВФайл = (ДанныеИмпорта.ИмяФайлаТелаОтвета <> Неопределено);
	Если ТелоОтветаВФайл Тогда
		ИмяФайлаТелаОтвета = ДанныеИмпорта.ИмяФайлаТелаОтвета;
	КонецЕсли;
	
	ПоддержкаСжатогоОтвета = ДанныеИмпорта.ПоддержкаСжатогоОтвета;
	
	ИдентификаторРесурсаПриИзменении(Неопределено);
	ТипАвторизацииПриИзменении(Неопределено);
	ТипТелаЗапросаПриИзменении(Неопределено);
	
	Элементы.ГруппаРазделы.ТекущаяСтраница = Элементы.РазделЗапрос;
КонецПроцедуры

&НаКлиенте
Функция ОбработанныйПутьКФайлу(Знач ПутьКФайлу)
	фРезультат = ПутьКФайлу;
	
	Если Лев(фРезультат, 1) <> "/" Тогда
		Возврат фРезультат;
	КонецЕсли;
	
	ПозицияДвоеточия = СтрНайти(фРезультат, ":");
	Если ПозицияДвоеточия = 0 Тогда
		Возврат фРезультат;
	КонецЕсли;
	
	ПозицияВторогоСлеша = СтрНайти(фРезультат, "/", , 2);
	Если ПозицияДвоеточия < ПозицияВторогоСлеша Тогда
		фРезультат = СтрЗаменить(Сред(фРезультат, 2), "/", "\");
	КонецЕсли;
	
	Возврат фРезультат;
КонецФункции

#Область ОБРАТНЫЕ_ВЫЗОВЫ
&НаКлиенте
Процедура РедакторТекстовогоПоляЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат <> Неопределено Тогда
		ДополнительныеПараметры = Результат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РедакторПараметраЗапросаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ПараметрыЗапроса.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДвойнойПеренос = Символы.ПС + Символы.ПС;
	Пока СтрНайти(Результат, ДвойнойПеренос) > 0 Цикл
		Результат = СтрЗаменить(Результат, ДвойнойПеренос, Символы.ПС);
	КонецЦикла;
	
	ТекущиеДанные[ДополнительныеПараметры] = СтрЗаменить(Результат, Символы.ПС, " ");
	
	РассчитатьПараметрыИдентификатораРесурса();
КонецПроцедуры

&НаКлиенте
Процедура РедакторИмениЗаголовкаЗапросаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ЗаголовкиЗапроса.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.Ключ = ИсправленноеИмяЗаголовкаЗапроса(Результат);
КонецПроцедуры

&НаКлиенте
Процедура РедакторЗначенияЗаголовкаЗапросаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ЗаголовкиЗапроса.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДвойнойПеренос = Символы.ПС + Символы.ПС;
	Пока СтрНайти(Результат, ДвойнойПеренос) > 0 Цикл
		Результат = СтрЗаменить(Результат, ДвойнойПеренос, Символы.ПС);
	КонецЦикла;
	
	ТекущиеДанные.Значение = СтрЗаменить(Результат, Символы.ПС, " ");
КонецПроцедуры

&НаКлиенте
Процедура РедакторПоляТелаЗапросаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = ДополнительныеПараметры.ТаблицаФормы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат <> Неопределено Тогда
		ТекущиеДанные[ДополнительныеПараметры.ИмяПоля] = Результат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаИмпортаPostmanЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	ОписаниеОшибки = "";
	
	ПрочитатьФайлИмпорта(ВыбранныеФайлы[0], Отказ, ОписаниеОшибки);
	Если Отказ Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не удалось прочитать файл импорта по причине: " + ОписаниеОшибки;
		Сообщение.Сообщить();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыборЭлементаИмпортаPostmanЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	ОписаниеОшибки = "";
	
	ИмпортироватьВыбранныйЭлементИмпортаPostman(ДополнительныеПараметры.ЗапросыИмпорта[Результат], ДополнительныеПараметры.ПеременныеИмпорта, Отказ, ОписаниеОшибки);
	Если Отказ Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон("Не удалось импортировать запрос %1 по причине: %2", ДополнительныеПараметры[Результат]["name"], ОписаниеОшибки);
		Сообщение.Сообщить();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РедакторКомандыCurlЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	ОписаниеОшибки = "";
	
	ПрочитатьКомандуCurl(Результат, Отказ, ОписаниеОшибки);
	Если Отказ Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не удалось прочитать команду curl по причине: " + ОписаниеОшибки;
		Сообщение.Сообщить();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаТелаЗапросаЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	Если ВыбранныеФайлы <> Неопределено Тогда
		ТелоЗапросаФайл = ВыбранныеФайлы[0];
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаСохраненияТелаОтветаЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	Если ВыбранныеФайлы <> Неопределено Тогда
		ИмяФайлаТелаОтвета = ВыбранныеФайлы[0];
	КонецЕсли;
	
	ИмяФайлаТелаОтветаПриИзменении(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаПоляФормыЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	Если ВыбранныеФайлы <> Неопределено Тогда
		ДополнительныеПараметры.Значение = ВыбранныеФайлы[0];
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РедакторCookiesЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат <> Неопределено Тогда
		ДополнительныеПараметры.Печенье = Результат;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#КонецОбласти
