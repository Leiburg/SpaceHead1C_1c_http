
Функция КодировкаПоУмолчанию() Экспорт
	Возврат "CESU-8";
КонецФункции

Функция МетодGET() Экспорт
	Возврат "GET";
КонецФункции

Функция МетодHEAD() Экспорт
	Возврат "HEAD";
КонецФункции

Функция МетодPOST() Экспорт
	Возврат "POST";
КонецФункции

Функция МетодPUT() Экспорт
	Возврат "PUT";
КонецФункции

Функция МетодDELETE() Экспорт
	Возврат "DELETE";
КонецФункции

Функция КодыСостояния() Экспорт
	Возврат Новый ФиксированнаяСтруктура(
		"Информационные, Успешные, Перенаправления, Клиентские, Серверные",
		Новый ФиксированнаяСтруктура( // Информационные
			"Продолжить, ПереключениеПротокола, ВОбработке, РанниеПодсказки",
			100, // Продолжить
			101, // ПереключениеПротокола
			102, // ВОбработке
			103  // РанниеПодсказки
		),
		Новый ФиксированнаяСтруктура( // Успешные
			"Успешно, Создано, Принято, ИнформацияНеАвторитетна, НетСодержимого, СброситьСодержимое, ЧастичноеСодержимое, МножественноеСостояние, ИспользованIM",
			200, // Успешно
			201, // Создано
			202, // Принято
			203, // ИнформацияНеАвторитетна
			204, // НетСодержимого
			205, // СброситьСодержимое
			206, // ЧастичноеСодержимое
			207, // МножественноеСостояние
			226  // ИспользованIM
		),
		Новый ФиксированнаяСтруктура( // Перенаправления
			"МножественныйВыбор, ПеремещенНаПостояннойОснове, Найден, ПросмотрДругихРесурсов, НеМодифицировано, ИспользоватьПрокси, Зарезервировано1, ВременноеПеренаправление, ПеренаправлениеНаПостояннойОснове",
			300, // МножественныйВыбор
			301, // ПеремещенНаПостояннойОснове
			302, // Найден
			303, // ПросмотрДругихРесурсов
			304, // НеМодифицировано
			305, // ИспользоватьПрокси
			306, // Зарезервировано1
			307, // ВременноеПеренаправление
			308  // ПеренаправлениеНаПостояннойОснове
		),
		Новый ФиксированнаяСтруктура( // Клиентские
			"ПлохойЗапрос, НеАвторизовано, НеобходимаОплата, Запрещено, НеНайден, МетодНеРазрешен, НеПриемлимо, НеавторизованноПрокси, Таймаут, Конфликт, Удалено, ТребуетсяРазмерКонтента, НевыполнимыеУсловия, ПревышенЛимитТела, ПревышенаДлинаURI, ТипМедиаНеПоддерживается, ДиапазонНеМожетБытьВыполнен, ОжиданиеНеМожетБытьВыполнено, Чайник, ТаймаутАвторизации, Мисдирект, НеобрабатываемыйЭкземпляр, Заблокировано, НевыполненнаяЗависимость, НеобходимоОбновление, НеобходимоПредусловие, СлишкомМногоЗапросов, ПоляЗаголовкаСлишкомБольшие, НедостаточноИнформации, НедоступноПоЮридическимПричинам, КлиентЗакрылСоединение",
			400, // ПлохойЗапрос
			401, // НеАвторизовано
			402, // НеобходимаОплата
			403, // Запрещено
			404, // НеНайден
			405, // МетодНеРазрешен
			406, // НеПриемлимо
			407, // НеавторизованноПрокси
			408, // Таймаут
			409, // Конфликт
			410, // Удалено
			411, // ТребуетсяРазмерКонтента
			412, // НевыполнимыеУсловия
			413, // ПревышенЛимитТела
			414, // ПревышенаДлинаURI
			415, // ТипМедиаНеПоддерживается
			416, // ДиапазонНеМожетБытьВыполнен
			417, // ОжиданиеНеМожетБытьВыполнено
			418, // Чайник
			419, // ТаймаутАвторизации
			421, // Мисдирект
			422, // НеобрабатываемыйЭкземпляр
			423, // Заблокировано
			424, // НевыполненнаяЗависимость
			425, // СлишкомРано
			426, // НеобходимоОбновление
			428, // НеобходимоПредусловие
			429, // СлишкомМногоЗапросов
			431, // ПоляЗаголовкаСлишкомБольшие
			449, // НедостаточноИнформации
			451, // НедоступноПоЮридическимПричинам
			499  // КлиентЗакрылСоединение
		),
		Новый ФиксированнаяСтруктура( // Серверные
			"ВнутренняяОшибка, НеВыполнено, ПлохойШлюз, СервисНедоступен, Таймаут, ВерсияHTTPНеПоддерживается, НеХватаетМеста, БесконечноеПеренаправление, ПревышенТрафик, ОтсутствуетРасширение, ТребуетсяАвторизацияСети, НеизвестнаяОшибка, СерверНеДоступен, ТаймаутПодключения, СерверНедостижим, ТаймаутСоединения, ОшибкаSSL, ОшибкаПодтвержденияСертификата",
			500, // ВнутренняяОшибка
			501, // НеВыполнено
			502, // ПлохойШлюз
			503, // СервисНедоступен
			504, // Таймаут
			505, // ВерсияHTTPНеПоддерживается
			507, // НеХватаетМеста
			508, // БесконечноеПеренаправление
			509, // ПревышенТрафик
			510, // ОтсутствуетРасширение
			511, // ТребуетсяАвторизацияСети
			520, // НеизвестнаяОшибка
			521, // СерверНеДоступен
			522, // ТаймаутПодключения
			523, // СерверНедостижим
			524, // ТаймаутСоединения
			525, // ОшибкаSSL
			526  // ОшибкаПодтвержденияСертификата
		)
	);
КонецФункции

#Область КОДЫ_СОСТОЯНИЙ
Функция КодСостоянияУспешно() Экспорт
	Возврат КлиентHTTPПовтИсп.КодыСостояния().Успешные.Успешно;
КонецФункции

Функция КодСостоянияСоздано() Экспорт
	Возврат КлиентHTTPПовтИсп.КодыСостояния().Успешные.Создано;
КонецФункции

Функция КодСостоянияПеремещен() Экспорт
	Возврат КлиентHTTPПовтИсп.КодыСостояния().Перенаправления.ПеремещенНаПостояннойОснове;
КонецФункции

Функция КодСостоянияНайден() Экспорт
	Возврат КлиентHTTPПовтИсп.КодыСостояния().Перенаправления.Найден;
КонецФункции

Функция КодСостоянияВременноеПеренаправление() Экспорт
	Возврат КлиентHTTPПовтИсп.КодыСостояния().Перенаправления.ВременноеПеренаправление;
КонецФункции

Функция КодСостоянияПлохойЗапрос() Экспорт
	Возврат КлиентHTTPПовтИсп.КодыСостояния().Клиентские.ПлохойЗапрос;
КонецФункции

Функция КодСостоянияНеАвторизовано() Экспорт
	Возврат КлиентHTTPПовтИсп.КодыСостояния().Клиентские.НеАвторизовано;
КонецФункции

Функция КодСостоянияЗапрещено() Экспорт
	Возврат КлиентHTTPПовтИсп.КодыСостояния().Клиентские.Запрещено;
КонецФункции

Функция КодСостоянияНеНайден() Экспорт
	Возврат КлиентHTTPПовтИсп.КодыСостояния().Клиентские.НеНайден;
КонецФункции

Функция КодСостоянияМетодНеРазрешен() Экспорт
	Возврат КлиентHTTPПовтИсп.КодыСостояния().Клиентские.МетодНеРазрешен;
КонецФункции

Функция КодСостоянияТаймаутНаКлиенте() Экспорт
	Возврат КлиентHTTPПовтИсп.КодыСостояния().Клиентские.Таймаут;
КонецФункции

Функция КодСостоянияУдалено() Экспорт
	Возврат КлиентHTTPПовтИсп.КодыСостояния().Клиентские.Удалено;
КонецФункции

Функция КодСостоянияПревышенЛимитТела() Экспорт
	Возврат КлиентHTTPПовтИсп.КодыСостояния().Клиентские.ПревышенЛимитТела;
КонецФункции

Функция КодСостоянияЧайник() Экспорт
	Возврат КлиентHTTPПовтИсп.КодыСостояния().Клиентские.Чайник;
КонецФункции

Функция КодСостоянияВнутренняяОшибкаСервера() Экспорт
	Возврат КлиентHTTPПовтИсп.КодыСостояния().Серверные.ВнутренняяОшибка;
КонецФункции

Функция КодСостоянияНеВыполнено() Экспорт
	Возврат КлиентHTTPПовтИсп.КодыСостояния().Серверные.НеВыполнено;
КонецФункции

Функция КодСостоянияПлохойШлюз() Экспорт
	Возврат КлиентHTTPПовтИсп.КодыСостояния().Серверные.ПлохойШлюз;
КонецФункции

Функция КодСостоянияСервисНедоступен() Экспорт
	Возврат КлиентHTTPПовтИсп.КодыСостояния().Серверные.СервисНедоступен;
КонецФункции

Функция КодСостоянияТаймаутНаСервере() Экспорт
	Возврат КлиентHTTPПовтИсп.КодыСостояния().Серверные.Таймаут;
КонецФункции
#КонецОбласти

Функция КодыСостоянияПеренаправления() Экспорт
	фРезультат = Новый Соответствие;
	фРезультат.Вставить(КлиентHTTPПовтИсп.КодСостоянияПеремещен(), Истина);
	фРезультат.Вставить(КлиентHTTPПовтИсп.КодСостоянияНайден(), Истина);
	фРезультат.Вставить(КлиентHTTPПовтИсп.КодыСостояния().Перенаправления.ПросмотрДругихРесурсов, Истина);
	фРезультат.Вставить(КлиентHTTPПовтИсп.КодСостоянияВременноеПеренаправление(), Истина);
	фРезультат.Вставить(КлиентHTTPПовтИсп.КодыСостояния().Перенаправления.ПеренаправлениеНаПостояннойОснове, Истина);
	
	Возврат Новый ФиксированноеСоответствие(фРезультат);
КонецФункции

// Возвращает: адресный перечень типов MIME
//
// Возвращаемые значения:
//     ФиксированнаяСтруктура - ключи: группы типов MIME типа ФиксированнаяСтруктура, ключи которых сами типы
//
Функция ТипыMIME() Экспорт
	Возврат Новый ФиксированнаяСтруктура(
		"application, audio, image, message, model, multipart, text, video, vnd, x, x_pkcs",
		Новый ФиксированнаяСтруктура( // application - внутренний формат прикладной программы
			"atom_xml, directory, EDI_X12, EDIFACT, json, javascript, octet_stream, ogg, pdf, postscript, soap_xml, font_woff, xhtml_xml, xml_dtd, xop_xml, zip, gzip, x_bittorrent, x_tex, xml",
			"application/atom+xml",     // Atom
			"application/directory",    // directory
			"application/EDI-X12",      // EDI X12 (RFC 1767)
			"application/EDIFACT",      // EDI EDIFACT (RFC 1767)
			"application/json",         // JavaScript Object Notation JSON (RFC 4627)
			"application/javascript",   // JavaScript (RFC 4329)
			"application/octet-stream", // двоичный файл без указания формата (RFC 2046)
			"application/ogg",          // Ogg (RFC 5334)
			"application/pdf",          // Portable Document Format, PDF (RFC 3778)
			"application/postscript",   // PostScript (RFC 2046)
			"application/soap+xml",     // SOAP (RFC 3902)
			"application/font-woff",    // Web Open Font Format
			"application/xhtml+xml",    // XHTML (RFC 3236)
			"application/xml-dtd",      // DTD (RFC 3023)
			"application/xop+xml",      // XOP
			"application/zip",          // ZIP
			"application/gzip",         // Gzip
			"application/x-bittorrent", // BitTorrent
			"application/x-tex",        // TeX
			"application/xml"           // XML
		),
		Новый ФиксированнаяСтруктура( // audio - аудио
			"basic, L24, mp4, aac, mpeg, ogg, vorbis, x_ms_wma, x_ms_wax, vnd_rn_realaudio, vnd_wave, webm",
			"audio/basic",            // mulaw аудио, 8 кГц, 1 канал (RFC 2046)
			"audio/L24",              // 24bit Linear PCM аудио, 8-48 кГц, 1-N каналов (RFC 3190)
			"audio/mp4",              // MP4
			"audio/aac",              // AAC
			"audio/mpeg",             // MP3 или др. MPEG (RFC 3003)
			"audio/ogg",              // Ogg Vorbis, Speex, Flac или др. аудио (RFC 5334)
			"audio/vorbis",           // Vorbis (RFC 5215)
			"audio/x-ms-wma",         // Windows Media Audio
			"audio/x-ms-wax",         // Windows Media Audio перенаправление
			"audio/vnd.rn-realaudio", // RealAudio
			"audio/vnd.wave",         // WAV(RFC 2361)
			"audio/webm"              // WebM
		),
		Новый ФиксированнаяСтруктура( // image - изображение
			"gif, jpeg, pjpeg, png, svg_xml, tiff, vnd_microsoft_icon, vnd_wap_wbmp, webp, bmp",
			"image/gif",                // GIF(RFC 2045 и RFC 2046)
			"image/jpeg",               // JPEG (RFC 2045 и RFC 2046)
			"image/pjpeg",              // JPEG
			"image/png",                // Portable Network Graphics (RFC 2083)
			"image/svg+xml",            // SVG
			"image/tiff",               // TIFF(RFC 3302)
			"image/vnd.microsoft.icon", // ICO
			"image/vnd.wap.wbmp",       // WBMP
			"image/webp",               // WebP
			"image/bmp"                 // BMP
		),
		Новый ФиксированнаяСтруктура( // message - сообщение
			"http, imdn_xml, partial, rfc822",
			"message/http",     // (RFC 2616)
			"message/imdn+xml", // IMDN (RFC 5438)
			"message/partial",  // E-mail (RFC 2045 и RFC 2046)
			"message/rfc822"    // E-mail; EML-файлы, MIME-файлы, MHT-файлы, MHTML-файлы (RFC 2045 и RFC 2046)
		),
		Новый ФиксированнаяСтруктура( // model - для 3D-моделей
			"example, iges, mesh, vrml, x3d_binary, x3d_vrml, x3d_xml",
			"model/example",    // (RFC 4735)
			"model/iges",       // IGS файлы, IGES файлы (RFC 2077)
			"model/mesh",       // MSH файлы, MESH файлы (RFC 2077), SILO файлы
			"model/vrml",       // WRL файлы, VRML файлы (RFC 2077)
			"model/x3d+binary", // X3D ISO стандарт для 3D компьютерной графики, X3DB файлы
			"model/x3d+vrml",   // X3D ISO стандарт для 3D компьютерной графики, X3DV VRML файлы
			"model/x3d+xml"     // X3D ISO стандарт для 3D компьютерной графики, X3D XML файлы
		),
		Новый ФиксированнаяСтруктура( // multipart - составные
			"mixed, alternative, related, form_data, signed, encrypted",
			"multipart/mixed",       // MIME E-mail (RFC 2045 и RFC 2046)
			"multipart/alternative", // MIME E-mail (RFC 2045 и RFC 2046)
			"multipart/related",     // MIME E-mail (RFC 2387 и используемое MHTML (HTML mail))
			"multipart/form-data",   // MIME Webform (RFC 2388)
			"multipart/signed",      // (RFC 1847)
			"multipart/encrypted"    // (RFC 1847)
		),
		Новый ФиксированнаяСтруктура( // text - текст
			"cmd, css, csv, html, javascript, plain, php, xml, markdown, cache_manifest",
			"text/cmd",           // команды
			"text/css",           // Cascading Style Sheets (RFC 2318)
			"text/csv",           // CSV (RFC 4180)
			"text/html",          // HTML (RFC 2854)
			"text/javascript",    // (Obsolete): JavaScript (RFC 4329)
			"text/plain",         // текстовые данные (RFC 2046 и RFC 3676)
			"text/php",           // Скрипт языка PHP
			"text/xml",           // Extensible Markup Language (RFC 3023)
			"text/markdown",      // файл языка разметки Markdown (RFC 7763)
			"text/cache-manifest" // файл манифеста(RFC 2046)
		),
		Новый ФиксированнаяСтруктура( // video - видео
			"mpeg, mp4, ogg, quicktime, webm, x_ms_wmv, x_flv, _3gpp, _3gpp2",
			"video/mpeg",      // MPEG-1 (RFC 2045 и RFC 2046)
			"video/mp4",       // MP4 (RFC 4337)
			"video/ogg",       // Ogg Theora или другое видео (RFC 5334)
			"video/quicktime", // QuickTime
			"video/webm",      // WebM
			"video/x-ms-wmv",  // Windows Media Video
			"video/x-flv",     // FLV
			"video/3gpp",      // 3gpp .3gp
			"video/3gpp2"      // 3gpp2 .3g2
		),
		Новый ФиксированнаяСтруктура( // vnd - вендорные файлы
			"oot, oos, oop, oog, ms_excel, ms_excel_2007, ms_powerpoint, ms_powerpoint_2007, ms_word, ms_word_2007, mozilla_xul_xml, google_earth_kml_xml",
			"application/vnd.oasis.opendocument.text",                                   // OpenDocument
			"application/vnd.oasis.opendocument.spreadsheet",                            // OpenDocument
			"application/vnd.oasis.opendocument.presentation",                           // OpenDocument
			"application/vnd.oasis.opendocument.graphics",                               // OpenDocument
			"application/vnd.ms-excel",                                                  // Microsoft Excel файлы
			"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",         // Microsoft Excel 2007 файлы
			"application/vnd.ms-powerpoint",                                             // Microsoft Powerpoint файлы
			"application/vnd.openxmlformats-officedocument.presentationml.presentation", // Microsoft Powerpoint 2007 файлы
			"application/msword",                                                        // Microsoft Word файлы
			"application/vnd.openxmlformats-officedocument.wordprocessingml.document",   // Microsoft Word 2007 файлы
			"application/vnd.mozilla.xul+xml",                                           // Mozilla XUL файлы
			"application/vnd.google-earth.kml+xml"                                       // KML файлы (например, для Google Earth)
		),
		Новый ФиксированнаяСтруктура( // x - нестандартные файлы
			"www_form_urlencoded, dvi, latex, font_ttf, shockwave_flash, stuffit, zip_compressed, rar_compressed, tar, jquery_tmpl, javascript",
			"application/x-www-form-urlencoded", // Form Encoded Data
			"application/x-dvi",                 // DVI
			"application/x-latex",               // LaTeX файлы
			"application/x-font-ttf",            // TrueType (не зарегистрированный MIME-тип, но наиболее часто используемый)
			"application/x-shockwave-flash",     // Adobe Flash
			"application/x-stuffit",             // StuffIt
			"application/x-zip-compressed",      // ZIP
			"application/x-rar-compressed",      // RAR
			"application/x-tar",                 // Tarball
			"text/x-jquery-tmpl",                // jQuery
			"application/x-javascript"           // javascript
		),
		Новый ФиксированнаяСтруктура( // x_pkcs - Public Key Cryptography Standards
			"pkcs12, pkcs7_certificates, pkcs7_certreqresp, pkcs7_mime, pkcs7_signature",
			"application/x-pkcs12",             // p12 и pfx файлы
			"application/x-pkcs7-certificates", // p7b и spc файлы
			"application/x-pkcs7-certreqresp",  // p7r файлы
			"application/x-pkcs7-mime",         // p7c и p7m файлы
			"application/x-pkcs7-signature"     // p7s файлы
		)
	);
КонецФункции

#Область ТИПЫ_MIME
Функция ТипMIMEJSON() Экспорт
	Возврат КлиентHTTPПовтИсп.ТипыMIME().application.json;
КонецФункции

Функция ТипMIMEText() Экспорт
	Возврат КлиентHTTPПовтИсп.ТипыMIME().text.plain;
КонецФункции

Функция ТипMIMETextXML() Экспорт
	Возврат КлиентHTTPПовтИсп.ТипыMIME().text.xml;
КонецФункции

Функция ТипMIMEHTML() Экспорт
	Возврат КлиентHTTPПовтИсп.ТипыMIME().text.html;
КонецФункции

Функция ТипMIMEOctetStream() Экспорт
	Возврат КлиентHTTPПовтИсп.ТипыMIME().application.octet_stream;
КонецФункции

Функция ТипMIMEPDF() Экспорт
	Возврат КлиентHTTPПовтИсп.ТипыMIME().application.pdf;
КонецФункции

Функция ТипMIMEExcel() Экспорт
	Возврат КлиентHTTPПовтИсп.ТипыMIME().vnd.ms_excel;
КонецФункции

Функция ТипMIMEExcel2007() Экспорт
	Возврат КлиентHTTPПовтИсп.ТипыMIME().vnd.ms_excel_2007;
КонецФункции

Функция ТипMIMEJPEG() Экспорт
	Возврат КлиентHTTPПовтИсп.ТипыMIME().image.jpeg;
КонецФункции

Функция ТипMIMEGIF() Экспорт
	Возврат КлиентHTTPПовтИсп.ТипыMIME().image.gif;
КонецФункции

Функция ТипMIMEPNG() Экспорт
	Возврат КлиентHTTPПовтИсп.ТипыMIME().image.png;
КонецФункции

Функция ТипMIMEZip() Экспорт
	Возврат КлиентHTTPПовтИсп.ТипыMIME().application.zip;
КонецФункции

Функция ТипMIMEZipCompressed() Экспорт
	Возврат КлиентHTTPПовтИсп.ТипыMIME().x.zip_compressed;
КонецФункции

Функция ТипMIMEXWWWFormUrlEncoded() Экспорт
	Возврат КлиентHTTPПовтИсп.ТипыMIME().x.www_form_urlencoded;
КонецФункции

Функция ТипMIMEMultipartFromData() Экспорт
	Возврат КлиентHTTPПовтИсп.ТипыMIME().multipart.form_data;
КонецФункции
#КонецОбласти

Функция ТипыMIMEРасширенийФайлов() Экспорт
	фРезультат = Новый Соответствие;
	фРезультат.Вставить("jpg",  КлиентHTTPПовтИсп.ТипMIMEJPEG());
	фРезультат.Вставить("jpeg", КлиентHTTPПовтИсп.ТипMIMEJPEG());
	фРезультат.Вставить("png",  КлиентHTTPПовтИсп.ТипMIMEPNG());
	фРезультат.Вставить("gif",  КлиентHTTPПовтИсп.ТипMIMEGIF());
	фРезультат.Вставить("tiff", КлиентHTTPПовтИсп.ТипыMIME().image.tiff);
	фРезультат.Вставить("webp", КлиентHTTPПовтИсп.ТипыMIME().image.webp);
	фРезультат.Вставить("bmp",  КлиентHTTPПовтИсп.ТипыMIME().image.bmp);
	фРезультат.Вставить("xls",  КлиентHTTPПовтИсп.ТипMIMEExcel());
	фРезультат.Вставить("xlsx", КлиентHTTPПовтИсп.ТипMIMEExcel2007());
	фРезультат.Вставить("zip",  КлиентHTTPПовтИсп.ТипMIMEZip());
	фРезультат.Вставить("json", КлиентHTTPПовтИсп.ТипMIMEJSON());
	фРезультат.Вставить("xml",  КлиентHTTPПовтИсп.ТипMIMETextXML());
	фРезультат.Вставить("pdf",  КлиентHTTPПовтИсп.ТипMIMEPDF());
	фРезультат.Вставить("mp4",  КлиентHTTPПовтИсп.ТипыMIME().video.mp4);
	фРезультат.Вставить("webm", КлиентHTTPПовтИсп.ТипыMIME().video.webm);
	фРезультат.Вставить("flv",  КлиентHTTPПовтИсп.ТипыMIME().video.x_flv);
	фРезультат.Вставить("mp3",  КлиентHTTPПовтИсп.ТипыMIME().audio.mpeg);
	фРезультат.Вставить("bat",  КлиентHTTPПовтИсп.ТипыMIME().text.cmd);
	фРезультат.Вставить("sh",   КлиентHTTPПовтИсп.ТипыMIME().text.cmd);
	фРезультат.Вставить("css",  КлиентHTTPПовтИсп.ТипыMIME().text.css);
	фРезультат.Вставить("csv",  КлиентHTTPПовтИсп.ТипыMIME().text.csv);
	фРезультат.Вставить("html", КлиентHTTPПовтИсп.ТипыMIME().text.html);
	фРезультат.Вставить("js",   КлиентHTTPПовтИсп.ТипыMIME().text.javascript);
	фРезультат.Вставить("php",  КлиентHTTPПовтИсп.ТипыMIME().text.php);
	фРезультат.Вставить("md",   КлиентHTTPПовтИсп.ТипыMIME().text.markdown);
	фРезультат.Вставить("txt",  КлиентHTTPПовтИсп.ТипыMIME().text.plain);
	
	Возврат фРезультат;
КонецФункции

Функция ПараметрыPunycode() Экспорт
	Возврат Новый Структура(
		"TMin, TMax, Base, InitialN, InitialBias, Damp, Skew, Delimiter, НаибольшееЧисло",
		1,   // TMin
		26,  // TMax
		36,  // Base
		128, // InitialN
		72,  // InitialBias
		700, // Damp
		38,  // Skew
		"-", // Delimiter
		9999999999 // НаибольшееЧисло
	);
КонецФункции

Функция СостоянияДКАПарсингаПеченья() Экспорт
	Возврат Новый ФиксированнаяСтруктура(
		"ИмяПеченьки, ЗначениеПеченьки, ИмяАтрибута, ЗначениеАтрибута, ИмяИлиЗначениеПеченьки, ИмяПеченькиИлиЗначениеАтрибута",
		"A",  // ИмяПеченьки
		"B",  // ЗначениеПеченьки
		"C",  // ИмяАтрибута
		"D",  // ЗначениеАтрибута
		"AB", // ИмяИлиЗначениеПеченьки
		"AD"  // ИмяПеченькиИлиЗначениеАтрибута
	);
КонецФункции

Функция ДКАПарсингаПеченья() Экспорт
	фРезультат = Новый Соответствие;
	СостоянияДКА = КлиентHTTPПовтИсп.СостоянияДКАПарсингаПеченья();
	ТипыТокенов = КлиентHTTPПовтИсп.ТипыТокеновПарсингаПеченья();
	
	ИмяПеченьки = Новый Соответствие;
	ИмяПеченьки.Вставить(ТипыТокенов.РазделителиПар,       СостоянияДКА.ЗначениеПеченьки);
	ИмяПеченьки.Вставить(ТипыТокенов.РазделителиАтрибутов, СостоянияДКА.ИмяАтрибута);
	ИмяПеченьки.Вставить(ТипыТокенов.РазделителиПеченья,   СостоянияДКА.ИмяПеченьки);

	ЗначениеПеченьки = Новый Соответствие;
	ЗначениеПеченьки.Вставить(ТипыТокенов.РазделителиПар,       СостоянияДКА.ЗначениеПеченьки);
	ЗначениеПеченьки.Вставить(ТипыТокенов.РазделителиАтрибутов, СостоянияДКА.ИмяАтрибута);
	ЗначениеПеченьки.Вставить(ТипыТокенов.РазделителиПеченья,   СостоянияДКА.ИмяИлиЗначениеПеченьки);

	ИмяАтрибута = Новый Соответствие;
	ИмяАтрибута.Вставить(ТипыТокенов.РазделителиПар,       СостоянияДКА.ЗначениеАтрибута);
	ИмяАтрибута.Вставить(ТипыТокенов.РазделителиАтрибутов, СостоянияДКА.ИмяАтрибута);
	ИмяАтрибута.Вставить(ТипыТокенов.РазделителиПеченья,   СостоянияДКА.ИмяПеченьки);

	ЗначениеАтрибута = Новый Соответствие;
	ЗначениеАтрибута.Вставить(ТипыТокенов.РазделителиАтрибутов, СостоянияДКА.ИмяАтрибута);
	ЗначениеАтрибута.Вставить(ТипыТокенов.РазделителиПеченья,   СостоянияДКА.ИмяПеченькиИлиЗначениеАтрибута);

	ИмяИлиЗначениеПеченьки = Новый Соответствие;
	ИмяИлиЗначениеПеченьки.Вставить(ТипыТокенов.РазделителиПар,       СостоянияДКА.ЗначениеПеченьки);
	ИмяИлиЗначениеПеченьки.Вставить(ТипыТокенов.РазделителиАтрибутов, СостоянияДКА.ИмяАтрибута);
	ИмяИлиЗначениеПеченьки.Вставить(ТипыТокенов.РазделителиПеченья,   СостоянияДКА.ИмяИлиЗначениеПеченьки);

	ИмяПеченькиИлиЗначениеАтрибута = Новый Соответствие;
	ИмяПеченькиИлиЗначениеАтрибута.Вставить(ТипыТокенов.РазделителиПар,       СостоянияДКА.ЗначениеПеченьки);
	ИмяПеченькиИлиЗначениеАтрибута.Вставить(ТипыТокенов.РазделителиАтрибутов, СостоянияДКА.ИмяАтрибута);
	ИмяПеченькиИлиЗначениеАтрибута.Вставить(ТипыТокенов.РазделителиПеченья,   СостоянияДКА.ИмяПеченькиИлиЗначениеАтрибута);

	фРезультат.Вставить(СостоянияДКА.ИмяПеченьки,                    ИмяПеченьки);
	фРезультат.Вставить(СостоянияДКА.ЗначениеПеченьки,               ЗначениеПеченьки);
	фРезультат.Вставить(СостоянияДКА.ИмяАтрибута,                    ИмяАтрибута);
	фРезультат.Вставить(СостоянияДКА.ЗначениеАтрибута,               ЗначениеАтрибута);
	фРезультат.Вставить(СостоянияДКА.ИмяИлиЗначениеПеченьки,         ИмяИлиЗначениеПеченьки);
	фРезультат.Вставить(СостоянияДКА.ИмяПеченькиИлиЗначениеАтрибута, ИмяПеченькиИлиЗначениеАтрибута);
	
	Возврат Новый ФиксированноеСоответствие(фРезультат);
КонецФункции

Функция ТокеныПарсингаПеченьяАтрибуты() Экспорт
	фРезультат = Новый Массив;
	фРезультат.Добавить("expires");
	фРезультат.Добавить("max-age");
	фРезультат.Добавить("domain");
	фРезультат.Добавить("path");
	фРезультат.Добавить("secure");
	фРезультат.Добавить("httponly");
	фРезультат.Добавить("samesite");
	
	Возврат Новый ФиксированныйМассив(фРезультат);
КонецФункции

Функция ТокеныПарсингаПеченьяРазделителиПар() Экспорт
	фРезультат = Новый Массив;
	фРезультат.Добавить("=");
	
	Возврат Новый ФиксированныйМассив(фРезультат);
КонецФункции

Функция ТокеныПарсингаПеченьяРазделителиАтрибутов() Экспорт
	фРезультат = Новый Массив;
	фРезультат.Добавить(";");
	
	Возврат Новый ФиксированныйМассив(фРезультат);
КонецФункции

Функция ТокеныПарсингаПеченьяРазделителиПеченья() Экспорт
	фРезультат = Новый Массив;
	фРезультат.Добавить(",");
	
	Возврат Новый ФиксированныйМассив(фРезультат);
КонецФункции

Функция ТокеныПарсингаПеченья() Экспорт
	фРезультат = Новый Массив;
	ТипыТокенов = КлиентHTTPПовтИсп.ТипыТокеновПарсингаПеченья();
	
	КоличествоЗапятыхВАтрибуте = Новый Соответствие;
	КоличествоЗапятыхВАтрибуте.Вставить("expires", 1);
	КоличествоЗапятыхВАтрибуте.Вставить("max-age", 0);
	КоличествоЗапятыхВАтрибуте.Вставить("domain",  0);
	
	ТокеныТипов = Новый Массив;
	ТокеныТипов.Добавить(Новый Структура("Тип, Токены", ТипыТокенов.Атрибуты,             КлиентHTTPПовтИсп.ТокеныПарсингаПеченьяАтрибуты()));
	ТокеныТипов.Добавить(Новый Структура("Тип, Токены", ТипыТокенов.РазделителиПар,       КлиентHTTPПовтИсп.ТокеныПарсингаПеченьяРазделителиПар()));
	ТокеныТипов.Добавить(Новый Структура("Тип, Токены", ТипыТокенов.РазделителиАтрибутов, КлиентHTTPПовтИсп.ТокеныПарсингаПеченьяРазделителиАтрибутов()));
	ТокеныТипов.Добавить(Новый Структура("Тип, Токены", ТипыТокенов.РазделителиПеченья,   КлиентHTTPПовтИсп.ТокеныПарсингаПеченьяРазделителиПеченья()));

	Для Каждого ТокеныТипа Из ТокеныТипов Цикл
		Для Каждого Токен Из ТокеныТипа.Токены Цикл
			фРезультат.Добавить(
				Новый Структура(
					"Значение, Тип, Смещение, КоличествоЗапятых",
					Токен,           // Значение
					ТокеныТипа.Тип,  // Тип
					СтрДлина(Токен), // Смещение
					КоличествоЗапятыхВАтрибуте.Получить(Токен) // КоличествоЗапятых
				)
			);
		КонецЦикла;
	КонецЦикла;
	
	Возврат Новый ФиксированныйМассив(фРезультат);
КонецФункции

Функция ТипыТокеновПарсингаПеченья() Экспорт
	Возврат Новый ФиксированнаяСтруктура(
		"Атрибуты, РазделителиПар, РазделителиАтрибутов, РазделителиПеченья",
		0, // Атрибуты
		1, // РазделителиПар
		2, // РазделителиАтрибутов
		3  // РазделителиПеченья
	);
КонецФункции

Функция АтрибутыКакСвойства() Экспорт
	фРезультат = Новый Соответствие;
	фРезультат.Вставить("expires", "Срок");
	фРезультат.Вставить("max-age", "ВремяАктуальности");
	фРезультат.Вставить("path",    "АдресРесурса");
	фРезультат.Вставить("secure",  "ЗащищенноеСоединение");
	
	Возврат Новый ФиксированноеСоответствие(фРезультат);
КонецФункции

Функция СвойстваКакАтрибуты() Экспорт
	фРезультат = Новый Структура;
	
	Атрибуты = КлиентHTTPПовтИсп.АтрибутыКакСвойства();
	Для Каждого КЗ Из Атрибуты Цикл
		Если КЗ.Ключ = "max-age" Тогда
			Продолжить;
		КонецЕсли;
		фРезультат.Вставить(КЗ.Значение, КЗ.Ключ);
	КонецЦикла;
	
	Возврат Новый ФиксированнаяСтруктура(фРезультат);
КонецФункции

Функция СвойствоПеченькаСрок() Экспорт
	Возврат "Срок";
КонецФункции

Функция СвойствоПеченькаВремяАктуальности() Экспорт
	Возврат "ВремяАктуальности";
КонецФункции

Функция СвойствоПеченькаАдресРесурса() Экспорт
	Возврат "АдресРесурса";
КонецФункции

Функция СвойствоПеченькаЗащищенноеСоединение() Экспорт
	Возврат "ЗащищенноеСоединение";
КонецФункции

Функция ОластиФайлаВАрхивеZIP() Экспорт
	//фРезультат = Новый Структура("ЗаголовокФайла, ДескрипторДанных, МетаданныеФайла, ЗакрывающяяЗапись, РазмерЗаголовка, РазмерДескриптора, РазмерМетаданных, РазмерОкончания");
	фРезультат = Новый Структура("РазмерLFH, РазмерDD, РазмерCDFH, РазмерEOCD, ОбластьLFH, ОбластьDD, ОбластьCDFH, ОбластьEOCD", 42, 16, 58, 22);
	
	// Local File Header - используется для описания метаданных файла
	ОбластьLFH = Новый БуферДвоичныхДанных(фРезультат.РазмерLFH);
	ОбластьLFH.ЗаписатьЦелое32(0,  67324752); // обязательная сигнатура 0x04034b50
	ОбластьLFH.ЗаписатьЦелое16(4,  20);       // минимальная версия для распаковки
	ОбластьLFH.ЗаписатьЦелое16(6,  10);       // битовый флаг
	ОбластьLFH.ЗаписатьЦелое16(8,  8);        // метод сжатия (0 - без сжатия, 8 - deflate)
	ОбластьLFH.ЗаписатьЦелое16(10, 0);        // время модификации файла
	ОбластьLFH.ЗаписатьЦелое16(12, 0);        // дата модификации файла
	ОбластьLFH.ЗаписатьЦелое32(14, 0);        // контрольная сумма
	ОбластьLFH.ЗаписатьЦелое32(18, 0);        // размер сжатых данных
	ОбластьLFH.ЗаписатьЦелое32(22, 0);        // размер несжатых данных
	ОбластьLFH.ЗаписатьЦелое16(26, 12);       // длина название файла
	ОбластьLFH.ЗаписатьЦелое16(28, 0);        // длина поля с дополнительными данными
	// Название файла (размером filenameLength) заполнить позже
	
	// Data descriptor - дополнение метаданных для Local File Header
	ОбластьDD = Новый БуферДвоичныхДанных(фРезультат.РазмерDD);
	ОбластьDD.ЗаписатьЦелое32(0, 134695760); // необязательная сигнатура, равна 0x08074b50
	// Контрольнюу сумму, размеры сжатых и не сжатых данных заполнить позже
	
	// Central directory file header - расширенное описание метаданных файла
	ОбластьCDFH = Новый БуферДвоичныхДанных(фРезультат.РазмерCDFH);
	ОбластьCDFH.ЗаписатьЦелое32(0,  33639248);   // обязательная сигнатура, равна 0x02014b50
	ОбластьCDFH.ЗаписатьЦелое16(4,  798);        // версия файла
	ОбластьCDFH.ЗаписатьЦелое16(6,  20);         // минимальная версия для распаковки
	ОбластьCDFH.ЗаписатьЦелое16(8,  10);         // Битовый флаг
	ОбластьCDFH.ЗаписатьЦелое16(10, 8);          // метод сжатия (0 - без сжатия, 8 - deflate)
	ОбластьCDFH.ЗаписатьЦелое16(12, 0);          // время модификации файла
	ОбластьCDFH.ЗаписатьЦелое16(14, 0);          // дата модификации файла
	ОбластьCDFH.ЗаписатьЦелое16(28, 12);         // длина название файла
	ОбластьCDFH.ЗаписатьЦелое16(30, 0);          // длина поля с дополнительными данными
	ОбластьCDFH.ЗаписатьЦелое16(32, 0);          // длина комментариев к файлу
	ОбластьCDFH.ЗаписатьЦелое16(34, 0);          // номер диска
	ОбластьCDFH.ЗаписатьЦелое16(36, 0);          // внутренние аттрибуты файла
	ОбластьCDFH.ЗаписатьЦелое32(38, 2176057344); // внешние аттрибуты файла
	ОбластьCDFH.ЗаписатьЦелое32(42, 0);          // смещение до структуры Local File Header
	// Название файла, контрольнюу сумму, размеры сжатых и не сжатых данных заполнить позже
	
	// End of central directory record - закрывающая запись
	ОбластьEOCD = Новый БуферДвоичныхДанных(фРезультат.РазмерEOCD);
	ОбластьEOCD.ЗаписатьЦелое32(0,  101010256); // обязательная сигнатура, равна 0x06054b50
	ОбластьEOCD.ЗаписатьЦелое16(4,  0);         // номер диска
	ОбластьEOCD.ЗаписатьЦелое16(6,  0);         // номер диска, где находится начало Central Directory
	ОбластьEOCD.ЗаписатьЦелое16(8,  1);         // количество записей в Central directory в текущем диске
	ОбластьEOCD.ЗаписатьЦелое16(10, 1);         // всего записей в Central Directory
	ОбластьEOCD.ЗаписатьЦелое32(12, фРезультат.РазмерCDFH); // размер Central Directory
	ОбластьEOCD.ЗаписатьЦелое16(20, 0);         // длина комментария
	// Смещение Central Directory заполнить позже
	
	фРезультат.ОбластьLFH  = ОбластьLFH;
	фРезультат.ОбластьDD   = ОбластьDD;
	фРезультат.ОбластьCDFH = ОбластьCDFH;
	фРезультат.ОбластьEOCD = ОбластьEOCD;
	
	Возврат Новый ФиксированнаяСтруктура(фРезультат);
КонецФункции

Функция ДопустимыеСимволыИмениЗаголовка() Экспорт
	фРезультат = Новый Соответствие;
	
	Буквы = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
	ДопустимыеСимволы = Буквы + НРег(Буквы) + "0123456789!#$%&'*+-.^_`|~";
	
	Для я = 1 По СтрДлина(ДопустимыеСимволы) Цикл
		фРезультат.Вставить(Сред(ДопустимыеСимволы, я, 1), Истина);
	КонецЦикла;
	
	Возврат Новый ФиксированноеСоответствие(фРезультат);
КонецФункции
