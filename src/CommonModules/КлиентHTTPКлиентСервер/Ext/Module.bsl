
// SPDX-License-Identifier: Apache-2.0+

#Область ЭКСПОРТНЫЕ_ПРОЦЕДУРЫ_И_ФУНКЦИИ
// Реализация GET (выбрасывает исключения)
//
// Параметры:
//     ИдентификаторРесурса - Строка - URI сервиса
//     ПараметрыЗапроса - Соответствие - коллекция параметров GET-запроса (необязательный)
//     ДополнительныеПараметры - Структура - конфигурация выполнения POST-запроса (необязательный)
//
// Возвращаемое значение:
//     ФиксированнаяСтруктура - ключи: КодСостояния, Заголовки, Тело, ИмяФайлаТела
//
Функция Получить(Знач ИдентификаторРесурса, Знач ПараметрыЗапроса = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	Возврат ВыполнитьЗапросHTTP(
		КлиентHTTPПовтИсп.МетодGET(),
		КонфигурацияЗапроса(ИдентификаторРесурса, ПараметрыЗапроса, ДополнительныеПараметры)
	);
КонецФункции

// Реализация HEAD
//
// Параметры:
//     ИдентификаторРесурса - Строка - URI сервиса
//     ПараметрыЗапроса - Соответствие - коллекция параметров запроса (необязательный)
//     ДополнительныеПараметры - Структура - конфигурация выполнения запроса (необязательный)
//
// Возвращаемое значение:
//     ФиксированнаяСтруктура - ключи: КодСостояния, Заголовки, Тело, ИмяФайлаТела
//
Функция ПолучитьЗаголовки(Знач ИдентификаторРесурса, Знач ПараметрыЗапроса = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	Возврат ВыполнитьЗапросHTTP(
		КлиентHTTPПовтИсп.МетодHEAD(),
		КонфигурацияЗапроса(ИдентификаторРесурса, ПараметрыЗапроса, ДополнительныеПараметры)
	);
КонецФункции

// Реализация POST
//
// Параметры:
//     ИдентификаторРесурса - Строка - URI сервиса
//     Данные - ДвоичныеДанные - тело запроса
//     ДополнительныеПараметры - Структура - конфигурация выполнения запроса (необязательный)
//     ПараметрыЗапроса - Соответствие - коллекция параметров запроса (необязательный)
//
// Возвращаемое значение:
//     ФиксированнаяСтруктура - ключи: КодСостояния, Заголовки, Тело, ИмяФайлаТела
//
Функция ОтправитьДвоичныеДанные(Знач ИдентификаторРесурса, Знач Данные, ДополнительныеПараметры = Неопределено, Знач ПараметрыЗапроса = Неопределено) Экспорт
	Конфигурация = КонфигурацияЗапроса(ИдентификаторРесурса, ПараметрыЗапроса, ДополнительныеПараметры);
	
	ДобавитьРазмерДанныхВЗаголовкиЗапроса(Конфигурация.Заголовки, Конфигурация.ДополнительныеПараметры, Данные);
	
	Возврат ВыполнитьЗапросHTTP(КлиентHTTPПовтИсп.МетодPOST(), Конфигурация, Данные);
КонецФункции

// Реализация PUT
//
// Параметры:
//     ИдентификаторРесурса - Строка - URI сервиса
//     Данные - ДвоичныеДанные - тело запроса
//     ДополнительныеПараметры - Структура - конфигурация выполнения запроса (необязательный)
//     ПараметрыЗапроса - Соответствие - коллекция параметров запроса (необязательный)
//
// Возвращаемое значение:
//     ФиксированнаяСтруктура - ключи: КодСостояния, Заголовки, Тело, ИмяФайлаТела
//
Функция ЗаписатьДвоичныеДанные(Знач ИдентификаторРесурса, Знач Данные, ДополнительныеПараметры = Неопределено, Знач ПараметрыЗапроса = Неопределено) Экспорт
	Конфигурация = КонфигурацияЗапроса(ИдентификаторРесурса, ПараметрыЗапроса, ДополнительныеПараметры);
	
	ДобавитьРазмерДанныхВЗаголовкиЗапроса(Конфигурация.Заголовки, Конфигурация.ДополнительныеПараметры, Данные);
	
	Возврат ВыполнитьЗапросHTTP(КлиентHTTPПовтИсп.МетодPUT(), Конфигурация, Данные);
КонецФункции

// Реализация DELETE
//
// Параметры:
//     ИдентификаторРесурса - Строка - URI сервиса
//     Данные - Строка - тело запроса (необязательный)
//     ДополнительныеПараметры - Структура - конфигурация выполнения запроса (необязательный)
//     ПараметрыЗапроса - Соответствие - коллекция параметров запроса (необязательный)
//
// Возвращаемое значение:
//     ФиксированнаяСтруктура - ключи: КодСостояния, Заголовки, Тело, ИмяФайлаТела
//
Функция Удалить(Знач ИдентификаторРесурса, Знач Данные = "", ДополнительныеПараметры = Неопределено, Знач ПараметрыЗапроса = Неопределено) Экспорт
	Конфигурация = КонфигурацияЗапроса(ИдентификаторРесурса, ПараметрыЗапроса, ДополнительныеПараметры);
	
	Если НЕ ПустаяСтрока(Данные) Тогда
		ДобавитьКодировкуВЗаголовкиЗапроса(Конфигурация.Заголовки, Конфигурация.ДополнительныеПараметры);
		ДобавитьРазмерДанныхВЗаголовкиЗапроса(Конфигурация.Заголовки, Конфигурация.ДополнительныеПараметры, Данные);
	КонецЕсли;
	
	Возврат ВыполнитьЗапросHTTP(КлиентHTTPПовтИсп.МетодDELETE(), Конфигурация, Данные);
КонецФункции


#Область ДЕКОРАТОРЫ
// Реализация POST
//
// Параметры:
//     ИдентификаторРесурса - Строка - URI сервиса
//     Данные - Строка - тело запроса
//     ДополнительныеПараметры - Структура - конфигурация выполнения запроса (необязательный)
//     ПараметрыЗапроса - Соответствие - коллекция параметров запроса (необязательный)
//
// Возвращаемое значение:
//     ФиксированнаяСтруктура - ключи: КодСостояния, Заголовки, Тело, ИмяФайлаТела
//
Функция ОтправитьТекст(Знач ИдентификаторРесурса, Знач Данные, ДополнительныеПараметры = Неопределено, Знач ПараметрыЗапроса = Неопределено) Экспорт
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = НовыеДополнительныеПараметры();
	КонецЕсли;
	
	Если НЕ ДополнительныеПараметры.Свойство("ТипMIME") Тогда
		УстановитьТипMIME(ДополнительныеПараметры, КлиентHTTPПовтИсп.ТипMIMEText());
	КонецЕсли;
	Если НЕ ДополнительныеПараметры.Свойство("Кодировка") Тогда
		УстановитьКодировку(ДополнительныеПараметры, КлиентHTTPПовтИсп.КодировкаПоУмолчанию());
	КонецЕсли;
	
	Возврат ОтправитьДвоичныеДанные(
		ИдентификаторРесурса,
		ПолучитьДвоичныеДанныеИзСтроки(Данные, ДополнительныеПараметры.Кодировка),
		ДополнительныеПараметры,
		ПараметрыЗапроса
	);
КонецФункции

// Реализация POST. При отсутствии файла генерируется исключение
//
// Параметры:
//     ИдентификаторРесурса - Строка - URI сервиса
//     Данные - Файл - тело запроса
//     ДополнительныеПараметры - Структура - конфигурация выполнения запроса (необязательный)
//     ПараметрыЗапроса - Соответствие - коллекция параметров запроса (необязательный)
//
// Возвращаемое значение:
//     ФиксированнаяСтруктура - ключи: КодСостояния, Заголовки, Тело, ИмяФайлаТела
//
Функция ОтправитьФайл(Знач ИдентификаторРесурса, Знач Данные, ДополнительныеПараметры = Неопределено, Знач ПараметрыЗапроса = Неопределено) Экспорт
	Если НЕ Данные.Существует() Тогда
		ВызватьИсключение СтрШаблон("Файл %1 не существует", Данные.ПолноеИмя);
	КонецЕсли;
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = НовыеДополнительныеПараметры();
	КонецЕсли;
	
	Если НЕ ДополнительныеПараметры.Свойство("ТипMIME") Тогда
		УстановитьТипMIME(ДополнительныеПараметры, КлиентHTTPСлужебный.ТипMIMEРасширенияФайла(Данные.Расширение));
	КонецЕсли;
	
	Возврат ОтправитьДвоичныеДанные(
		ИдентификаторРесурса,
		Новый ДвоичныеДанные(Данные.ПолноеИмя),
		ДополнительныеПараметры,
		ПараметрыЗапроса
	);
КонецФункции

// Реализация POST. При отсутствии файла генерируется исключение
//
// Параметры:
//     ИдентификаторРесурса - Строка - URI сервиса
//     Данные - Массив - поля тела запроса типа Структура с ключами: Наименование, Значение[, Файл]
//     ДополнительныеПараметры - Структура - конфигурация выполнения запроса (необязательный)
//     ПараметрыЗапроса - Соответствие - коллекция параметров запроса (необязательный)
//
// Возвращаемое значение:
//     ФиксированнаяСтруктура - ключи: КодСостояния, Заголовки, Тело, ИмяФайлаТела
//
// Поля тела запроса. Ключи:
//     Наименование - Строка - имя поля
//     Значение - Строка | Файл - значение поля
//     ТипMIME - Строка - тип значения поля (необязательный)
//     Файл - Структура - (все ключи являются необязательными) ключи: Имя, ТипMIME, Кодировка
//
Функция ОтправитьДанныеФормы(Знач ИдентификаторРесурса, Знач Данные, ДополнительныеПараметры = Неопределено, Знач ПараметрыЗапроса = Неопределено) Экспорт
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = НовыеДополнительныеПараметры();
	КонецЕсли;
	
	Разделитель = ?(ДополнительныеПараметры.Свойство("Разделитель"), ДополнительныеПараметры.Разделитель, XMLСтрока(Новый УникальныйИдентификатор));
	_Разделитель = "--" + Разделитель;
	_Разделитель_ = _Разделитель + "--";
	
	УстановитьТипMIME(ДополнительныеПараметры, КлиентHTTPПовтИсп.ТипMIMEMultipartFromData());
	
	Поток = Новый ПотокВПамяти;
	Запись = Новый ЗаписьДанных(Поток, КодировкаИзДопПараметров(ДополнительныеПараметры));
	
	Для Каждого ПолеФормы Из Данные Цикл
		Запись.ЗаписатьСтроку("");
		Запись.ЗаписатьСтроку(_Разделитель);
		
		Если ПолеФормы.Свойство("Файл") Тогда
			Если НЕ ПолеФормы.Значение.Существует() Тогда
				ВызватьИсключение СтрШаблон("Файл %1 не существует", ПолеФормы.Значение.ПолноеИмя);
			КонецЕсли;
			
			СтрокаПоля = СтрШаблон("Content-Disposition: attachment; name=""%1""", ПолеФормы.Ключ);
			
			ИмяФайла = ?(ПолеФормы.Файл.Свойство("ИмяФайла"), ПолеФормы.Файл.ИмяФайла, ПолеФормы.Значение.Имя);
			Если НЕ ПустаяСтрока(ИмяФайла) Тогда
				СтрокаПоля = СтрШаблон("%1; filename=""%2""", СтрокаПоля, ИмяФайла);
			КонецЕсли;
			
			Запись.ЗаписатьСтроку(СтрокаПоля);
			Если ПолеФормы.Файл.Свойство("ТипMIME") Тогда
				Запись.ЗаписатьСтроку("Content-Type: " + ПолеФормы.Файл.ТипMIME);
			КонецЕсли;
			Если ПолеФормы.Файл.Свойство("Кодировка") Тогда
				Запись.ЗаписатьСтроку("Content-Transfer-Encoding: " + ПолеФормы.Файл.Кодировка);
			КонецЕсли;
			Запись.ЗаписатьСтроку("");
			Запись.Записать(Новый ДвоичныеДанные(ПолеФормы.Значение.ПолноеИмя));
			Запись.ЗаписатьСтроку("");
		Иначе
			Запись.ЗаписатьСтроку(СтрШаблон("Content-Disposition: form-data; name=""%1""", ПолеФормы.Ключ));
			
			Если ПолеФормы.Свойство("ТипMIME") Тогда
				Запись.ЗаписатьСтроку("Content-Type: " + ПолеФормы.ТипMIME);
			КонецЕсли;
			Если ПолеФормы.Свойство("Кодировка") Тогда
				Запись.ЗаписатьСтроку("Content-Transfer-Encoding: " + ПолеФормы.Файл.Кодировка);
			КонецЕсли;
			Запись.ЗаписатьСтроку("");
			Запись.ЗаписатьСтроку(ПолеФормы.Значение);
		КонецЕсли;
		
		Запись.ЗаписатьСтроку(_Разделитель_);
	КонецЦикла;
	
	Возврат ОтправитьДвоичныеДанные(ИдентификаторРесурса, Поток.ЗакрытьИПолучитьДвоичныеДанные(), ДополнительныеПараметры, ПараметрыЗапроса);
КонецФункции

// Реализация PUT
//
// Параметры:
//     ИдентификаторРесурса - Строка - URI сервиса
//     Данные - Строка - тело запроса
//     ДополнительныеПараметры - Структура - конфигурация выполнения запроса (необязательный)
//     ПараметрыЗапроса - Соответствие - коллекция параметров запроса (необязательный)
//
// Возвращаемое значение:
//     ФиксированнаяСтруктура - ключи: КодСостояния, Заголовки, Тело, ИмяФайлаТела
//
Функция ЗаписатьТекст(Знач ИдентификаторРесурса, Знач Данные, ДополнительныеПараметры = Неопределено, Знач ПараметрыЗапроса = Неопределено) Экспорт
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = НовыеДополнительныеПараметры();
	КонецЕсли;
	
	Если НЕ ДополнительныеПараметры.Свойство("ТипMIME") Тогда
		УстановитьТипMIME(ДополнительныеПараметры, КлиентHTTPПовтИсп.ТипMIMEText());
	КонецЕсли;
	Если НЕ ДополнительныеПараметры.Свойство("Кодировка") Тогда
		УстановитьКодировку(ДополнительныеПараметры, КлиентHTTPПовтИсп.КодировкаПоУмолчанию());
	КонецЕсли;
	
	Возврат ЗаписатьДвоичныеДанные(
		ИдентификаторРесурса,
		ПолучитьДвоичныеДанныеИзСтроки(Данные, ДополнительныеПараметры.Кодировка),
		ДополнительныеПараметры,
		ПараметрыЗапроса
	);
КонецФункции

// Реализация PUT. При отсутствии файла генерируется исключение
//
// Параметры:
//     ИдентификаторРесурса - Строка - URI сервиса
//     Данные - Файл - тело запроса
//     ДополнительныеПараметры - Структура - конфигурация выполнения запроса (необязательный)
//     ПараметрыЗапроса - Соответствие - коллекция параметров запроса (необязательный)
//
// Возвращаемое значение:
//     ФиксированнаяСтруктура - ключи: КодСостояния, Заголовки, Тело, ИмяФайлаТела
//
Функция ЗаписатьФайл(Знач ИдентификаторРесурса, Знач Данные, ДополнительныеПараметры = Неопределено, Знач ПараметрыЗапроса = Неопределено) Экспорт
	Если НЕ Данные.Существует() Тогда
		ВызватьИсключение СтрШаблон("Файл %1 не существует", Данные.ПолноеИмя);
	КонецЕсли;
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = НовыеДополнительныеПараметры();
	КонецЕсли;
	
	Если НЕ ДополнительныеПараметры.Свойство("ТипMIME") Тогда
		УстановитьТипMIME(ДополнительныеПараметры, КлиентHTTPСлужебный.ТипMIMEРасширенияФайла(Данные.Расширение));
	КонецЕсли;
	
	Возврат ЗаписатьДвоичныеДанные(
		ИдентификаторРесурса,
		Новый ДвоичныеДанные(Данные.ПолноеИмя),
		ДополнительныеПараметры,
		ПараметрыЗапроса
	);
КонецФункции
#КонецОбласти


#Область ИНИЦИАЛИЗАТОРЫ
// Возвращает новую пустую коллекцию параметров HTTP-запроса
//
// Возвращаемое значение:
//     Соответствие
//
Функция НовыеПараметрыЗапроса() Экспорт
	Возврат Новый Соответствие;
КонецФункции

// Возвращает новую пустую конфигурацию выполнения HTTP-запроса
//
// Возвращаемое значение:
//     Структура
//
Функция НовыеДополнительныеПараметры() Экспорт
	Возврат Новый Структура;
КонецФункции

// Возвращает копию конфигурации выполнения HTTP-запроса
//
// Параметры:
//     ДополнительныеПараметры - Структура - коллекция параметров выполнения запроса
//
// Возвращаемое значение:
//     Структура
//
Функция КопияДополнительныхПараметров(Знач ДополнительныеПараметры) Экспорт
	фРезультат = НовыеДополнительныеПараметры();
	
	Для Каждого КЗ Из ДополнительныеПараметры Цикл
		фРезультат.Вставить(КЗ.Ключ, КЗ.Значение);
	КонецЦикла;
	
	Возврат фРезультат;
КонецФункции

// Возвращает новую пустую коллекцию полей формы тела HTTP-запроса
//
// Возвращаемое значение:
//     Массив
//
Функция НовыеПоляФормы() Экспорт
	Возврат Новый Массив;
КонецФункции
#КонецОбласти


#Область ТЕКУЧИЙ_ИНТЕРФЕЙС
// Установка значения параметра HTTP-запроса
//
// Параметры:
//     ПараметрыЗапроса - Соответствие - коллекция параметров запроса
//     Ключ - Строка - имя параметра
//     Значение - Строка - значение параметра
//
// Возвращаемое значение:
//     ОбщийМодуль.РаботаСHttp - модуль вызова функции
//
Функция УстановитьПараметр(ПараметрыЗапроса, Знач Ключ, Знач Значение) Экспорт
	Значения = Новый Массив;
	Значения.Добавить(Значение);
	
	ПараметрыЗапроса.Вставить(Ключ, Значения);
	
	Возврат КлиентHTTPКлиентСервер;
КонецФункции

// Добавление очередного значения параметра HTTP-запроса к уже имеющимся
//
// Параметры:
//     ПараметрыЗапроса - Соответствие - коллекция параметров запроса
//     Ключ - Строка - имя параметра
//     Значение - Строка - значение параметра
//
// Возвращаемое значение:
//     ОбщийМодуль.РаботаСHttp - модуль вызова функции
//
Функция ДобавитьПараметр(ПараметрыЗапроса, Знач Ключ, Знач Значение) Экспорт
	Значения = ПараметрыЗапроса.Получить(Ключ);
	Если Значения = Неопределено Тогда
		УстановитьПараметр(ПараметрыЗапроса, Ключ, Значение);
	Иначе
		Значения.Добавить(Значение);
	КонецЕсли;
	
	Возврат КлиентHTTPКлиентСервер;
КонецФункции

// Установка заголовка HTTP-запроса
//
// Параметры:
//     ДополнительныеПараметры - Структура - конфигурация выполнения запроса
//     Ключ - Строка - имя заголовка
//     Значение - Строка - значение заголовка
//
// Возвращаемое значение:
//     ОбщийМодуль.РаботаСHttp - модуль вызова функции
//
Функция УстановитьЗаголовок(ДополнительныеПараметры, Знач Ключ, Знач Значение) Экспорт
	Перем Заголовки;
	
	Если НЕ ДополнительныеПараметры.Свойство("Заголовки", Заголовки) Тогда
		Заголовки = Новый Соответствие;
		ДополнительныеПараметры.Вставить("Заголовки", Заголовки);
	КонецЕсли;
	
	Заголовки.Вставить(Ключ, Значение);
	
	Возврат КлиентHTTPКлиентСервер;
КонецФункции

// Установка произвольного дополнительного параметра выполнения HTTP-запроса
//
// Параметры:
//     ДополнительныеПараметры - Структура - конфигурация выполнения запроса
//     Ключ - Строка - имя дополнительного параметра
//     Значение - Строка - значение дополнительного параметра
//
// Возвращаемое значение:
//     ОбщийМодуль.РаботаСHttp - модуль вызова функции
//
Функция УстановитьДополнительныйПараметр(ДополнительныеПараметры, Знач Ключ, Знач Значение) Экспорт
	ДополнительныеПараметры.Вставить(Ключ, Значение);
	
	Возврат КлиентHTTPКлиентСервер;
КонецФункции

// Инициализация сессии
//
// Параметры:
//     ДополнительныеПараметры - Структура - конфигурация выполнения запроса
//
// Возвращаемое значение:
//     ОбщийМодуль.РаботаСHttp - модуль вызова функции
//
Функция ИспользоватьСессию(ДополнительныеПараметры) Экспорт
	Если НЕ ДополнительныеПараметры.Свойство("Сессия") Тогда
		ДополнительныеПараметры.Вставить("Сессия", Новый Структура);
		
		УстановитьПорогПеренаправлений(ДополнительныеПараметры, 10);
	КонецЕсли;
	
	Возврат КлиентHTTPКлиентСервер;
КонецФункции

// Установка максимального количества перенаправлений
//
// Параметры:
//     ДополнительныеПараметры - Структура - конфигурация выполнения запроса
//     ПорогПеренаправлений - Число - максимальное количество перенаправлений
//
// Возвращаемое значение:
//     ОбщийМодуль.РаботаСHttp - модуль вызова функции
//
Функция УстановитьПорогПеренаправлений(ДополнительныеПараметры, Знач ПорогПеренаправлений) Экспорт
	Если НЕ ДополнительныеПараметры.Свойство("Сессия") Тогда
		ИспользоватьСессию(ДополнительныеПараметры);
	КонецЕсли;
	
	ДополнительныеПараметры.Сессия.Вставить("ПорогПеренаправлений", ПорогПеренаправлений);
	
	Возврат КлиентHTTPКлиентСервер;
КонецФункции

// Установка Basic-авторизации
//
// Параметры:
//     ДополнительныеПараметры - Структура - конфигурация выполнения запроса
//     Пользователь - Строка - пользователь авторизации
//     Пароль - Строка - пароль авторизации
//
// Возвращаемое значение:
//     ОбщийМодуль.РаботаСHttp - модуль вызова функции
//
Функция УстановитьBasicАвторизацию(ДополнительныеПараметры, Знач Пользователь, Знач Пароль) Экспорт
	ДополнительныеПараметры.Вставить("Аутентификация", ОбъектАутентификации("Basic", Пользователь, Пароль));
	
	Возврат КлиентHTTPКлиентСервер;
КонецФункции

// Установка NTLM-авторизации
//
// Параметры:
//     ДополнительныеПараметры - Структура - конфигурация выполнения запроса
//     Пользователь - Строка - пользователь авторизации
//     Пароль - Строка - пароль авторизации
//
// Возвращаемое значение:
//     ОбщийМодуль.РаботаСHttp - модуль вызова функции
//
Функция УстановитьNTLMАвторизацию(ДополнительныеПараметры, Знач Пользователь, Знач Пароль) Экспорт
	ДополнительныеПараметры.Вставить("Аутентификация", ОбъектАутентификации("NTLM", Пользователь, Пароль));
	
	Возврат КлиентHTTPКлиентСервер;
КонецФункции

// Установка Digest-авторизации
//
// Параметры:
//     ДополнительныеПараметры - Структура - конфигурация выполнения запроса
//     Пользователь - Строка - пользователь авторизации
//     Пароль - Строка - пароль авторизации
//
// Возвращаемое значение:
//     ОбщийМодуль.РаботаСHttp - модуль вызова функции
//
Функция УстановитьDigestАвторизацию(ДополнительныеПараметры, Знач Пользователь, Знач Пароль) Экспорт
	ИспользоватьСессию(ДополнительныеПараметры)
		.УстановитьПорогПеренаправлений(ДополнительныеПараметры, 1);
	
	ДополнительныеПараметры.Вставить("Аутентификация", ОбъектАутентификации("Digest", Пользователь, Пароль));
	
	Возврат КлиентHTTPКлиентСервер;
КонецФункции

// Установка Bearer-авторизации
//
// Параметры:
//     ДополнительныеПараметры - Структура - конфигурация выполнения запроса
//     Токен - Строка - токен авторизации
//
// Возвращаемое значение:
//     ОбщийМодуль.РаботаСHttp - модуль вызова функции
//
Функция УстановитьBearerАвторизацию(ДополнительныеПараметры, Знач Токен) Экспорт
	ДополнительныеПараметры.Вставить("Аутентификация", ОбъектАутентификации("Bearer", Токен, ""));
	
	Возврат КлиентHTTPКлиентСервер;
КонецФункции

// Установка MIME-типа содержимого тела HTTP-запроса
//
// Параметры:
//     ДополнительныеПараметры - Структура - конфигурация выполнения запроса
//     ТипMIME - Строка - MIME-тип
//
// Возвращаемое значение:
//     ОбщийМодуль.РаботаСHttp - модуль вызова функции
//
Функция УстановитьТипMIME(ДополнительныеПараметры, Знач ТипMIME) Экспорт
	ДополнительныеПараметры.Вставить("ТипMIME", ТипMIME);
	
	Возврат КлиентHTTPКлиентСервер;
КонецФункции

// Установка кодировки текстового содержимого тела запроса
//
// Параметры:
//     ДополнительныеПараметры - Структура - конфигурация выполнения запроса
//     Кодировка - КодировкаТекста | Строка | Неопределено - кодировка  (необязательный)
//
// Возвращаемое значение:
//     ОбщийМодуль.РаботаСHttp - модуль вызова функции
//
Функция УстановитьКодировку(ДополнительныеПараметры, Знач Кодировка = Неопределено) Экспорт
	ДополнительныеПараметры.Вставить("Кодировка", ?(Кодировка = Неопределено, КлиентHTTPПовтИсп.КодировкаПоУмолчанию(), Кодировка));
	
	Возврат КлиентHTTPКлиентСервер;
КонецФункции

// Установка приемлемого сжатия ответа GZIP
//
// Параметры:
//     ДополнительныеПараметры - Структура - конфигурация выполнения запроса
//
// Возвращаемое значение:
//     ОбщийМодуль.РаботаСHttp - модуль вызова функции
//
Функция УстановитьСжатиеОтветаGZIP(ДополнительныеПараметры) Экспорт
	ДополнительныеПараметры.Вставить("СжатиеОтвета", "gzip");
	
	Возврат КлиентHTTPКлиентСервер;
КонецФункции

// Установка порта соединения
//
// Параметры:
//     ДополнительныеПараметры - Структура - конфигурация выполнения запроса
//     Порт - Число - порт соединения
//
// Возвращаемое значение:
//     ОбщийМодуль.РаботаСHttp - модуль вызова функции
//
Функция УстановитьПорт(ДополнительныеПараметры, Знач Порт) Экспорт
	ДополнительныеПараметры.Вставить("Порт", Порт);
	
	Возврат КлиентHTTPКлиентСервер;
КонецФункции

// Установка пользователя соединения
//
// Параметры:
//     ДополнительныеПараметры - Структура - конфигурация выполнения запроса
//     Пользователь - Строка - пользователь соединения
//
// Возвращаемое значение:
//     ОбщийМодуль.РаботаСHttp - модуль вызова функции
//
Функция УстановитьПользователяСоединения(ДополнительныеПараметры, Знач Пользователь) Экспорт
	ДополнительныеПараметры.Вставить("Пользователь", Пользователь);
	
	Возврат КлиентHTTPКлиентСервер;
КонецФункции

// Установка пароля соединения
//
// Параметры:
//     ДополнительныеПараметры - Структура - конфигурация выполнения запроса
//     Пароль - Строка - пароль соединения
//
// Возвращаемое значение:
//     ОбщийМодуль.РаботаСHttp - модуль вызова функции
//
Функция УстановитьПарольСоединения(ДополнительныеПараметры, Знач Пароль) Экспорт
	ДополнительныеПараметры.Вставить("Пароль", Пароль);
	
	Возврат КлиентHTTPКлиентСервер;
КонецФункции

// Установка прокси соединения
//
// Параметры:
//     ДополнительныеПараметры - Структура - конфигурация выполнения запроса
//     Прокси - ИнтернетПрокси - параметры прокси-серверов
//
// Возвращаемое значение:
//     ОбщийМодуль.РаботаСHttp - модуль вызова функции
//
Функция УстановитьПрокси(ДополнительныеПараметры, Знач Прокси) Экспорт
	ДополнительныеПараметры.Вставить("Прокси", Прокси);
	
	Возврат КлиентHTTPКлиентСервер;
КонецФункции

// Установка таймаута соединения
//
// Параметры:
//     ДополнительныеПараметры - Структура - конфигурация выполнения запроса
//     Таймаут - Число - таймаут соединения
//
// Возвращаемое значение:
//     ОбщийМодуль.РаботаСHttp - модуль вызова функции
//
Функция УстановитьТаймаут(ДополнительныеПараметры, Знач Таймаут) Экспорт
	ДополнительныеПараметры.Вставить("Таймаут", Таймаут);
	
	Возврат КлиентHTTPКлиентСервер;
КонецФункции

// Установка защищенного соединения
//
// Параметры:
//     ДополнительныеПараметры - Структура - конфигурация выполнения запроса
//     ЗащищенноеСоединение - ЗащищенноеСоединениеOpenSSL - объект защищенного соединения OpenSSL
//
// Возвращаемое значение:
//     ОбщийМодуль.РаботаСHttp - модуль вызова функции
//
Функция УстановитьЗащищенноеСоединение(ДополнительныеПараметры, Знач ЗащищенноеСоединение) Экспорт
	ДополнительныеПараметры.Вставить("ЗащищенноеСоединение", ЗащищенноеСоединение);
	
	Возврат КлиентHTTPКлиентСервер;
КонецФункции

// Установка режима использования аутентификации NTLM или Negotiate
//
// Параметры:
//     ДополнительныеПараметры - Структура - конфигурация выполнения запроса
//     Использовать - Булево - значение использования аутентификации NTLM или Negotiate на сервере
//
// Возвращаемое значение:
//     ОбщийМодуль.РаботаСHttp - модуль вызова функции
//
Функция УстановитьИспользованиеАутентификацииОС(ДополнительныеПараметры, Знач Использовать) Экспорт
	ДополнительныеПараметры.Вставить("ИспользоватьАутентификациюОС", Использовать);
	
	Возврат КлиентHTTPКлиентСервер;
КонецФункции

// Установка имени выходного файла для хранения данных ответа сервера
//
// Параметры:
//     ДополнительныеПараметры - Структура - конфигурация выполнения запроса
//     ИмяВыходногоФайла - Строка - имя выходного файла, в который записываются полученные с сервера данные
//
// Возвращаемое значение:
//     ОбщийМодуль.РаботаСHttp - модуль вызова функции
//
Функция УстановитьИмяВыходногоФайла(ДополнительныеПараметры, Знач ИмяВыходногоФайла) Экспорт
	ДополнительныеПараметры.Вставить("ИмяВыходногоФайла", ИмяВыходногоФайла);
	
	Возврат КлиентHTTPКлиентСервер;
КонецФункции

// Добавление очередного текстового поля формы в теле HTTP-запроса
//
// Параметры:
//     ПоляФормы - Массив - коллекция полей формы
//     Ключ - Строка - наименование поля
//     Значение - Строка - значение текстового поля
//     ТипMIME - Строка | Неопределено - MIME-тип (необязательный)
//
// Возвращаемое значение:
//     ОбщийМодуль.РаботаСHttp - модуль вызова функции
//
Функция ДобавитьПолеФормыТекст(ПоляФормы, Знач Ключ, Знач Значение, Знач ТипMIME = Неопределено, Знач Кодировка = Неопределено) Экспорт
	Поле = Новый Структура("Ключ, Значение", Ключ, Значение);
	
	Если ТипMIME <> Неопределено Тогда
		Поле.Вставить("ТипMIME", ТипMIME);
	КонецЕсли;
	Если Кодировка <> Неопределено Тогда
		Поле.Вставить("Кодировка", Кодировка);
	КонецЕсли;
	
	ПоляФормы.Добавить(Поле);
	
	Возврат КлиентHTTPКлиентСервер;
КонецФункции

// Добавление очередного поля с файлом в форме тела HTTP-запроса
//
// Параметры:
//     ПоляФормы - Массив - коллекция полей формы
//     Ключ - Строка - наименование поля
//     Значение - Файл - объект доступа к файлу
//     ИмяФайла - Строка | Неопределено - имя файла в поле формы (необязательный)
//     ТипMIME - Строка | Неопределено - MIME-тип (необязательный)
//     Кодировка - КодировкаТекста | Строка | Неопределено - кодировка (необязательный)
//
// Возвращаемое значение:
//     ОбщийМодуль.РаботаСHttp - модуль вызова функции
//
Функция ДобавитьПолеФормыФайл(ПоляФормы, Знач Ключ, Знач Значение, ИмяФайла = Неопределено, Знач ТипMIME = Неопределено, Знач Кодировка = Неопределено) Экспорт
	Поле = Новый Структура("Ключ, Значение, Файл", Ключ, Значение, Новый Структура);
	
	Если ИмяФайла <> Неопределено Тогда
		Поле.Файл.Вставить("ИмяФайла", ИмяФайла);
	КонецЕсли;
	Если ТипMIME <> Неопределено Тогда
		Поле.Файл.Вставить("ТипMIME", ТипMIME);
	КонецЕсли;
	Если Кодировка <> Неопределено Тогда
		Поле.Файл.Вставить("Кодировка", Кодировка);
	КонецЕсли;
	
	ПоляФормы.Добавить(Поле);
	
	Возврат КлиентHTTPКлиентСервер;
КонецФункции

// Установка разделителя полей формы в теле HTTP-запроса
//
// Параметры:
//     ДополнительныеПараметры - Структура - конфигурация выполнения запроса
//     Разделитель - Строка - разделитель полей
//
// Возвращаемое значение:
//     ОбщийМодуль.РаботаСHttp - модуль вызова функции
//
Функция УстановитьРазделительПолейФормы(ДополнительныеПараметры, Знач Разделитель) Экспорт
	ДополнительныеПараметры.Вставить("Разделитель", Разделитель);
	
	Возврат КлиентHTTPКлиентСервер;
КонецФункции
#КонецОбласти


// Возвращает строку параметров URL из множества
//
// Параметры:
//     Параметры - Соответствие - коллекция пар имя/значение параметров HTTP-запроса
//
// Возвращаемое значение:
//     Строка
//
Функция ПараметрыЗапросаСтрокой(Знач Параметры) Экспорт
	фРезультат = Новый Массив;
	
	Для Каждого КЗ Из Параметры Цикл
		ИмяПараметра = ФорматированноеИмяПараметраЗапроса(КЗ.Ключ);
		Если ПустаяСтрока(ИмяПараметра) Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ЗначениеПараметра Из КЗ.Значение Цикл
			фРезультат.Добавить(ИмяПараметра + "=" + ФорматированноеЗначениеПараметраЗапроса(ЗначениеПараметра));
		КонецЦикла;
	КонецЦикла;
	
	Возврат ?(фРезультат.Количество() = 0, "", "?" + СтрСоединить(фРезультат, "&"));
КонецФункции

// Копирует cookies конфигурации-источника в конфигурацию-приёмник
//
// Параметры:
//     КонфигурацияПриемник - Структура - конфигурация выполнения запроса
//     КонфигурацияИсточник - Структура - конфигурация выполнения запроса
//     Заменять - Булево - заменять Cookie при совпадении имени
//
Процедура СкопироватьПеченье(КонфигурацияПриемник, Знач КонфигурацияИсточник, Знач Заменять = Истина) Экспорт
	Если НЕ КонфигурацияИсточник.Свойство("Сессия") Тогда
		Возврат;
	КонецЕсли;
	Если НЕ КонфигурацияИсточник.Сессия.Свойство("Печенье") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ КонфигурацияПриемник.Свойство("Сессия") Тогда
		КонфигурацияПриемник.Вставить("Сессия", Новый Структура);
	КонецЕсли;
	Если НЕ КонфигурацияПриемник.Сессия.Свойство("Печенье") Тогда
		КонфигурацияПриемник.Сессия.Вставить("Печенье", Новый Соответствие);
	КонецЕсли;
	
	ОбъединитьПеченье(КонфигурацияПриемник.Сессия.Печенье, КонфигурацияИсточник.Сессия.Печенье, Заменять);
КонецПроцедуры

// Возвращает MIME-тип из заголовков
//
// Параметры:
//     Заголовки - Соответствие - коллекция заголовков
//
// Возвращаемое значение:
//     Строка | Неопределено
//
Функция ТипMIMEИзЗаголовков(Знач Заголовки) Экспорт
	ТипКонтента = ЗначениеЗаголовка("Content-Type", Заголовки);
	Если ТипКонтента = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПозицияОкончанияТипаMIME = СтрНайти(ТипКонтента, ";");
	
	Возврат ?(ПозицияОкончанияТипаMIME = 0, ТипКонтента, Лев(ТипКонтента, ПозицияОкончанияТипаMIME - 1));
КонецФункции

// Возвращает кодировку из заголовков
//
// Параметры:
//     Заголовки - Соответствие - коллекция заголовков
//
// Возвращаемое значение:
//     Строка | Неопределено
//
Функция КодировкаИзЗаголовков(Знач Заголовки) Экспорт
	ТипКонтента = ЗначениеЗаголовка("Content-Type", Заголовки);
	Если ТипКонтента = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПозицияКодировки = СтрНайти(НРег(ТипКонтента), "charset=");
	
	Возврат ?(ПозицияКодировки = 0, Неопределено, Сред(ТипКонтента, ПозицияКодировки + 8));
КонецФункции
#КонецОбласти


#Область СЛУЖЕБНЫЕ_ПРОЦЕДУРЫ_И_ФУНКЦИИ
Функция ВыполнитьЗапросHTTP(Знач Метод, Знач Конфигурация, Знач Данные = Неопределено, Знач НомерПеренаправления = 0)
	Соединение = НовоеHTTPСоединение(Конфигурация.ДанныеURI, Конфигурация.ДополнительныеПараметры);
	Запрос = Новый HTTPЗапрос(АдресРесурсаЗапроса(Конфигурация), Конфигурация.Заголовки);
	
	Если Метод = КлиентHTTPПовтИсп.МетодPOST() ИЛИ Метод = КлиентHTTPПовтИсп.МетодPUT() ИЛИ Метод = КлиентHTTPПовтИсп.МетодDELETE() Тогда
		Если ТипЗнч(Данные) = Тип("Строка") Тогда
			Запрос.УстановитьТелоИзСтроки(Данные, КодировкаИзДопПараметров(Конфигурация.ДополнительныеПараметры));
		Иначе
			Запрос.УстановитьТелоИзДвоичныхДанных(Данные);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОбработанныйОтвет(
		Соединение.ВызватьHTTPМетод(Метод, Запрос, ИмяВыходногоФайлаИзДопПараметров(Конфигурация.ДополнительныеПараметры)),
		Конфигурация,
		КонтекстВыполнения(Метод, НомерПеренаправления, Данные)
	);
КонецФункции

Функция КонтекстВыполнения(Знач Метод, Знач НомерПеренаправления, Знач Данные)
	Возврат Новый ФиксированнаяСтруктура("Метод, НомерПеренаправления, Данные", Метод, НомерПеренаправления, Данные);
КонецФункции

Функция КонфигурацияЗапроса(Знач ИдентификаторРесурса, Знач ПараметрыЗапроса = Неопределено, ДополнительныеПараметры = Неопределено)
	Если ПараметрыЗапроса = Неопределено Тогда
		ПараметрыЗапроса = НовыеПараметрыЗапроса();
	КонецЕсли;
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = НовыеДополнительныеПараметры();
	КонецЕсли;
	
	ДанныеURI = СтруктураИдентификатораРесурса(ИдентификаторРесурса);
	Параметры = ОбъединениеПараметровЗапросаВСтроку(ДанныеURI.Параметры, ПараметрыЗапроса);
	Заголовки = ЗаголовкиЗапроса(ДанныеURI, ДополнительныеПараметры);
	
	Возврат Новый Структура("ДанныеURI, Параметры, Заголовки, ДополнительныеПараметры", ДанныеURI, Параметры, Заголовки, ДополнительныеПараметры);
КонецФункции

Функция СтруктураИдентификатораРесурса(Знач ИдентификаторРесурса)
	фРезультат = Новый Структура(
		"Сервер, АдресРесурса, Пользователь, Пароль, Порт, ЗащищенноеСоединение, Параметры",
		"",
		"/",
		"",
		"",
		80,
		Ложь,
		Неопределено
	);
	
	ПозицияНачалаПоиска = 8;
	
	Если СтрНачинаетсяС(ИдентификаторРесурса, "https://") Тогда
		ПозицияНачалаПоиска = 9;
		
		фРезультат.ЗащищенноеСоединение = Истина;
		фРезультат.Порт = 443;
	ИначеЕсли НЕ СтрНачинаетсяС(ИдентификаторРесурса, "http://") Тогда
		ВызватьИсключение "Не удалось разобрать URI";
	КонецЕсли;
	
	ДлинаИдентификатораРесурса = СтрДлина(ИдентификаторРесурса);
	ПозицияНачалаАдресаРесурса = СтрНайти(ИдентификаторРесурса, "/", , ПозицияНачалаПоиска);
	ПозицияНачалаСтрокиПараметров = СтрНайти(ИдентификаторРесурса, "?", , ПозицияНачалаПоиска); // допущение: пароль не содержит символ '?'
	
	Обращение = Сред(ИдентификаторРесурса, ПозицияНачалаПоиска, ?(ПозицияНачалаАдресаРесурса = 0, ПозицияНачалаСтрокиПараметров, ПозицияНачалаАдресаРесурса) - ПозицияНачалаПоиска);
	ДлинаОбращения = СтрДлина(Обращение);
	
	ПозицияПослеАвторизации = СтрНайти(Обращение, "@");
	Авторизация = Лев(Обращение, ПозицияПослеАвторизации - 1);
	ДлинаАвторизации = СтрДлина(Авторизация);
	Если ДлинаАвторизации > 0 Тогда
		ПозицияРазделителяАвторизации = СтрНайти(Авторизация, ":");
		ПозицияРазделителяАвторизации = ?(ПозицияРазделителяАвторизации = 0, ДлинаАвторизации + 1, ПозицияРазделителяАвторизации);
		
		фРезультат.Пользователь = СокрЛП(Лев(Авторизация, ПозицияРазделителяАвторизации - 1));
		фРезультат.Пароль       = Прав(Авторизация, ДлинаАвторизации - ПозицияРазделителяАвторизации); 	
	КонецЕсли;
	
	ИмяХоста = Прав(Обращение, ДлинаОбращения - ПозицияПослеАвторизации);
	
	ПозицияПорта = СтрНайти(ИмяХоста, ":");
	Если ПозицияПорта > 0 Тогда
		фРезультат.Порт = Число(Сред(ИмяХоста, ПозицияПорта + 1, ?(ПозицияНачалаАдресаРесурса = 0, ПозицияНачалаСтрокиПараметров - ПозицияНачалаПоиска, ПозицияНачалаАдресаРесурса) - ПозицияПорта));
	КонецЕсли;
	
	фРезультат.Сервер = ?(ПозицияПорта = 0, ИмяХоста, Лев(ИмяХоста, ПозицияПорта - 1));
	
	Если ПозицияНачалаАдресаРесурса > 0 Тогда
		фРезультат.АдресРесурса = Сред(
			ИдентификаторРесурса,
			ПозицияНачалаАдресаРесурса,
			?(
				ПозицияНачалаСтрокиПараметров = 0,
				ДлинаИдентификатораРесурса + 1,
				ПозицияНачалаСтрокиПараметров
			) - ПозицияНачалаАдресаРесурса
		);
	КонецЕсли;
	
	ПараметрыИдентификатора = НовыеПараметрыЗапроса();
	
	ПараметрыСтрока = ?(
		ПозицияНачалаСтрокиПараметров = 0,
		"",
		Сред(ИдентификаторРесурса, ПозицияНачалаСтрокиПараметров + 1)
	);
	
	Параметры = СтрРазделить(ПараметрыСтрока, "&", Ложь);
	Для Каждого Параметр Из Параметры Цикл
		ПозицияРазделителя = СтрНайти(Параметр, "=");
		Если ПозицияРазделителя = 0 Тогда
			ПозицияРазделителя = СтрДлина(Параметр) + 1;
		КонецЕсли;
		
		ИмяПараметра = Лев(Параметр, ПозицияРазделителя - 1);
		Если ПустаяСтрока(ИмяПараметра) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗначениеПараметра = Сред(Параметр, ПозицияРазделителя + 1);
		
		ДобавитьПараметр(ПараметрыИдентификатора, ИмяПараметра, ЗначениеПараметра);
	КонецЦикла;
	
	фРезультат.Параметры = ПараметрыИдентификатора;
	
	Возврат фРезультат;
КонецФункции

Функция НовоеHTTPСоединение(Знач ДанныеURI, Знач ДополнительныеПараметры)
	КонфигурацияСоединения = Новый Структура(
		"Сервер, Порт",
		ДанныеURI.Сервер,
		?(ДополнительныеПараметры.Свойство("Порт"), ДополнительныеПараметры.Порт, ДанныеURI.Порт)
	);
	
	Если НЕ ДополнительныеПараметры.Свойство("ЗащищенноеСоединение") И ДанныеURI.ЗащищенноеСоединение Тогда
		КонфигурацияСоединения.Вставить("ЗащищенноеСоединение", Новый ЗащищенноеСоединениеOpenSSL());
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ДанныеURI.Пользователь) Тогда
		КонфигурацияСоединения.Вставить("Пользователь", ДанныеURI.Пользователь);
		КонфигурацияСоединения.Вставить("Пароль",       ДанныеURI.Пароль);
	КонецЕсли;
	
	Для Каждого Ключ Из СтрРазделить("Пользователь,Пароль,Прокси,Таймаут,ИспользоватьАутентификациюОС", ",") Цикл
		Если ДополнительныеПараметры.Свойство(Ключ) Тогда 
			КонфигурацияСоединения.Вставить(Ключ, ДополнительныеПараметры[Ключ]);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый HTTPСоединение(
		КонфигурацияСоединения.Сервер,
		КонфигурацияСоединения.Порт,
		?(КонфигурацияСоединения.Свойство("Пользователь"),                 КонфигурацияСоединения.Пользователь,                 ""),
		?(КонфигурацияСоединения.Свойство("Пароль"),                       КонфигурацияСоединения.Пароль,                       ""),
		?(КонфигурацияСоединения.Свойство("Прокси"),                       КонфигурацияСоединения.Прокси,                       Неопределено),
		?(КонфигурацияСоединения.Свойство("Таймаут"),                      КонфигурацияСоединения.Таймаут,                      0),
		?(КонфигурацияСоединения.Свойство("ЗащищенноеСоединение"),         КонфигурацияСоединения.ЗащищенноеСоединение,         Неопределено),
		?(КонфигурацияСоединения.Свойство("ИспользоватьАутентификациюОС"), КонфигурацияСоединения.ИспользоватьАутентификациюОС, Ложь)
	);
КонецФункции

Функция ОбъединениеПараметровЗапросаВСтроку(Знач ПараметрыURI, Знач ПараметрыЗапроса)
	МножествоПараметров = Новый Соответствие;
	
	Для Каждого КЗ Из ПараметрыURI Цикл
		МножествоПараметров.Вставить(КЗ.Ключ, КЗ.Значение);
	КонецЦикла;
	
	Для Каждого КЗ Из ПараметрыЗапроса Цикл
		МножествоПараметров.Вставить(КЗ.Ключ, КЗ.Значение);
	КонецЦикла;
	
	Возврат ПараметрыЗапросаСтрокой(МножествоПараметров);
КонецФункции

Функция ЗаголовкиЗапроса(Знач ДанныеURI, ДополнительныеПараметры)
	фРезультат = Новый Соответствие;
	
	Если ДополнительныеПараметры.Свойство("Заголовки") Тогда
		Для Каждого КЗ Из ДополнительныеПараметры.Заголовки Цикл
			Если ПустаяСтрока(КЗ.Ключ) Тогда
				Продолжить;
			КонецЕсли;
			
			фРезультат.Вставить(КЗ.Ключ, КЗ.Значение);
		КонецЦикла;
	КонецЕсли;
	
	ДобавитьТипКонтентаВЗаголовкиЗапроса(фРезультат, ДополнительныеПараметры);
	ДобавитьКодировкуВЗаголовкиЗапроса(фРезультат, ДополнительныеПараметры);
	ДобавитьРазделительПолейФормыВЗаголовкиЗапроса(фРезультат, ДополнительныеПараметры);
	
	Если ДополнительныеПараметры.Свойство("СжатиеОтвета") Тогда
		фРезультат.Вставить("Accept-Encoding", ДополнительныеПараметры.СжатиеОтвета);
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("Сессия") И ДополнительныеПараметры.Сессия.Свойство("Печенье") Тогда
		Печенье = ПеченьеДляURI(ДанныеURI, ДополнительныеПараметры.Сессия.Печенье);
		Если ЗначениеЗаполнено(Печенье) Тогда
			фРезультат.Вставить("Cookie", СтрСоединить(Печенье, "; "));
		КонецЕсли;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("Аутентификация") И ДополнительныеПараметры.Аутентификация.Свойство("Тип") Тогда
		ТипАутентификации = ДополнительныеПараметры.Аутентификация.Тип;
		Если ТипАутентификации = "Basic" Тогда
			ДобавитьBasicАутентификациюВЗаголовкиЗапроса(фРезультат, ДополнительныеПараметры.Аутентификация);
		ИначеЕсли ТипАутентификации = "NTLM" Тогда
			УстановитьNTLMАутентификацию(ДополнительныеПараметры, ДополнительныеПараметры.Аутентификация);
		ИначеЕсли ТипАутентификации = "Digest" Тогда
			ДополнительныеПараметры.Вставить("АвторизоватьсяDigest");
		ИначеЕсли ТипАутентификации = "Bearer" Тогда
			ДобавитьBearerАутентификациюВЗаголовкиЗапроса(фРезультат, ДополнительныеПараметры.Аутентификация);
		КонецЕсли;
	КонецЕсли;
	
	Возврат фРезультат;
КонецФункции

Процедура ДобавитьBasicАутентификациюВЗаголовкиЗапроса(Заголовки, Знач ДанныеАутентификации)
	СтрокаАутентификации = КлиентHTTPСлужебный.СтрокаBasicАвторизации(ДанныеАутентификации.Пользователь, ДанныеАутентификации.Пароль);
	
	Заголовки.Вставить("Authorization", "Basic " + СтрокаАутентификации);
КонецПроцедуры

Процедура УстановитьNTLMАутентификацию(ДополнительныеПараметры, Знач ДанныеАутентификации)
	УстановитьИспользованиеАутентификацииОС(ДополнительныеПараметры, Истина)
		.УстановитьПользователяСоединения(ДополнительныеПараметры, ДанныеАутентификации.Пользователь)
		.УстановитьПарольСоединения(ДополнительныеПараметры, ДанныеАутентификации.Пароль);
КонецПроцедуры

Процедура ДобавитьBearerАутентификациюВЗаголовкиЗапроса(Заголовки, Знач ДанныеАутентификации)
	Заголовки.Вставить("Authorization", "Bearer " + ДанныеАутентификации.Пользователь);
КонецПроцедуры

Функция КодировкаИзДопПараметров(Знач ДополнительныеПараметры)
	// Потенциально опасный возврат значения по умолчанию
	Возврат ?(ДополнительныеПараметры.Свойство("Кодировка"), ДополнительныеПараметры.Кодировка, КлиентHTTPПовтИсп.КодировкаПоУмолчанию());
КонецФункции

Функция ИмяВыходногоФайлаИзДопПараметров(Знач ДополнительныеПараметры)
	Возврат ?(ДополнительныеПараметры.Свойство("ИмяВыходногоФайла"), ДополнительныеПараметры.ИмяВыходногоФайла, "");
КонецФункции

Процедура ДобавитьТипКонтентаВЗаголовкиЗапроса(Заголовки, Знач ДополнительныеПараметры)
	Если ДополнительныеПараметры.Свойство("ТипMIME") Тогда
		Заголовки.Вставить("Content-Type", ДополнительныеПараметры.ТипMIME);
	КонецЕсли;
КонецПроцедуры

Процедура ДобавитьКодировкуВЗаголовкиЗапроса(Заголовки, Знач ДополнительныеПараметры)
	ТекущееЗначение = Заголовки.Получить("Content-Type");
	
	Если ДополнительныеПараметры.Свойство("Кодировка") И ТекущееЗначение <> Неопределено Тогда
		Заголовки.Вставить("Content-Type", ТекущееЗначение + "; charset=" + КодировкаИзДопПараметров(ДополнительныеПараметры));
	КонецЕсли;
КонецПроцедуры

Процедура ДобавитьРазделительПолейФормыВЗаголовкиЗапроса(Заголовки, Знач ДополнительныеПараметры)
	ТекущееЗначение = Заголовки.Получить("Content-Type");
	
	Если ДополнительныеПараметры.Свойство("Разделитель") И ТекущееЗначение <> Неопределено Тогда
		Заголовки.Вставить("Content-Type", ТекущееЗначение + "; boundary=" + ДополнительныеПараметры.Разделитель);
	КонецЕсли;
КонецПроцедуры

Процедура ДобавитьРазмерДанныхВЗаголовкиЗапроса(Заголовки, Знач ДополнительныеПараметры, Знач Данные)
	Если ТипЗнч(Данные) = Тип("ДвоичныеДанные") Тогда
		Заголовки.Вставить("Content-Length", XMLСтрока(Данные.Размер()));
	ИначеЕсли ТипЗнч(Данные) = Тип("Строка") Тогда
		Кодировка = КодировкаИзДопПараметров(ДополнительныеПараметры);
		Заголовки.Вставить("Content-Length", XMLСтрока(КлиентHTTPСлужебный.РазмерТекстовыхДанных(Данные, Кодировка)));
	Иначе
		ВызватьИсключение "Неизвестный тип данных: " + ТипЗнч(Данные);
	КонецЕсли;
КонецПроцедуры

Функция ОбработанныйОтвет(Знач Ответ, Знач Конфигурация, Знач КонтекстВыполнения)
	Если НЕ Конфигурация.ДополнительныеПараметры.Свойство("Сессия") Тогда
		Возврат ОбъектОбработанногоОтвета(Ответ);
	КонецЕсли;
	
	Сессия = Конфигурация.ДополнительныеПараметры.Сессия;
	
	Печенье = ЗначениеЗаголовка("Set-Cookie", Ответ.Заголовки);
	Если Печенье <> Неопределено Тогда
		Попытка
			КлиентHTTPВызовСервера.ПринятьПеченье(Сессия, Печенье, Конфигурация.ДанныеURI.Сервер);
			Конфигурация.ДополнительныеПараметры.Сессия.Печенье = Сессия.Печенье;
		Исключение
			// TODO: добавить возврат описания ошибки 
		КонецПопытки;
	КонецЕсли;
	
	НовыйИдентификаторРесурса = ИдентификаторПеренаправления(Ответ.КодСостояния, Ответ.Заголовки);
	Если ЗначениеЗаполнено(НовыйИдентификаторРесурса) И КонтекстВыполнения.НомерПеренаправления <= Сессия.ПорогПеренаправлений Тогда
		Конфигурация.ДанныеURI = СтруктураИдентификатораРесурса(НовыйИдентификаторРесурса);
		Конфигурация.Параметры = ОбъединениеПараметровЗапросаВСтроку(Конфигурация.ДанныеURI.Параметры, НовыеПараметрыЗапроса());
		
		Возврат ВыполнитьЗапросHTTP(КонтекстВыполнения.Метод, Конфигурация, КонтекстВыполнения.Данные, КонтекстВыполнения.НомерПеренаправления + 1);
	КонецЕсли;
	
	Если Ответ.КодСостояния = КлиентHTTPПовтИсп.КодСостоянияНеАвторизовано() И Конфигурация.ДополнительныеПараметры.Свойство("АвторизоватьсяDigest") Тогда
		РецептАвторизации = ЗначениеЗаголовка("WWW-Authenticate", Ответ.Заголовки);
		Если СтрНачинаетсяС(НРег(РецептАвторизации), "digest") Тогда
			КонтекстВыполненияАдресВХ = ПоместитьВоВременноеХранилище(КонтекстВыполнения, Новый УникальныйИдентификатор);
			
			Конфигурация.ДополнительныеПараметры.Удалить("АвторизоватьсяDigest");
			Сессия.Вставить("ПараметрыDigest", ПараметрыDigest(РецептАвторизации));
			Конфигурация.Заголовки.Вставить("Authorization", КлиентHTTPВызовСервера.ЗаголовокDigest(Конфигурация, КонтекстВыполненияАдресВХ));
			
			Возврат ВыполнитьЗапросHTTP(КонтекстВыполнения.Метод, Конфигурация, КонтекстВыполнения.Данные, КонтекстВыполнения.НомерПеренаправления + 1);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОбъектОбработанногоОтвета(Ответ);
КонецФункции

Функция ОбъектОбработанногоОтвета(Знач Ответ)
	ФорматСжатия = ЗначениеЗаголовка("Content-Encoding", Ответ.Заголовки);
	
	Возврат Новый ФиксированнаяСтруктура(
		"КодСостояния, Заголовки, Тело, ИмяФайлаТела",
		Ответ.КодСостояния,
		Ответ.Заголовки,
		?(ФорматСжатия = Неопределено, Ответ.ПолучитьТелоКакДвоичныеДанные(), Декомпрессия(Ответ.ПолучитьТелоКакПоток())),
		Ответ.ПолучитьИмяФайлаТела()
	);
КонецФункции

Функция ПеченьеДляURI(Знач ДанныеURI, Знач Печенье)
	фРезультат = Новый Массив;
	Получатель = КлиентHTTPСлужебный.НормализованныйАдресСервера(ДанныеURI.Сервер);
	ДатаЗапроса = КлиентHTTPВызовСервера.ТекущаяУниверсальнаяДатаНаСервере();
	
	ВзятьПеченье(фРезультат, Печенье, Получатель, ДатаЗапроса, ДанныеURI.АдресРесурса, ДанныеURI.ЗащищенноеСоединение);
	Если фРезультат.Количество() > 0 Тогда
		Возврат Новый ФиксированныйМассив(фРезультат);
	КонецЕсли;
	
	Части = СтрРазделить(Получатель, ".", Ложь);
	Пока Части.Количество() > 1 Цикл
		Получатель = "." + СтрСоединить(Части, ".");
		
		ВзятьПеченье(фРезультат, Печенье, Получатель, ДатаЗапроса, ДанныеURI.АдресРесурса, ДанныеURI.ЗащищенноеСоединение);
		Если фРезультат.Количество() > 0 Тогда
			Прервать;
		КонецЕсли;
		
		Части.Удалить(0);
	КонецЦикла;
	
	Возврат Новый ФиксированныйМассив(фРезультат);
КонецФункции

Процедура ВзятьПеченье(ПеченьеПолучателя, Печенье, Знач Получатель, Знач ДатаЗапроса, Знач АдресРесурса, Знач ЗащищенноеСоединение)
	ИмяСрок = КлиентHTTPПовтИсп.СвойствоПеченькаСрок();
	ИмяАдресРесурса = КлиентHTTPПовтИсп.СвойствоПеченькаАдресРесурса();
	ИмяЗащищенноеСоединение = КлиентHTTPПовтИсп.СвойствоПеченькаЗащищенноеСоединение();
	
	Печеньки = Печенье.Получить(Получатель);
	Если Печеньки <> Неопределено Тогда
		ПеченькиНаУдаление = Новый Массив;
		
		Для Каждого КЗ Из Печеньки Цикл
			Печенько = КЗ.Значение;
			Если Печенько.Свойство(ИмяСрок) И Печенько[ИмяСрок] < ДатаЗапроса Тогда
				ПеченькиНаУдаление.Добавить(КЗ.Ключ);
				Продолжить;
			КонецЕсли;
			Если Печенько.Свойство(ИмяАдресРесурса) И НЕ СтрНачинаетсяС(АдресРесурса, Печенько[ИмяАдресРесурса]) Тогда
				Продолжить;
			КонецЕсли;
			Если Печенько.Свойство(ИмяЗащищенноеСоединение) И НЕ ЗащищенноеСоединение Тогда
				Продолжить;
			КонецЕсли;
			
			ПеченьеПолучателя.Добавить(Печенько.Имя + "=" + Печенько.Значение);
		КонецЦикла;
		
		Для Каждого Печенько Из ПеченькиНаУдаление Цикл
			Печеньки.Удалить(Печенько);
		КонецЦикла;
		Если НЕ ЗначениеЗаполнено(Печеньки) Тогда
			Печенье.Удалить(Получатель);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ОбъединитьПеченье(Приемник, Знач Источник, Знач Заменять = Истина)
	Для Каждого КЗ Из Источник Цикл
		ПеченьеСорта = Приемник.Получить(КЗ.Ключ);
		Если ПеченьеСорта = Неопределено Тогда
			ПеченьеСорта = Новый Соответствие;
			Приемник.Вставить(КЗ.Ключ, ПеченьеСорта);
		КонецЕсли;
		
		Для Каждого Печенько Из КЗ.Значение Цикл
			Если НЕ Заменять И ПеченьеСорта.Получить(Печенько.Ключ) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ПеченьеСорта.Вставить(Печенько.Ключ, Печенько.Значение);
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Функция АдресРесурсаЗапроса(Знач Конфигурация)
	Возврат Конфигурация.ДанныеURI.АдресРесурса + Конфигурация.Параметры;
КонецФункции

Функция ЗначениеЗаголовка(Знач ИмяЗаголовка, Знач Заголовки)
	фРезультат = Неопределено;
	ИмяЗаголовка = НРег(ИмяЗаголовка);
	
	Для Каждого КЗ Из Заголовки Цикл
		Если НРег(КЗ.Ключ) = ИмяЗаголовка Тогда
			фРезультат = КЗ.Значение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат фРезультат;
КонецФункции

Функция ИдентификаторПеренаправления(Знач КодСостояния, Знач Заголовки)
	Возврат ?(
		КлиентHTTPПовтИсп.КодыСостоянияПеренаправления().Получить(КодСостояния) = Неопределено,
		Неопределено,
		КлиентHTTPВызовСервера.РаскодированныйИдентификаторРесурса(ЗначениеЗаголовка("Location", Заголовки))
	);
КонецФункции

Функция ОбъектАутентификации(Знач Тип, Знач Пользователь, Знач Пароль)
	Возврат Новый ФиксированнаяСтруктура("Тип, Пользователь, Пароль", Тип, Пользователь, Пароль);
КонецФункции

Функция ПараметрыDigest(Знач РецептАвторизации)
	фРезультат = Новый Структура("algorithm, realm, nonce, qop, opaque");
	
	РецептАвторизации = СтрЗаменить(СокрЛП(Сред(РецептАвторизации, 7)), """", "");
	Для Каждого Часть Из СтрРазделить(РецептАвторизации, ",", Ложь) Цикл
		КЗ = СтрРазделить(СокрЛП(Часть), "=");
		фРезультат.Вставить(КЗ[0], КЗ[1]);
	КонецЦикла;
	
	Возврат фРезультат;
КонецФункции

Функция Декомпрессия(Знач ПотокСжатыхДанных)
	ИмяФайлаВАрхиве = ПолучитьБуферДвоичныхДанныхИзСтроки(Сред(Новый УникальныйИдентификатор, 25), КодировкаТекста.ANSI, Ложь);
	РазмерСжатыхДанных = ПотокСжатыхДанных.Размер() - 18; // размер префикса + размер постфикса GZip
	
	// Восстановление структуры ZIP-архива
	
	ОбластиZIP = КлиентHTTPПовтИсп.ОбластиФайлаВАрхивеZIP();
	Поток = Новый ПотокВПамяти(ОбластиZIP.РазмерLFH + РазмерСжатыхДанных + ОбластиZIP.РазмерDD + ОбластиZIP.РазмерCDFH + ОбластиZIP.РазмерEOCD);
	
	ОбластиZIP.ОбластьLFH.Записать(30, ИмяФайлаВАрхиве);
	
	Чтение = Новый ЧтениеДанных(ПотокСжатыхДанных);
	Чтение.Пропустить(10); // размер префикса GZip
	
	Запись = Новый ЗаписьДанных(Поток);
	Запись.ЗаписатьБуферДвоичныхДанных(ОбластиZIP.ОбластьLFH);
	Чтение.КопироватьВ(Запись, РазмерСжатыхДанных);
	Запись.Закрыть();
	
	КонтрольнаяСумма = Чтение.ПрочитатьЦелое32();
	РазмерНесжатыхДанных = Чтение.ПрочитатьЦелое32();
	
	Чтение.Закрыть();
	
	ОбластиZIP.ОбластьDD.ЗаписатьЦелое32(4,  КонтрольнаяСумма);
	ОбластиZIP.ОбластьDD.ЗаписатьЦелое32(8,  РазмерСжатыхДанных);
	ОбластиZIP.ОбластьDD.ЗаписатьЦелое32(12, РазмерНесжатыхДанных);

	ОбластиZIP.ОбластьCDFH.ЗаписатьЦелое32(16, КонтрольнаяСумма);
	ОбластиZIP.ОбластьCDFH.ЗаписатьЦелое32(20, РазмерСжатыхДанных);
	ОбластиZIP.ОбластьCDFH.ЗаписатьЦелое32(24, РазмерНесжатыхДанных);
	ОбластиZIP.ОбластьCDFH.Записать(       46, ИмяФайлаВАрхиве);

	ОбластиZIP.ОбластьEOCD.ЗаписатьЦелое32(16, ОбластиZIP.РазмерLFH + РазмерСжатыхДанных + ОбластиZIP.РазмерDD);
	
	Запись = Новый ЗаписьДанных(Поток);
	Запись.ЗаписатьБуферДвоичныхДанных(ОбластиZIP.ОбластьDD);
	Запись.ЗаписатьБуферДвоичныхДанных(ОбластиZIP.ОбластьCDFH);
	Запись.ЗаписатьБуферДвоичныхДанных(ОбластиZIP.ОбластьEOCD);
	Запись.Закрыть();
	
	// Извлечение содержимого ZIP-архива
	
	Каталог = ПолучитьИмяВременногоФайла();
	Чтение = Новый ЧтениеZipФайла(Поток);
	ИмяФайла = Чтение.Элементы[0].Имя;
	Чтение.Извлечь(Чтение.Элементы[0], Каталог, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
	Чтение.Закрыть();
	
	фРезультат = Новый ДвоичныеДанные(Каталог + ПолучитьРазделительПути() + ИмяФайла);
	Попытка
		УдалитьФайлы(Каталог);
	Исключение
	КонецПопытки;
	
	Возврат фРезультат;
КонецФункции

Функция ФорматированноеИмяПараметраЗапроса(Знач Имя)
	Возврат СтрЗаменить(ФорматированноеЗначениеПараметраЗапроса(Имя), "=", "%3D");
КонецФункции

Функция ФорматированноеЗначениеПараметраЗапроса(Знач Значение)
	Возврат СтрЗаменить(СтрЗаменить(СтрЗаменить(Значение, Символы.ПС, ""), "#", "%23"), "&", "%26");
КонецФункции
#КонецОбласти
