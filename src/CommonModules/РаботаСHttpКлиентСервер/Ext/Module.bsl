
#Область АННОТАЦИЯ
// Дополнительные параметры (все ключи являются необязательными):
// {ОБЩИЕ}
//     Порт - Число - порт сервера, с которым производится соединение
//     Пользователь - Строка - пользователь, от имени которого устанавливается соединение
//     Пароль - Строка - пароль пользователя, от имени которого устанавливается соединение
//     Прокси - ИнтернетПрокси - прокси, через который устанавливается соединение
//     Таймаут - Число - определяет время ожидания осуществляемого соединения и операций, в секундах (0 - таймаут не установлен)
//     ЗащищенноеСоединение - ЗащищенноеСоединениеOpenSSL - объект защищенного соединения для осуществления HTTPS-соединения
//     ИспользоватьАутентификациюОС - Булево - указывает текущее значение использования аутентификации NTLM или Negotiate на сервере
//     Сессия - Структура - диалоговое состояние между клиентом и сервером, включающее информацию о параметрах соединения и авторизации и ответах сервера
//     Заголовки - Соответствие - заголовки запроса
//     Аутентификация - Структура - ключи: Пользователь, Пароль[, Тип]
//     ТипMIME - Строка - MIME-тип содержимого тела запроса
//     НеИспользоватьПараметрыИзАдреса - наличие ключа указывает на игнорирование параметров из входящего адреса запроса
//     ПараметрыДублируются - наличие ключа позволяет указывать параметры несколько раз
//     ИмяВыходногоФайла - Строка - имя файла, в который помещаются данные полученного ресурса
// {POST}
//     Кодировка - КодировкаТекста, Строка - кодировка текста тела запроса
#КонецОбласти


#Область ЭКСПОРТНЫЕ_ПРОЦЕДУРЫ_И_ФУНКЦИИ
// Реализация GET (выбрасывает исключения)
//
// Параметры:
//     ИдентификаторРесурса - Строка - URI сервиса
//     ПараметрыЗапроса - Соответствие - коллекция параметров GET-запроса (необязательный)
//     ДополнительныеПараметры - Структура - конфигурация выполнения POST-запроса (необязательный)
//
// Возвращаемые значения:
//     HTTPОтвет
//
Функция Получить(Знач ИдентификаторРесурса, Знач ПараметрыЗапроса = Неопределено, Знач ДополнительныеПараметры = Неопределено) Экспорт
	Если ПараметрыЗапроса = Неопределено Тогда
		ПараметрыЗапроса = НовыеПараметрыЗапроса();
	КонецЕсли;
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = НовыеДополнительныеПараметры();
	КонецЕсли;
	
	ДанныеURI = СтруктураИдентификатораРесурса(ИдентификаторРесурса);
	Параметры = ПараметрыЗапросаСтрокой(ДанныеURI, ПараметрыЗапроса, ДополнительныеПараметры);
	Заголовки = ЗаголовкиЗапроса(ДополнительныеПараметры);
	
	Соединение = НовоеHTTPСоединение(ДанныеURI, ДополнительныеПараметры);
	Запрос = Новый HTTPЗапрос(ДанныеURI.АдресРесурса + Параметры, Заголовки);
	Ответ = Соединение.Получить(Запрос);
	
	ОбработатьОтвет(Ответ, ДополнительныеПараметры, ДанныеURI);
	
	Возврат Ответ;
КонецФункции

// Реализация HEAD
//
// Параметры:
//     ИдентификаторРесурса - Строка - URI сервиса
//     ПараметрыЗапроса - Соответствие - коллекция параметров запроса (необязательный)
//     ДополнительныеПараметры - Структура - конфигурация выполнения запроса (необязательный)
//
// Возвращаемые значения:
//     HTTPОтвет
//
Функция ПолучитьЗаголовки(Знач ИдентификаторРесурса, Знач ПараметрыЗапроса = Неопределено, Знач ДополнительныеПараметры = Неопределено) Экспорт
	Если ПараметрыЗапроса = Неопределено Тогда
		ПараметрыЗапроса = НовыеПараметрыЗапроса();
	КонецЕсли;
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = НовыеДополнительныеПараметры();
	КонецЕсли;
	
	ДанныеURI = СтруктураИдентификатораРесурса(ИдентификаторРесурса);
	Параметры = ПараметрыЗапросаСтрокой(ДанныеURI, ПараметрыЗапроса, ДополнительныеПараметры);
	Заголовки = ЗаголовкиЗапроса(ДополнительныеПараметры);
	
	Соединение = НовоеHTTPСоединение(ДанныеURI, ДополнительныеПараметры);
	Запрос = Новый HTTPЗапрос(ДанныеURI.АдресРесурса + Параметры, Заголовки);
	
	Возврат Соединение.ПолучитьЗаголовки(Запрос);
КонецФункции

// Реализация POST
//
// Параметры:
//     ИдентификаторРесурса - Строка - URI сервиса
//     Данные - Строка - тело запроса
//     ДополнительныеПараметры - Структура - конфигурация выполнения запроса (необязательный)
//     ПараметрыЗапроса - Соответствие - коллекция параметров запроса (необязательный)
//
// Возвращаемые значения:
//     HTTPОтвет
//
Функция ОтправитьТекст(Знач ИдентификаторРесурса, Знач Данные, Знач ДополнительныеПараметры = Неопределено, Знач ПараметрыЗапроса = Неопределено) Экспорт
	Если ПараметрыЗапроса = Неопределено Тогда
		ПараметрыЗапроса = НовыеПараметрыЗапроса();
	КонецЕсли;
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = НовыеДополнительныеПараметры();
	КонецЕсли;
	
	ДанныеURI = СтруктураИдентификатораРесурса(ИдентификаторРесурса);
	Параметры = ПараметрыЗапросаСтрокой(ДанныеURI, ПараметрыЗапроса, ДополнительныеПараметры);
	Заголовки = ЗаголовкиЗапроса(ДополнительныеПараметры);
	
	ДобавитьКодировкуВЗаголовкиЗапроса(Заголовки, ДополнительныеПараметры);
	ДобавитьРазмерДанныхВЗаголовкиЗапроса(Заголовки, ДополнительныеПараметры, Данные);
	
	Соединение = НовоеHTTPСоединение(ДанныеURI, ДополнительныеПараметры);
	
	Запрос = Новый HTTPЗапрос(ДанныеURI.АдресРесурса + Параметры, Заголовки);
	Запрос.УстановитьТелоИзСтроки(Данные, КодировкаИзДопПараметров(ДополнительныеПараметры));
	
	Возврат Соединение.ОтправитьДляОбработки(Запрос, ИмяВыходногоФайлаИзДопПараметров(ДополнительныеПараметры));
КонецФункции

// Реализация POST
//
// Параметры:
//     ИдентификаторРесурса - Строка - URI сервиса
//     Данные - ДвоичныеДанные - тело запроса
//     ДополнительныеПараметры - Структура - конфигурация выполнения запроса (необязательный)
//     ПараметрыЗапроса - Соответствие - коллекция параметров запроса (необязательный)
//
// Возвращаемые значения:
//     HTTPОтвет
//
Функция ОтправитьДвоичныеДанные(Знач ИдентификаторРесурса, Знач Данные, Знач ДополнительныеПараметры = Неопределено, Знач ПараметрыЗапроса = Неопределено) Экспорт
	Если ПараметрыЗапроса = Неопределено Тогда
		ПараметрыЗапроса = НовыеПараметрыЗапроса();
	КонецЕсли;
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = НовыеДополнительныеПараметры();
	КонецЕсли;
	
	ДанныеURI = СтруктураИдентификатораРесурса(ИдентификаторРесурса);
	Параметры = ПараметрыЗапросаСтрокой(ДанныеURI, ПараметрыЗапроса, ДополнительныеПараметры);
	Заголовки = ЗаголовкиЗапроса(ДополнительныеПараметры);
	
	ДобавитьРазмерДанныхВЗаголовкиЗапроса(Заголовки, ДополнительныеПараметры, Данные);
	
	Соединение = НовоеHTTPСоединение(ДанныеURI, ДополнительныеПараметры);
	
	Запрос = Новый HTTPЗапрос(ДанныеURI.АдресРесурса + Параметры, Заголовки);
	Запрос.УстановитьТелоИзДвоичныхДанных(Данные);
	
	Возврат Соединение.ОтправитьДляОбработки(Запрос, ИмяВыходногоФайлаИзДопПараметров(ДополнительныеПараметры));
КонецФункции

// Реализация PUT
//
// Параметры:
//     ИдентификаторРесурса - Строка - URI сервиса
//     Данные - Строка - тело запроса
//     ДополнительныеПараметры - Структура - конфигурация выполнения запроса (необязательный)
//     ПараметрыЗапроса - Соответствие - коллекция параметров запроса (необязательный)
//
// Возвращаемые значения:
//     HTTPОтвет
//
Функция ЗаписатьТекст(Знач ИдентификаторРесурса, Знач Данные, Знач ДополнительныеПараметры = Неопределено, Знач ПараметрыЗапроса = Неопределено) Экспорт
	Если ПараметрыЗапроса = Неопределено Тогда
		ПараметрыЗапроса = НовыеПараметрыЗапроса();
	КонецЕсли;
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = НовыеДополнительныеПараметры();
	КонецЕсли;
	
	ДанныеURI = СтруктураИдентификатораРесурса(ИдентификаторРесурса);
	Параметры = ПараметрыЗапросаСтрокой(ДанныеURI, ПараметрыЗапроса, ДополнительныеПараметры);
	Заголовки = ЗаголовкиЗапроса(ДополнительныеПараметры);
	
	ДобавитьКодировкуВЗаголовкиЗапроса(Заголовки, ДополнительныеПараметры);
	ДобавитьРазмерДанныхВЗаголовкиЗапроса(Заголовки, ДополнительныеПараметры, Данные);
	
	Соединение = НовоеHTTPСоединение(ДанныеURI, ДополнительныеПараметры);
	
	Запрос = Новый HTTPЗапрос(ДанныеURI.АдресРесурса + Параметры, Заголовки);
	Запрос.УстановитьТелоИзСтроки(Данные, КодировкаИзДопПараметров(ДополнительныеПараметры));
	
	Возврат Соединение.Записать(Запрос);
КонецФункции

// Реализация PUT
//
// Параметры:
//     ИдентификаторРесурса - Строка - URI сервиса
//     Данные - ДвоичныеДанные - тело запроса
//     ДополнительныеПараметры - Структура - конфигурация выполнения запроса (необязательный)
//     ПараметрыЗапроса - Соответствие - коллекция параметров запроса (необязательный)
//
// Возвращаемые значения:
//     HTTPОтвет
//
Функция ЗаписатьДвоичныеДанные(Знач ИдентификаторРесурса, Знач Данные, Знач ДополнительныеПараметры = Неопределено, Знач ПараметрыЗапроса = Неопределено) Экспорт
	Если ПараметрыЗапроса = Неопределено Тогда
		ПараметрыЗапроса = НовыеПараметрыЗапроса();
	КонецЕсли;
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = НовыеДополнительныеПараметры();
	КонецЕсли;
	
	ДанныеURI = СтруктураИдентификатораРесурса(ИдентификаторРесурса);
	Параметры = ПараметрыЗапросаСтрокой(ДанныеURI, ПараметрыЗапроса, ДополнительныеПараметры);
	Заголовки = ЗаголовкиЗапроса(ДополнительныеПараметры);
	
	ДобавитьРазмерДанныхВЗаголовкиЗапроса(Заголовки, ДополнительныеПараметры, Данные);
	
	Соединение = НовоеHTTPСоединение(ДанныеURI, ДополнительныеПараметры);
	
	Запрос = Новый HTTPЗапрос(ДанныеURI.АдресРесурса + Параметры, Заголовки);
	Запрос.УстановитьТелоИзДвоичныхДанных(Данные);
	
	Возврат Соединение.Записать(Запрос);
КонецФункции

// Реализация DELETE
//
// Параметры:
//     ИдентификаторРесурса - Строка - URI сервиса
//     Данные - Строка - тело запроса (необязательный)
//     ДополнительныеПараметры - Структура - конфигурация выполнения запроса (необязательный)
//     ПараметрыЗапроса - Соответствие - коллекция параметров запроса (необязательный)
//
// Возвращаемые значения:
//     HTTPОтвет
//
Функция Удалить(Знач ИдентификаторРесурса, Знач Данные = "", Знач ДополнительныеПараметры = Неопределено, Знач ПараметрыЗапроса = Неопределено) Экспорт
	Если ПараметрыЗапроса = Неопределено Тогда
		ПараметрыЗапроса = НовыеПараметрыЗапроса();
	КонецЕсли;
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = НовыеДополнительныеПараметры();
	КонецЕсли;
	
	ДанныеURI = СтруктураИдентификатораРесурса(ИдентификаторРесурса);
	Параметры = ПараметрыЗапросаСтрокой(ДанныеURI, ПараметрыЗапроса, ДополнительныеПараметры);
	Заголовки = ЗаголовкиЗапроса(ДополнительныеПараметры);
	
	Если НЕ ПустаяСтрока(Данные) Тогда
		ДобавитьКодировкуВЗаголовкиЗапроса(Заголовки, ДополнительныеПараметры);
		ДобавитьРазмерДанныхВЗаголовкиЗапроса(Заголовки, ДополнительныеПараметры, Данные);
	КонецЕсли;
	
	Соединение = НовоеHTTPСоединение(ДанныеURI, ДополнительныеПараметры);
	
	Запрос = Новый HTTPЗапрос(ДанныеURI.АдресРесурса + Параметры, Заголовки);
	Запрос.УстановитьТелоИзСтроки(Данные, КодировкаИзДопПараметров(ДополнительныеПараметры));
	
	Возврат Соединение.Удалить(Запрос);
КонецФункции


#Область ДЕКОРАТОРЫ
// Реализация POST
//
// Параметры:
//     ИдентификаторРесурса - Строка - URI сервиса
//     Данные - Файл - тело запроса
//     ДополнительныеПараметры - Структура - конфигурация выполнения запроса (необязательный)
//     ПараметрыЗапроса - Соответствие - коллекция параметров запроса (необязательный)
//
// Возвращаемые значения:
//     HTTPОтвет
//
Функция ОтправитьФайл(Знач ИдентификаторРесурса, Знач Данные, Знач ДополнительныеПараметры = Неопределено, Знач ПараметрыЗапроса = Неопределено) Экспорт
	Если НЕ Данные.Существует() Тогда
		ВызватьИсключение СтрШаблон("Файл %1 не существует", Данные.ПолноеИмя);
	КонецЕсли;
	
	ДП = ?(ДополнительныеПараметры = Неопределено, НовыеДополнительныеПараметры(), КопияДополнительныхПараметров(ДополнительныеПараметры));
	
	Если НЕ ДП.Свойство("ТипMIME") Тогда
		ДП.Вставить("ТипMIME", РаботаСHttpСлужебный.ТипMIMEРасширенияФайла(Данные.Расширение));
	КонецЕсли;
	
	Возврат ОтправитьДвоичныеДанные(
		ИдентификаторРесурса,
		Новый ДвоичныеДанные(Данные.ПолноеИмя),
		ДП,
		ПараметрыЗапроса
	);
КонецФункции

// Реализация POST
//
// Параметры:
//     ИдентификаторРесурса - Строка - URI сервиса
//     Данные - Массив - поля тела запроса типа Структура с ключами: Наименование, Значение[, Файл]
//     ДополнительныеПараметры - Структура - конфигурация выполнения запроса (необязательный)
//     ПараметрыЗапроса - Соответствие - коллекция параметров запроса (необязательный)
//
// Возвращаемые значения:
//     HTTPОтвет
//
// Поля тела запроса. Ключи:
//     Наименование - Строка - имя поля
//     Значение - Строка | Файл - значение поля
//     ТипMIME - Строка - тип значения поля (необязательный)
//     Файл - Структура - (все ключи являются необязательными) ключи: Имя, ТипMIME, Кодировка
//
Функция ОтправитьДанныеФормы(Знач ИдентификаторРесурса, Знач Данные, Знач ДополнительныеПараметры = Неопределено, Знач ПараметрыЗапроса = Неопределено) Экспорт
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = НовыеДополнительныеПараметры();
	КонецЕсли;
	
	Разделитель = ?(ДополнительныеПараметры.Свойство("Разделитель"), ДополнительныеПараметры.Разделитель, XMLСтрока(Новый УникальныйИдентификатор));
	_Разделитель = "--" + Разделитель;
	
	Кодировка = КодировкаИзДопПараметров(ДополнительныеПараметры);
	
	Поток = Новый ПотокВПамяти;
	Запись = Новый ЗаписьДанных(Поток, Кодировка);
	
	Для Каждого ПолеФормы Из Данные Цикл
		Запись.ЗаписатьСтроку(_Разделитель);
		
		СтрокаПоля = "Content-Disposition: form-data; name=""" + ПолеФормы.Наименование + """";
		
		Если ПолеФормы.Свойство("Файл") Тогда
			Если НЕ ПолеФормы.Значение.Существует() Тогда
				ВызватьИсключение "";
			КонецЕсли;
			
			ИмяФайла = ?(ПолеФормы.Файл.Свойство("Имя"), ПолеФормы.Файл.Имя, ПолеФормы.Значение.Имя);
			Если НЕ ПустаяСтрока(ИмяФайла) Тогда
				СтрокаПоля = СтрокаПоля + "; filename=""" + ПолеФормы.Значение.Имя + """";
			КонецЕсли;
			
			Запись.ЗаписатьСтроку(СтрокаПоля);
			Если ПолеФормы.Файл.Свойство("ТипMIME") Тогда
				Запись.ЗаписатьСтроку("Content-Type: " + ПолеФормы.Файл.ТипMIME);
			КонецЕсли;
			Если ПолеФормы.Файл.Свойство("Кодировка") Тогда
				Запись.ЗаписатьСтроку("Content-Transfer-Encoding: " + ПолеФормы.Файл.Кодировка);
			КонецЕсли;
			Запись.ЗаписатьСтроку("");
			Запись.Записать(Новый ДвоичныеДанные(ПолеФормы.Значение.ПолноеИмя));
			Запись.ЗаписатьСтроку("");
		Иначе
			Если ПолеФормы.Свойство("ТипMIME") Тогда
				Запись.ЗаписатьСтроку("Content-Type: " + ПолеФормы.ТипMIME);
			КонецЕсли;
			Запись.ЗаписатьСтроку("");
			Запись.ЗаписатьСтроку(ПолеФормы.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Запись.ЗаписатьСтроку(_Разделитель + "--");
	
	Возврат ОтправитьДвоичныеДанные(ИдентификаторРесурса, Поток.ЗакрытьИПолучитьДвоичныеДанные(), ДополнительныеПараметры, ПараметрыЗапроса);
КонецФункции

// Реализация PUT
//
// Параметры:
//     ИдентификаторРесурса - Строка - URI сервиса
//     Данные - Файл - тело запроса
//     ДополнительныеПараметры - Структура - конфигурация выполнения запроса (необязательный)
//     ПараметрыЗапроса - Соответствие - коллекция параметров запроса (необязательный)
//
// Возвращаемые значения:
//     HTTPОтвет
//
Функция ЗаписатьФайл(Знач ИдентификаторРесурса, Знач Данные, Знач ДополнительныеПараметры = Неопределено, Знач ПараметрыЗапроса = Неопределено) Экспорт
	Если НЕ Данные.Существует() Тогда
		ВызватьИсключение СтрШаблон("Файл %1 не существует", Данные.ПолноеИмя);
	КонецЕсли;
	
	ДП = ?(ДополнительныеПараметры = Неопределено, НовыеДополнительныеПараметры(), КопияДополнительныхПараметров(ДополнительныеПараметры));
	
	Если НЕ ДП.Свойство("ТипMIME") Тогда
		ДП.Вставить("ТипMIME", РаботаСHttpСлужебный.ТипMIMEРасширенияФайла(Данные.Расширение));
	КонецЕсли;
	
	Возврат ЗаписатьДвоичныеДанные(
		ИдентификаторРесурса,
		Новый ДвоичныеДанные(Данные.ПолноеИмя),
		ДП,
		ПараметрыЗапроса
	);
КонецФункции

// TODO: добавить запись полей формы
#КонецОбласти


#Область ИНИЦИАЛИЗАТОРЫ
// Возвращает новую пустую коллекцию параметров HTTP-запроса
//
// Возвращаемые значения:
//     Соответствие
//
Функция НовыеПараметрыЗапроса() Экспорт
	Возврат Новый Соответствие;
КонецФункции

// Возвращает новую пустую конфигурацию выполнения HTTP-запроса
//
// Возвращаемые значения:
//     Структура
//
Функция НовыеДополнительныеПараметры() Экспорт
	Возврат Новый Структура;
КонецФункции

// Возвращает копию конфигурации выполнения HTTP-запроса
//
// Параметры:
//     ДополнительныеПараметры - Структура - коллекция параметров выполнения запроса
//
// Возвращаемые значения:
//     Структура
//
Функция КопияДополнительныхПараметров(Знач ДополнительныеПараметры) Экспорт
	фРезультат = НовыеДополнительныеПараметры();
	
	Для Каждого КЗ Из ДополнительныеПараметры Цикл
		фРезультат.Вставить(КЗ.Ключ, КЗ.Значение);
	КонецЦикла;
	
	Возврат фРезультат;
КонецФункции

// Возвращает новую пустую коллекцию полей формы тела HTTP-запроса
//
// Возвращаемые значения:
//     Массив
//
Функция НовыеПоляФормы() Экспорт
	Возврат Новый Массив;
КонецФункции
#КонецОбласти


#Область ТЕКУЧИЙ_ИНТЕРФЕЙС
// Установка значения параметра HTTP-запроса
//
// Параметры:
//     ПараметрыЗапроса - Соответствие - коллекция параметров запроса
//     Ключ - Строка - имя параметра
//     Значение - Строка - значение параметра
//
// Возвращаемые значения:
//     ОбщийМодуль.РаботаСHttp - модуль вызова функции
//
Функция УстановитьПараметр(ПараметрыЗапроса, Знач Ключ, Знач Значение) Экспорт
	Значения = Новый Массив;
	Значения.Добавить(Значение);
	
	ПараметрыЗапроса.Вставить(Ключ, Значения);
	
	Возврат РаботаСHttpКлиентСервер;
КонецФункции

// Добавление очередного значения параметра HTTP-запроса к уже имеющимся
//
// Параметры:
//     ПараметрыЗапроса - Соответствие - коллекция параметров запроса
//     Ключ - Строка - имя параметра
//     Значение - Строка - значение параметра
//
// Возвращаемые значения:
//     ОбщийМодуль.РаботаСHttp - модуль вызова функции
//
Функция ДобавитьПараметр(ПараметрыЗапроса, Знач Ключ, Знач Значение) Экспорт
	Значения = ПараметрыЗапроса.Получить(Ключ);
	
	Если Значения = Неопределено Тогда
		УстановитьПараметр(ПараметрыЗапроса, Ключ, Значение);
	Иначе
		Значения.Добавить(Значение);
	КонецЕсли;
	
	Возврат РаботаСHttpКлиентСервер;
КонецФункции

// Установка заголовка HTTP-запроса
//
// Параметры:
//     ДополнительныеПараметры - Структура - конфигурация выполнения запроса
//     Ключ - Строка - имя заголовка
//     Значение - Строка - значение заголовка
//
// Возвращаемые значения:
//     ОбщийМодуль.РаботаСHttp - модуль вызова функции
//
Функция УстановитьЗаголовок(ДополнительныеПараметры, Знач Ключ, Знач Значение) Экспорт
	Перем Заголовки;
	
	Если НЕ ДополнительныеПараметры.Свойство("Заголовки", Заголовки) Тогда
		Заголовки = Новый Соответствие;
		ДополнительныеПараметры.Вставить("Заголовки", Заголовки);
	КонецЕсли;
	
	Заголовки.Вставить(Ключ, Значение);
	
	Возврат РаботаСHttpКлиентСервер;
КонецФункции

// Установка произвольного дополнительного параметра выполнения HTTP-запроса
//
// Параметры:
//     ДополнительныеПараметры - Структура - конфигурация выполнения запроса
//     Ключ - Строка - имя дополнительного параметра
//     Значение - Строка - значение дополнительного параметра
//
// Возвращаемые значения:
//     ОбщийМодуль.РаботаСHttp - модуль вызова функции
//
Функция УстановитьДополнительныйПараметр(ДополнительныеПараметры, Знач Ключ, Знач Значение) Экспорт
	ДополнительныеПараметры.Вставить(Ключ, Значение);
	
	Возврат РаботаСHttpКлиентСервер;
КонецФункции

// Инициализация сессии
//
// Параметры:
//     ДополнительныеПараметры - Структура - конфигурация выполнения запроса
//
// Возвращаемые значения:
//     ОбщийМодуль.РаботаСHttp - модуль вызова функции
//
Функция ИспользоватьСессию(ДополнительныеПараметры) Экспорт
	Если НЕ ДополнительныеПараметры.Свойство("Сессия") Тогда
		ДополнительныеПараметры.Вставить("Сессия", Новый Структура);
	КонецЕсли;
	
	Возврат РаботаСHttpКлиентСервер;
КонецФункции

// Установка Basic-авторизации
//
// Параметры:
//     ДополнительныеПараметры - Структура - конфигурация выполнения запроса
//     Пользователь - Строка - пользователь авторизации
//     Пароль - Строка - пароль авторизации
//
// Возвращаемые значения:
//     ОбщийМодуль.РаботаСHttp - модуль вызова функции
//
Функция УстановитьBasicАвторизацию(ДополнительныеПараметры, Знач Пользователь, Знач Пароль) Экспорт
	ДополнительныеПараметры.Вставить("Аутентификация", Новый Структура("Тип, Пользователь, Пароль", "Basic", Пользователь, Пароль));
	
	Возврат РаботаСHttpКлиентСервер;
КонецФункции

// Установка NTLM-авторизации
//
// Параметры:
//     ДополнительныеПараметры - Структура - конфигурация выполнения запроса
//     Пользователь - Строка - пользователь авторизации
//     Пароль - Строка - пароль авторизации
//
// Возвращаемые значения:
//     ОбщийМодуль.РаботаСHttp - модуль вызова функции
//
Функция УстановитьNTLMАвторизацию(ДополнительныеПараметры, Знач Пользователь, Знач Пароль) Экспорт
	ДополнительныеПараметры.Вставить("Аутентификация", Новый Структура("Тип, Пользователь, Пароль", "NTLM", Пользователь, Пароль));
	
	Возврат РаботаСHttpКлиентСервер;
КонецФункции

// Установка MIME-типа содержимого тела HTTP-запроса
//
// Параметры:
//     ДополнительныеПараметры - Структура - конфигурация выполнения запроса
//     ТипMIME - Строка - MIME-тип
//
// Возвращаемые значения:
//     ОбщийМодуль.РаботаСHttp - модуль вызова функции
//
Функция УстановитьТипMIME(ДополнительныеПараметры, Знач ТипMIME) Экспорт
	ДополнительныеПараметры.Вставить("ТипMIME", ТипMIME);
	
	Возврат РаботаСHttpКлиентСервер;
КонецФункции

// Установка кодировки текстового содержимого тела запроса
//
// Параметры:
//     ДополнительныеПараметры - Структура - конфигурация выполнения запроса
//     Кодировка - КодировкаТекста | Строка | Неопределено - кодировка  (необязательный)
//
// Возвращаемые значения:
//     ОбщийМодуль.РаботаСHttp - модуль вызова функции
//
Функция УстановитьКодировку(ДополнительныеПараметры, Знач Кодировка = Неопределено) Экспорт
	ДополнительныеПараметры.Вставить("Кодировка", ?(Кодировка = Неопределено, РаботаСHttpПовтИсп.КодировкаПоУмолчанию(), Кодировка));
	
	Возврат РаботаСHttpКлиентСервер;
КонецФункции

// Установка порта соединения
//
// Параметры:
//     ДополнительныеПараметры - Структура - конфигурация выполнения запроса
//     Порт - Число - порт соединения
//
// Возвращаемые значения:
//     ОбщийМодуль.РаботаСHttp - модуль вызова функции
//
Функция УстановитьПорт(ДополнительныеПараметры, Знач Порт) Экспорт
	ДополнительныеПараметры.Вставить("Порт", Порт);
	
	Возврат РаботаСHttpКлиентСервер;
КонецФункции

// Установка пользователя соединения
//
// Параметры:
//     ДополнительныеПараметры - Структура - конфигурация выполнения запроса
//     Пользователь - Строка - пользователь соединения
//
// Возвращаемые значения:
//     ОбщийМодуль.РаботаСHttp - модуль вызова функции
//
Функция УстановитьПользователяСоединения(ДополнительныеПараметры, Знач Пользователь) Экспорт
	ДополнительныеПараметры.Вставить("Пользователь", Пользователь);
	
	Возврат РаботаСHttpКлиентСервер;
КонецФункции

// Установка пароля соединения
//
// Параметры:
//     ДополнительныеПараметры - Структура - конфигурация выполнения запроса
//     Пароль - Строка - пароль соединения
//
// Возвращаемые значения:
//     ОбщийМодуль.РаботаСHttp - модуль вызова функции
//
Функция УстановитьПарольСоединения(ДополнительныеПараметры, Знач Пароль) Экспорт
	ДополнительныеПараметры.Вставить("Пароль", Пароль);
	
	Возврат РаботаСHttpКлиентСервер;
КонецФункции

// Установка прокси соединения
//
// Параметры:
//     ДополнительныеПараметры - Структура - конфигурация выполнения запроса
//     Прокси - ИнтернетПрокси - параметры прокси-серверов
//
// Возвращаемые значения:
//     ОбщийМодуль.РаботаСHttp - модуль вызова функции
//
Функция УстановитьПрокси(ДополнительныеПараметры, Знач Прокси) Экспорт
	ДополнительныеПараметры.Вставить("Прокси", Прокси);
	
	Возврат РаботаСHttpКлиентСервер;
КонецФункции

// Установка таймаута соединения
//
// Параметры:
//     ДополнительныеПараметры - Структура - конфигурация выполнения запроса
//     Таймаут - Число - таймаут соединения
//
// Возвращаемые значения:
//     ОбщийМодуль.РаботаСHttp - модуль вызова функции
//
Функция УстановитьТаймаут(ДополнительныеПараметры, Знач Таймаут) Экспорт
	ДополнительныеПараметры.Вставить("Таймаут", Таймаут);
	
	Возврат РаботаСHttpКлиентСервер;
КонецФункции

// Установка защищенного соединения
//
// Параметры:
//     ДополнительныеПараметры - Структура - конфигурация выполнения запроса
//     ЗащищенноеСоединение - ЗащищенноеСоединениеOpenSSL - объект защищенного соединения OpenSSL
//
// Возвращаемые значения:
//     ОбщийМодуль.РаботаСHttp - модуль вызова функции
//
Функция УстановитьЗащищенноеСоединение(ДополнительныеПараметры, Знач ЗащищенноеСоединение) Экспорт
	ДополнительныеПараметры.Вставить("ЗащищенноеСоединение", ЗащищенноеСоединение);
	
	Возврат РаботаСHttpКлиентСервер;
КонецФункции

// Установка режима использования аутентификации NTLM или Negotiate
//
// Параметры:
//     ДополнительныеПараметры - Структура - конфигурация выполнения запроса
//     Использовать - Булево - значение использования аутентификации NTLM или Negotiate на сервере
//
// Возвращаемые значения:
//     ОбщийМодуль.РаботаСHttp - модуль вызова функции
//
Функция УстановитьИспользованиеАутентификацииОС(ДополнительныеПараметры, Знач Использовать) Экспорт
	ДополнительныеПараметры.Вставить("ИспользоватьАутентификациюОС", Использовать);
	
	Возврат РаботаСHttpКлиентСервер;
КонецФункции

// Установка имени выходного файла для хранения данных ответа сервера
//
// Параметры:
//     ДополнительныеПараметры - Структура - конфигурация выполнения запроса
//     ИмяВыходногоФайла - Строка - имя выходного файла, в который записываются полученные с сервера данные
//
// Возвращаемые значения:
//     ОбщийМодуль.РаботаСHttp - модуль вызова функции
//
Функция УстановитьИмяВыходногоФайла(ДополнительныеПараметры, Знач ИмяВыходногоФайла) Экспорт
	ДополнительныеПараметры.Вставить("ИмяВыходногоФайла", ИмяВыходногоФайла);
	
	Возврат РаботаСHttpКлиентСервер;
КонецФункции

// Добавление очередного текстового поля формы в теле HTTP-запроса
//
// Параметры:
//     ПоляФормы - Массив - коллекция полей формы
//     Значение - Строка - значение текстового поля
//     ТипMIME - Строка | Неопределено - MIME-тип (необязательный)
//
// Возвращаемые значения:
//     ОбщийМодуль.РаботаСHttp - модуль вызова функции
//
Функция ДобавитьПолеФормыТекст(ПоляФормы, Знач Значение, Знач ТипMIME = Неопределено) Экспорт
	Поле = Новый Структура("Значение", Значение);
	
	Если ТипMIME <> Неопределено Тогда
		Поле.Вставить("ТипMIME", ТипMIME);
	КонецЕсли;
	
	ПоляФормы.Добавить(Поле);
	
	Возврат РаботаСHttpКлиентСервер;
КонецФункции

// Добавление очередного поля с файлом в форме тела HTTP-запроса
//
// Параметры:
//     ПоляФормы - Массив - коллекция полей формы
//     Значение - Файл - объект доступа к файлу
//     ИмяФайла - Строка | Неопределено - имя файла в поле формы (необязательный)
//     ТипMIME - Строка | Неопределено - MIME-тип (необязательный)
//     Кодировка - КодировкаТекста | Строка | Неопределено - кодировка (необязательный)
//
// Возвращаемые значения:
//     ОбщийМодуль.РаботаСHttp - модуль вызова функции
//
Функция ДобавитьПолеФормыФайл(ПоляФормы, Знач Значение, ИмяФайла = Неопределено, Знач ТипMIME = Неопределено, Знач Кодировка = Неопределено) Экспорт
	Поле = Новый Структура("Значение", Значение);
	
	Если ИмяФайла <> Неопределено Тогда
		Поле.Вставить("Имя", ИмяФайла);
	КонецЕсли;
	Если ТипMIME <> Неопределено Тогда
		Поле.Вставить("ТипMIME", ТипMIME);
	КонецЕсли;
	Если Кодировка <> Неопределено Тогда
		Поле.Вставить("Кодировка", Кодировка);
	КонецЕсли;
	
	ПоляФормы.Добавить(Поле);
	
	Возврат РаботаСHttpКлиентСервер;
КонецФункции

// Установка разделителя полей формы в теле HTTP-запроса
//
// Параметры:
//     ДополнительныеПараметры - Структура - конфигурация выполнения запроса
//     Разделитель - Строка - разделитель полей
//
// Возвращаемые значения:
//     ОбщийМодуль.РаботаСHttp - модуль вызова функции
//
Функция УстановитьРазделительПолейФормы(ДополнительныеПараметры, Знач Разделитель) Экспорт
	ДополнительныеПараметры.Вставить("Разделитель", Разделитель);
	
	Возврат РаботаСHttpКлиентСервер;
КонецФункции
#КонецОбласти


// Копирует cookies конфигурации-источника в конфигурацию-приёмник
//
// Параметры:
//     КонфигурацияПриемник - Структура - конфигурация выполнения запроса
//     КонфигурацияИсточник - Структура - конфигурация выполнения запроса
//     Заменять - Булево - заменять Cookie при совпадении имени
//
Процедура СкопироватьПеченье(КонфигурацияПриемник, Знач КонфигурацияИсточник, Знач Заменять = Ложь) Экспорт
	Если НЕ КонфигурацияИсточник.Свойство("Сессия") Тогда
		Возврат;
	КонецЕсли;
	Если НЕ КонфигурацияИсточник.Сессия.Свойство("Печенье") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ КонфигурацияПриемник.Свойство("Сессия") Тогда
		КонфигурацияПриемник.Вставить("Сессия", Новый Структура);
	КонецЕсли;
	Если НЕ КонфигурацияПриемник.Сессия.Свойство("Печенье") Тогда
		КонфигурацияПриемник.Сессия.Вставить("Печенье", Новый Соответствие);
	КонецЕсли;
	
	ОбъединитьПеченье(КонфигурацияПриемник.Сессия.Печенье, КонфигурацияИсточник.Сессия.Печенье, Заменять);
КонецПроцедуры
#КонецОбласти


#Область СЛУЖЕБНЫЕ_ПРОЦЕДУРЫ_И_ФУНКЦИИ
Функция СтруктураИдентификатораРесурса(Знач ИдентификаторРесурса)
	фРезультат = Новый Структура(
		"Сервер, АдресРесурса, Пользователь, Пароль, Порт, ЗащищенноеСоединение, Параметры",
		"",
		"/",
		"",
		"",
		80,
		Ложь,
		Неопределено
	);
	
	ПозицияНачалаПоиска = 8;
	
	Если СтрНачинаетсяС(ИдентификаторРесурса, "https://") Тогда
		ПозицияНачалаПоиска = 9;
		
		фРезультат.ЗащищенноеСоединение = Истина;
		фРезультат.Порт = 443;
	ИначеЕсли НЕ СтрНачинаетсяС(ИдентификаторРесурса, "http://") Тогда
		ВызватьИсключение "Не удалось разобрать URI";
	КонецЕсли;
	
	ДлинаИдентификатораРесурса = СтрДлина(ИдентификаторРесурса);
	ПозицияНачалаАдресаРесурса = СтрНайти(ИдентификаторРесурса, "/", , ПозицияНачалаПоиска);
	ПозицияНачалаСтрокиПараметров = СтрНайти(ИдентификаторРесурса, "?", , ПозицияНачалаПоиска); // допущение: пароль не содержит символ '?'
	
	Обращение = Сред(ИдентификаторРесурса, ПозицияНачалаПоиска, ?(ПозицияНачалаАдресаРесурса = 0, ПозицияНачалаСтрокиПараметров, ПозицияНачалаАдресаРесурса) - ПозицияНачалаПоиска);
	ДлинаОбращения = СтрДлина(Обращение);
	
	ПозицияПослеАвторизации = СтрНайти(Обращение, "@");
	Авторизация = Лев(Обращение, ПозицияПослеАвторизации - 1);
	ДлинаАвторизации = СтрДлина(Авторизация);
	Если ДлинаАвторизации > 0 Тогда
		ПозицияРазделителяАвторизации = СтрНайти(Авторизация, ":");
		ПозицияРазделителяАвторизации = ?(ПозицияРазделителяАвторизации = 0, ДлинаАвторизации + 1, ПозицияРазделителяАвторизации);
		
		фРезультат.Пользователь = СокрЛП(Лев(Авторизация, ПозицияРазделителяАвторизации - 1));
		фРезультат.Пароль       = Прав(Авторизация, ДлинаАвторизации - ПозицияРазделителяАвторизации); 	
	КонецЕсли;
	
	ИмяХоста = Прав(Обращение, ДлинаОбращения - ПозицияПослеАвторизации);
	
	ПозицияПорта = СтрНайти(ИмяХоста, ":");
	Если ПозицияПорта > 0 Тогда
		фРезультат.Порт = Число(Сред(ИмяХоста, ПозицияПорта + 1, ?(ПозицияНачалаАдресаРесурса = 0, ПозицияНачалаСтрокиПараметров - ПозицияНачалаПоиска, ПозицияНачалаАдресаРесурса) - ПозицияПорта));
	КонецЕсли;
	
	фРезультат.Сервер = ?(ПозицияПорта = 0, ИмяХоста, Лев(ИмяХоста, ПозицияПорта - 1));
	
	Если ПозицияНачалаАдресаРесурса > 0 Тогда
		фРезультат.АдресРесурса = Сред(
			ИдентификаторРесурса,
			ПозицияНачалаАдресаРесурса,
			?(
				ПозицияНачалаСтрокиПараметров = 0,
				ДлинаИдентификатораРесурса + 1,
				ПозицияНачалаСтрокиПараметров
			) - ПозицияНачалаАдресаРесурса
		);
	КонецЕсли;
	
	ЗначенияПараметров = Новый Соответствие;
	
	ПараметрыСтрока = ?(
		ПозицияНачалаСтрокиПараметров = 0,
		"",
		Прав(ИдентификаторРесурса, ДлинаИдентификатораРесурса - ПозицияНачалаСтрокиПараметров)
	);
	
	Параметры = СтрРазделить(ПараметрыСтрока, "&", Ложь);
	Для Каждого Параметр Из Параметры Цикл
		ПозицияРазделителя = СтрНайти(Параметр, "=");
		Если ПозицияРазделителя = 0 Тогда
			ПозицияРазделителя = СтрДлина(Параметр) + 1;
		КонецЕсли;
		
		ИмяПараметра = Лев(Параметр, ПозицияРазделителя - 1);
		Если Прав(ИмяПараметра, 2) = "[]" Тогда
			ИмяПараметра = Лев(ИмяПараметра, СтрДлина(ИмяПараметра)-2);
		КонецЕсли;
		Если ПустаяСтрока(ИмяПараметра) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗначениеПараметра = Прав(Параметр, СтрДлина(Параметр) - ПозицияРазделителя);
		
		ТекущееЗначениеПараметра = ЗначенияПараметров.Получить(ИмяПараметра);
		Если ТекущееЗначениеПараметра = Неопределено Тогда
			ЗначенияПараметров.Вставить(ИмяПараметра, ЗначениеПараметра);
		Иначе
			Если ТипЗнч(ТекущееЗначениеПараметра) <> Тип("Массив") Тогда
				ЗначениеПараметраНаДобавление = ТекущееЗначениеПараметра;
				
				ТекущееЗначениеПараметра = Новый Массив;
				ТекущееЗначениеПараметра.Добавить(ЗначениеПараметраНаДобавление);
				
				ЗначенияПараметров.Вставить(ИмяПараметра, ТекущееЗначениеПараметра);
			КонецЕсли;
			
			ТекущееЗначениеПараметра.Добавить(ЗначениеПараметра);
		КонецЕсли;
	КонецЦикла;
	
	фРезультат.Параметры = ЗначенияПараметров;
	
	Возврат фРезультат;
КонецФункции

Функция НовоеHTTPСоединение(Знач ДанныеURI, Знач ДополнительныеПараметры)
	КонфигурацияСоединения = Новый Структура(
		"Сервер, Порт",
		ДанныеURI.Сервер,
		?(ДополнительныеПараметры.Свойство("Порт"), ДополнительныеПараметры.Порт, ДанныеURI.Порт)
	);
	
	Если НЕ ДополнительныеПараметры.Свойство("ЗащищенноеСоединение") И ДанныеURI.ЗащищенноеСоединение Тогда
		КонфигурацияСоединения.Вставить("ЗащищенноеСоединение", Новый ЗащищенноеСоединениеOpenSSL());
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ДанныеURI.Пользователь) Тогда
		КонфигурацияСоединения.Вставить("Пользователь", ДанныеURI.Пользователь);
		КонфигурацияСоединения.Вставить("Пароль",       ДанныеURI.Пароль);
	КонецЕсли;
	
	Для Каждого Ключ Из СтрРазделить("Пользователь,Пароль,Прокси,Таймаут,ИспользоватьАутентификациюОС", ",") Цикл
		Если ДополнительныеПараметры.Свойство(Ключ) Тогда 
			КонфигурацияСоединения.Вставить(Ключ, ДополнительныеПараметры[Ключ]);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый HTTPСоединение(
		КонфигурацияСоединения.Сервер,
		КонфигурацияСоединения.Порт,
		?(КонфигурацияСоединения.Свойство("Пользователь"),                 КонфигурацияСоединения.Пользователь,                 ""),
		?(КонфигурацияСоединения.Свойство("Пароль"),                       КонфигурацияСоединения.Пароль,                       ""),
		?(КонфигурацияСоединения.Свойство("Прокси"),                       КонфигурацияСоединения.Прокси,                       Неопределено),
		?(КонфигурацияСоединения.Свойство("Таймаут"),                      КонфигурацияСоединения.Таймаут,                      0),
		?(КонфигурацияСоединения.Свойство("ЗащищенноеСоединение"),         КонфигурацияСоединения.ЗащищенноеСоединение,         Неопределено),
		?(КонфигурацияСоединения.Свойство("ИспользоватьАутентификациюОС"), КонфигурацияСоединения.ИспользоватьАутентификациюОС, Ложь)
	);
КонецФункции

Функция ПараметрыЗапросаСтрокой(Знач ДанныеURI, Знач ПараметрыЗапроса, Знач ДополнительныеПараметры)
	МножествоПараметров = Новый Соответствие;
	
	Для Каждого КЗ Из ДанныеURI.Параметры Цикл
		МножествоПараметров.Вставить(КЗ.Ключ, КЗ.Значение);
	КонецЦикла;
	
	Если НЕ ДополнительныеПараметры.Свойство("НеИспользоватьПараметрыИзИдентификатораРесурса") Тогда
		Для Каждого КЗ Из ПараметрыЗапроса Цикл
			МножествоПараметров.Вставить(КЗ.Ключ, КЗ.Значение);
		КонецЦикла;
	КонецЕсли;
	
	ПараметрыДублируются = ДополнительныеПараметры.Свойство("ПараметрыДублируются");
	СуффиксИмениПараметра = ?(ДополнительныеПараметры.Свойство("СтильДублирующихсяПараметровPHP"), "[]", "");
	ЧастиСтроки = Новый Массив;
	
	Для Каждого КЗ Из МножествоПараметров Цикл
		Если ТипЗнч(КЗ.Значение) = Тип("Массив") Тогда
			Если ПараметрыДублируются Тогда
				Для Каждого ЗначениеПараметра Из КЗ.Значение Цикл
					ЧастиСтроки.Добавить(КЗ.Ключ + СуффиксИмениПараметра + "=" + ЗначениеПараметра);
				КонецЦикла;
			Иначе
				ЧастиСтроки.Добавить(КЗ.Ключ + "=" + КЗ.Значение[КЗ.Значение.Количество()-1]);
			КонецЕсли;
		Иначе
			ЧастиСтроки.Добавить(КЗ.Ключ + "=" + КЗ.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ?(ЧастиСтроки.Количество() = 0, "", "?" + СтрСоединить(ЧастиСтроки, "&"));
КонецФункции

Функция ЗаголовкиЗапроса(Знач ДополнительныеПараметры)
	фРезультат = Новый Соответствие;
	
	Если ДополнительныеПараметры.Свойство("Заголовки") Тогда
		Для Каждого КЗ Из ДополнительныеПараметры.Заголовки Цикл
			фРезультат.Вставить(КЗ.Ключ, КЗ.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ТипMIME") Тогда
		фРезультат.Вставить("Content-Type", ДополнительныеПараметры.ТипMIME);
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("Аутентификация") И ДополнительныеПараметры.Аутентификация.Свойство("Тип") Тогда
		Если ДополнительныеПараметры.Аутентификация.Тип = "Basic" Тогда
			ДобавитьBasicАутентификациюВЗаголовкиЗапроса(фРезультат, ДополнительныеПараметры.Аутентификация);
		ИначеЕсли ДополнительныеПараметры.Аутентификация.Тип = "NTLM" Тогда
			ДополнительныеПараметры.Вставить("ИспользоватьАутентификациюОС", Истина);
			ДополнительныеПараметры.Вставить("Пользователь",                 ДополнительныеПараметры.Аутентификация.Пользователь);
			ДополнительныеПараметры.Вставить("Пароль",                       ДополнительныеПараметры.Аутентификация.Пароль);
		КонецЕсли;
	КонецЕсли;
	
	Возврат фРезультат;
КонецФункции

Процедура ДобавитьBasicАутентификациюВЗаголовкиЗапроса(Заголовки, Знач ДанныеАутентификации)
	СтрокаАутентификации = РаботаСHttpСлужебный.СтрокаBasicАвторизации(ДанныеАутентификации.Пользователь, ДанныеАутентификации.Пароль);
	
	Заголовки.Вставить("Authorization", "Basic " + СтрокаАутентификации);
КонецПроцедуры

Функция КодировкаИзДопПараметров(Знач ДополнительныеПараметры)
	Возврат ?(ДополнительныеПараметры.Свойство("Кодировка"), ДополнительныеПараметры.Кодировка, РаботаСHttpПовтИсп.КодировкаПоУмолчанию());
КонецФункции

Функция ИмяВыходногоФайлаИзДопПараметров(Знач ДополнительныеПараметры)
	Возврат ?(ДополнительныеПараметры.Свойство("ИмяВыходногоФайла"), ДополнительныеПараметры.ИмяВыходногоФайла, "");
КонецФункции

Процедура ДобавитьКодировкуВЗаголовкиЗапроса(Заголовки, Знач ДополнительныеПараметры)
	Кодировка = КодировкаИзДопПараметров(ДополнительныеПараметры);
	Если Заголовки.Получить("Content-Type") <> Неопределено Тогда
		Заголовки.Вставить("Content-Type", Заголовки.Получить("Content-Type") + "; charset=" + Кодировка);
	КонецЕсли;
КонецПроцедуры

Процедура ДобавитьРазмерДанныхВЗаголовкиЗапроса(Заголовки, Знач ДополнительныеПараметры, Знач Данные)
	Если ТипЗнч(Данные) = Тип("Строка") Тогда
		Кодировка = КодировкаИзДопПараметров(ДополнительныеПараметры);
		Заголовки.Вставить("Content-Lenght", XMLСтрока(РаботаСHttpСлужебный.РазмерТекстовыхДанных(Данные, Кодировка)));
	ИначеЕсли ТипЗнч(Данные) = Тип("ДвоичныеДанные") Тогда
		Заголовки.Вставить("Content-Lenght", XMLСтрока(Данные.Размер()));
	Иначе
		ВызватьИсключение "Неизвестный тип данных: " + ТипЗнч(Данные);
	КонецЕсли;
КонецПроцедуры

Процедура ОбработатьОтвет(Знач Ответ, ДополнительныеПараметры, Знач ДанныеURI)
	Если НЕ ДополнительныеПараметры.Свойство("Сессия") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Заголовок Из Ответ.Заголовки Цикл
		Если НРег(Заголовок.Ключ) = "set-cookie" Тогда
			ПринятьПеченье(ДополнительныеПараметры.Сессия, Заголовок.Значение, ДанныеURI);
			Прервать;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ПринятьПеченье(Сессия, Знач ОписаниеПеченья, Знач ДанныеURI)
	Перем Печенье;
	
	Сессия.Свойство("Печенье", Печенье);
	Если Печенье = Неопределено Тогда
		Печенье = Новый Соответствие;
		Сессия.Вставить("Печенье", Печенье);
	КонецЕсли;
	
	Для Каждого Печенько Из ВыпеченныеПеченьки(ОписаниеПеченья) Цикл
		Ячейка = Печенько.Атрибуты.Получить("domain");
		Получатель = ?(Ячейка = Неопределено, КодироватьАдресСервера(ДанныеURI.Сервер), Ячейка.Значение);
		ПеченьеПолучателя = Печенье.Получить(Получатель);
		Если ПеченьеПолучателя = Неопределено Тогда
			ПеченьеПолучателя = Новый Соответствие;
			Печенье.Вставить(Получатель, ПеченьеПолучателя);
		КонецЕсли;
		
		ПеченьеПолучателя.Вставить(НРег(Печенько.Имя), Печенько);
	КонецЦикла;
КонецПроцедуры

Функция ВыпеченныеПеченьки(Знач ОписаниеПеченья)
	фрезультат = Новый Массив;
	НормализованноеОписаниеПеченья = НРег(ОписаниеПеченья);
	ДлинаОписания = СтрДлина(НормализованноеОписаниеПеченья);
	ТипыТокенов = РаботаСHttpПовтИсп.ТипыТокеновПарсингаПеченья();
	СостоянияДКА = РаботаСHttpПовтИсп.СостоянияДКАПарсингаПеченья();
	ДКА = РаботаСHttpПовтИсп.ДКАПарсингаПеченья();
	
	Печенька = Новый Структура("Имя, Значение, Атрибуты", "", "", Новый Массив);
	ЗначениеПеченьки = Новый Массив;
	Атрибут = Новый Структура("Имя, Значение");
	ЗначениеАтрибута = Новый Массив;

	Позиция = 1;
	Состояние = СостоянияДКА.ИмяПеченьки;
	НовоеСостояние = "";
	
	ЗаписатьИмяПеченьки = Истина;
	ЗаписатьЗначениеПеченьки = Ложь;
	СобиратьЗначениеПеченьки = Ложь;
	СобиратьЗначениеАтрибута = Ложь;
	ПроверитьИмяАтрибута = Ложь;
	ЗаписатьАтрибут = Ложь;

	Для Каждого ПозицияТокена Из РаботаСHttpВызовСервера.ПозицииТокеновПеченья(НормализованноеОписаниеПеченья) Цикл
		// Логика состояния ИмяИлиЗначениеПеченьки (AB)
		Если СобиратьЗначениеПеченьки Тогда
			Если ПозицияТокена.ТипТокена = ТипыТокенов.РазделителиПар Тогда // это уже следующая печенька
				ЗначениеПеченьки.Удалить(ЗначениеПеченьки.ВГраница());
			ИначеЕсли ПозицияТокена.ТипТокена = ТипыТокенов.РазделителиПеченья Тогда // добавить фрагмент значения печеньки
				ЗначениеПеченьки.Добавить(Сред(НормализованноеОписаниеПеченья, Позиция, ПозицияТокена.Позиция - Позиция));
				ЗначениеПеченьки.Добавить(ПозицияТокена.Токен);
				Позиция = ПозицияТокена.Позиция + 1;
				Продолжить;
			Иначе // ТипТокена = ТипыТокенов.РазделителиАтрибутов
				ЗначениеПеченьки.Добавить(Сред(НормализованноеОписаниеПеченья, Позиция, ПозицияТокена.Позиция - Позиция));
			КонецЕсли;
			
			Печенька.Значение = СтрСоединить(ЗначениеПеченьки);
			СобиратьЗначениеПеченьки = Ложь;
			
			Если ПозицияТокена.ТипТокена = ТипыТокенов.РазделителиПар Тогда // это уже следующая печенька
				фрезультат.Добавить(Печенька);
				Печенька = Новый Структура("Имя, Значение, Атрибуты", "", "", Новый Массив);
				ЗаписатьИмяПеченьки = Истина;
			КонецЕсли;
		// Логика состояния ИмяПеченькиИлиЗначениеАтрибута (AD)
		ИначеЕсли СобиратьЗначениеАтрибута Тогда
			Если ПозицияТокена.ТипТокена = ТипыТокенов.РазделителиПар Тогда // это уже следующая печенька
				ЗначениеАтрибута.Удалить(ЗначениеАтрибута.ВГраница());
			ИначеЕсли ПозицияТокена.ТипТокена = ТипыТокенов.РазделителиПеченья Тогда  // добавить фрагмент значения атрибута
				// Анализировать по формату конкретного атрибута
				ЗначениеАтрибута.Добавить(Сред(НормализованноеОписаниеПеченья, Позиция, ПозицияТокена.Позиция - Позиция));
				ЗначениеАтрибута.Добавить(ПозицияТокена.Токен);
				Позиция = ПозицияТокена.Позиция + 1;
				Продолжить;
			КонецЕсли;
			
			Атрибут.Значение = СтрСоединить(ЗначениеАтрибута);
			СобиратьЗначениеАтрибута = Ложь;
			ЗаписатьАтрибут = Истина;
			
			Если ПозицияТокена.ТипТокена = ТипыТокенов.РазделителиПар Тогда // это уже следующая печенька
				ЗаписатьАтрибут = Ложь;
				Печенька.Атрибуты.Добавить(Атрибут);
				фрезультат.Добавить(Печенька);
				Печенька = Новый Структура("Имя, Значение, Атрибуты", "", "", Новый Массив);
				ЗаписатьИмяПеченьки = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗаписатьИмяПеченьки Тогда
			Печенька.Имя = СокрЛП(Сред(НормализованноеОписаниеПеченья, Позиция, ПозицияТокена.Позиция - Позиция));
			ЗаписатьИмяПеченьки = Ложь;
		ИначеЕсли ПроверитьИмяАтрибута Тогда
			Если ПозицияТокена.ТипТокена <> ТипыТокенов.Атрибуты Тогда
				ВызватьИсключение "Неизвестный атрибут";
			КонецЕсли;
			
			Атрибут = Новый Структура("Имя, Значение", ТРег(ПозицияТокена.Токен));
			ЗначениеАтрибута = Новый Массив;
			Позиция = ПозицияТокена.Позиция + ПозицияТокена.Смещение;
			ПроверитьИмяАтрибута = Ложь;
			ЗаписатьАтрибут = Истина;
			Состояние = НовоеСостояние;
			Продолжить;
		КонецЕсли;
		
		НовоеСостояние = ДКА.Получить(Состояние).Получить(ПозицияТокена.ТипТокена);
		Если НовоеСостояние = СостоянияДКА.ИмяПеченьки Тогда
			Если ЗаписатьАтрибут Тогда
				ЗаписатьАтрибут = Ложь;
				ЗначениеАтрибута.Добавить(Сред(НормализованноеОписаниеПеченья, Позиция, ПозицияТокена.Позиция - Позиция));
				Атрибут.Значение = СтрСоединить(ЗначениеАтрибута);
				Печенька.Атрибуты.Добавить(Атрибут);
			КонецЕсли;
			фрезультат.Добавить(Печенька);
			Печенька = Новый Структура("Имя, Значение, Атрибуты", "", "", Новый Массив);
			ЗаписатьИмяПеченьки = Истина;
			Состояние = НовоеСостояние;
			Позиция = ПозицияТокена.Позиция + 1;
		ИначеЕсли НовоеСостояние = СостоянияДКА.ЗначениеПеченьки Тогда
			ЗаписатьЗначениеПеченьки = Истина;
			ЗначениеПеченьки = Новый Массив;
			Позиция = ПозицияТокена.Позиция + 1;
			Состояние = НовоеСостояние;
		ИначеЕсли НовоеСостояние = СостоянияДКА.ИмяАтрибута Тогда
			Если ЗаписатьЗначениеПеченьки Тогда
				ЗаписатьЗначениеПеченьки = Ложь;
				Печенька.Значение = Сред(НормализованноеОписаниеПеченья, Позиция, ПозицияТокена.Позиция - Позиция);
			ИначеЕсли ЗаписатьАтрибут Тогда
				ЗаписатьАтрибут = Ложь;
				ЗначениеАтрибута.Добавить(Сред(НормализованноеОписаниеПеченья, Позиция, ПозицияТокена.Позиция - Позиция));
				Атрибут.Значение = СтрСоединить(ЗначениеАтрибута);
				Печенька.Атрибуты.Добавить(Атрибут);
				Позиция = ПозицияТокена.Позиция + 1;
			КонецЕсли;
			
			// на следующем шаге проверить имя атрибута и начать его писать
			ПроверитьИмяАтрибута = Истина;
		ИначеЕсли НовоеСостояние = СостоянияДКА.ЗначениеАтрибута Тогда
			// начать собирать значение атрибута
			Позиция = ПозицияТокена.Позиция + 1;
			Состояние = НовоеСостояние;
		ИначеЕсли НовоеСостояние = СостоянияДКА.ИмяИлиЗначениеПеченьки Тогда
			// собирать значение печеньки пока не придёт знак (ТипТокена В {1, 2}) его записать
			ЗаписатьЗначениеПеченьки = Ложь;
			СобиратьЗначениеПеченьки = Истина;
			ЗначениеПеченьки.Добавить(Сред(НормализованноеОписаниеПеченья, Позиция, ПозицияТокена.Позиция - Позиция));
			ЗначениеПеченьки.Добавить(ПозицияТокена.Токен);
			Позиция = ПозицияТокена.Позиция + 1;
			Состояние = НовоеСостояние;
		ИначеЕсли НовоеСостояние = СостоянияДКА.ИмяПеченькиИлиЗначениеАтрибута Тогда
			// собирать значение атрибута пока не придёт знак (ТипТокена В {1, 2}) его записать
			ЗаписатьАтрибут = Ложь;
			СобиратьЗначениеАтрибута = Истина;
			ЗначениеАтрибута.Добавить(Сред(НормализованноеОписаниеПеченья, Позиция, ПозицияТокена.Позиция - Позиция));
			ЗначениеАтрибута.Добавить(ПозицияТокена.Токен);
			Позиция = ПозицияТокена.Позиция + 1;
			Состояние = НовоеСостояние;
		Иначе	
			ВызватьИсключение "Неопределено";
		КонецЕсли;
	КонецЦикла;

	// Обработка финального состояния
	Если ЗаписатьИмяПеченьки Тогда
		Печенька.Имя = СокрЛП(Сред(НормализованноеОписаниеПеченья, Позиция, ДлинаОписания - Позиция + 1));
		фрезультат.Добавить(Печенька);
	ИначеЕсли ЗаписатьЗначениеПеченьки Тогда
		Печенька.Значение = Сред(НормализованноеОписаниеПеченья, Позиция, ПозицияТокена.Позиция - Позиция);
		фрезультат.Добавить(Печенька);
	ИначеЕсли СобиратьЗначениеПеченьки Тогда
		ЗначениеПеченьки.Добавить(Сред(НормализованноеОписаниеПеченья, Позиция, ПозицияТокена.Позиция - Позиция));
		Печенька.Значение = СтрСоединить(ЗначениеПеченьки);
		фрезультат.Добавить(Печенька);
	ИначеЕсли ЗаписатьАтрибут Тогда
		Атрибут.Значение = Сред(НормализованноеОписаниеПеченья, Позиция, ПозицияТокена.Позиция - Позиция);
		Печенька.Атрибуты.Добавить(Атрибут);
		фрезультат.Добавить(Печенька);
	ИначеЕсли СобиратьЗначениеАтрибута Тогда
		ЗначениеАтрибута.Добавить(Сред(НормализованноеОписаниеПеченья, Позиция, ПозицияТокена.Позиция - Позиция));
		Атрибут.Значение = СтрСоединить(ЗначениеАтрибута);
		Печенька.Атрибуты.Добавить(Атрибут);
		фрезультат.Добавить(Печенька);
	КонецЕсли;
	
	Возврат фРезультат;
КонецФункции

Процедура ОбъединитьПеченье(Приемник, Знач Источник, Знач Заменять = Ложь)
	Для Каждого КЗ Из Источник Цикл
		ПеченьеСорта = Приемник.Получить(КЗ.Ключ);
		Если ПеченьеСорта = Неопределено Тогда
			ПеченьеСорта = Новый Соответствие;
			Приемник.Вставить(КЗ.Ключ, ПеченьеСорта);
		КонецЕсли;
		
		Для Каждого Печенько Из КЗ.Значение Цикл
			Если НЕ Заменять И ПеченьеСорта.Получить(Печенько.Ключ) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ПеченьеСорта.Вставить(Печенько.Ключ, Печенько.Значение);
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Функция КодироватьАдресСервера(Знач АдресСервера)
	фРезультат = Новый Массив;
	Префикс = "xn--";
	
	Для Каждого Домен Из СтрРазделить(АдресСервера, ".", Ложь) Цикл
		ЕстьНеASCII = Ложь;
		Для я = 1 По СтрДлина(Домен) Цикл
			ЕстьНеASCII = НЕ РаботаСHttpСлужебный.ЭтоСимволASCII(КодСимвола(Домен, я));
			Если ЕстьНеASCII Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		фРезультат.Добавить(
			?(
				ЕстьНеASCII,
				Префикс + РаботаСHttpСлужебный.PunycodeЗначение(Домен),
				Домен
			)
		);
	КонецЦикла;
	
	Возврат СтрСоединить(фРезультат, ".");
КонецФункции
#КонецОбласти

// TODO: избавиться от дублирования кода в методах выполнения запроса
