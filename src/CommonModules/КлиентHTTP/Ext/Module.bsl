
Процедура ПринятьПеченье(Сессия, Знач ОписаниеПеченья, Знач ДанныеURI) Экспорт
	Перем Печенье;
	
	Сессия.Свойство("Печенье", Печенье);
	Если Печенье = Неопределено Тогда
		Печенье = Новый Соответствие;
		Сессия.Вставить("Печенье", Печенье);
	КонецЕсли;
	
	Для Каждого Печенько Из ВыпеченныеПеченьки(ОписаниеПеченья) Цикл
		Получатель = Неопределено;
		
		Для Каждого Атрибут Из Печенько.Атрибуты Цикл
			Если Атрибут.Имя = "domain" Тогда
				Получатель = СокрЛП(Атрибут.Значение);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Получатель = КлиентHTTPСлужебный.НормализованныйАдресСервера(
			?(ЗначениеЗаполнено(Получатель), Получатель, ДанныеURI.Сервер)
		);
		
		ПеченьеПолучателя = Печенье.Получить(Получатель);
		Если ПеченьеПолучателя = Неопределено Тогда
			ПеченьеПолучателя = Новый Соответствие;
			Печенье.Вставить(Получатель, ПеченьеПолучателя);
		КонецЕсли;
		
		ПеченьеПолучателя.Вставить(
			НРег(СокрЛП(Печенько.Имя)),
			СвойстваПеченьки(Печенько.Имя, Печенько.Значение, Печенько.Атрибуты)
		);
	КонецЦикла;
КонецПроцедуры

Функция ТекущаяУниверсальнаяДатаНаСервере() Экспорт
	Возврат ТекущаяУниверсальнаяДата();
КонецФункции

Функция РаскодированныйИдентификаторРесурса(Знач ИдентификаторРесурса) Экспорт
	Возврат РаскодироватьСтроку(ИдентификаторРесурса, СпособКодированияСтроки.URLВКодировкеURL);
КонецФункции

Функция ЗаголовокDigest(Знач Конфигурация, Знач КонтекстВыполненияАдресВХ) Экспорт
	КонтекстВыполнения = ПолучитьИзВременногоХранилища(КонтекстВыполненияАдресВХ);
	УдалитьИзВременногоХранилища(КонтекстВыполненияАдресВХ);
	
	Параметры = Конфигурация.ДополнительныеПараметры.Сессия.ПараметрыDigest;
	Аутентификация = Конфигурация.ДополнительныеПараметры.Аутентификация;
	АдресРесурсаСПараметрами = Конфигурация.ДанныеURI.АдресРесурса + Конфигурация.Параметры;
	АлгоритмХеширования = НРег(Параметры.algorithm);
	УникальныйКлючКлиента = Лев(СтрЗаменить(НРег(Новый УникальныйИдентификатор), "-", ""), 16);
	
	КачествоЗащиты = Неопределено;
	Если ЗначениеЗаполнено(Параметры.qop) Тогда
		КачествоЗащиты = ?(СтрРазделить(НРег(Параметры.qop), ",", Ложь).Найти("auth") = Неопределено, "auth-int", "auth");
	КонецЕсли;
	
	A1 = СтрШаблон("%1:%2:%3", Аутентификация.Пользователь, Параметры.realm, Аутентификация.Пароль);
	HA1 = ХешСтрока(A1, АлгоритмХеширования);
	Если СтрЗаканчиваетсяНа(АлгоритмХеширования, "-sess") Тогда
		HA1 = ХешСтрока(СтрШаблон("%1:%2:%3", HA1, Параметры.nonce, УникальныйКлючКлиента), АлгоритмХеширования);
	КонецЕсли;
	
	A2 = ?(
	    КачествоЗащиты = "auth-int",
		СтрШаблон("%1:%2:%3", КонтекстВыполнения.Метод, АдресРесурсаСПараметрами, ХешСтрока(КонтекстВыполнения.Данные, АлгоритмХеширования)),
		СтрШаблон("%1:%2", КонтекстВыполнения.Метод, АдресРесурсаСПараметрами)
	);
	HA2 = ХешСтрока(A2, АлгоритмХеширования);
	
	Если НЕ Параметры.Свойство("lastnonce") Тогда
		Параметры.Вставить("lastnonce");
	КонецЕсли;
	
	Если Параметры.nonce = Параметры.lastnonce Тогда
		Параметры.nonce_count = Параметры.nonce_count + 1;
	Иначе
		Параметры.Вставить("nonce_count", 1);
	КонецЕсли;
	
	КоличествоИспользованийNonce = Формат(Параметры.nonce_count, "ЧЦ=8; ЧВН=; ЧГ=");
	
	Ответ = ХешСтрока(
		?(
			КачествоЗащиты = Неопределено,
			СтрШаблон("%1:%2:%3", HA1, Параметры.nonce, HA2),
			СтрШаблон("%1:%2:%3:%4:%5:%6", HA1, Параметры.nonce, КоличествоИспользованийNonce, УникальныйКлючКлиента, КачествоЗащиты, HA2)
		),
		АлгоритмХеширования
	);
	
	Параметры.lastnonce = Параметры.nonce;
	
	ЧастиАвторизации = Новый Массив;
	ЧастиАвторизации.Добавить(
		СтрШаблон(
			"username=""%1"", realm=""%2"", nonce=""%3"", uri=""%4"", response=""%5""",
			Конфигурация.ДополнительныеПараметры.Аутентификация.Пользователь,
			Параметры.realm,
			Параметры.nonce,
			АдресРесурсаСПараметрами,
			Ответ
		)
	);

	Если ЗначениеЗаполнено(Параметры.opaque) Тогда
		ЧастиАвторизации.Добавить(СтрШаблон(", opaque=""%1""", Параметры.opaque));
	КонецЕсли;
	Если ЗначениеЗаполнено(Параметры.algorithm) Тогда
		ЧастиАвторизации.Добавить(СтрШаблон(", algorithm=""%1""", Параметры.algorithm));
	КонецЕсли;
	Если ЗначениеЗаполнено(Параметры.qop) Тогда
		ЧастиАвторизации.Добавить(СтрШаблон(", qop=""auth"", nc=%1, cnonce=""%2""", КоличествоИспользованийNonce, УникальныйКлючКлиента));
	КонецЕсли;

	Возврат СтрШаблон("Digest %1", СтрСоединить(ЧастиАвторизации));
КонецФункции


Функция ВыпеченныеПеченьки(Знач ОписаниеПеченья)
	фРезультат = Новый Массив;
	НормализованноеОписаниеПеченья = НРег(ОписаниеПеченья);
	ДлинаОписания = СтрДлина(НормализованноеОписаниеПеченья);
	ТипыТокенов = КлиентHTTPПовтИсп.ТипыТокеновПарсингаПеченья();
	СостоянияДКА = КлиентHTTPПовтИсп.СостоянияДКАПарсингаПеченья();
	ДКА = КлиентHTTPПовтИсп.ДКАПарсингаПеченья();
	
	Печенька = Новый Структура("Имя, Значение, Атрибуты", "", "", Новый Массив);
	ЗначениеПеченьки = Новый Массив;
	Атрибут = Новый Структура("Имя, Значение");
	ЗначениеАтрибута = Новый Массив;

	Позиция = 1;
	Состояние = СостоянияДКА.ИмяПеченьки;
	НовоеСостояние = "";
	
	ЗаписатьИмяПеченьки = Истина;
	ЗаписатьЗначениеПеченьки = Ложь;
	СобиратьЗначениеПеченьки = Ложь;
	СобиратьЗначениеАтрибута = Ложь;
	ПроверитьИмяАтрибута = Ложь;
	ЗаписатьАтрибут = Ложь;
	ПрочитаноЗапятых = 0;
	КоличествоЗапятых = Неопределено;

	Для Каждого ПозицияТокена Из ПозицииТокеновПеченья(НормализованноеОписаниеПеченья) Цикл
		// Логика состояния ИмяИлиЗначениеПеченьки (AB)
		Если СобиратьЗначениеПеченьки Тогда
			Если ПозицияТокена.ТипТокена = ТипыТокенов.РазделителиПар Тогда // это уже следующая печенька
				ЗначениеПеченьки.Удалить(ЗначениеПеченьки.ВГраница());
			ИначеЕсли ПозицияТокена.ТипТокена = ТипыТокенов.РазделителиПеченья Тогда // добавить фрагмент значения печеньки
				ЗначениеПеченьки.Добавить(Сред(ОписаниеПеченья, Позиция, ПозицияТокена.Позиция - Позиция));
				ЗначениеПеченьки.Добавить(ПозицияТокена.Токен);
				Позиция = ПозицияТокена.Позиция + 1;
				Продолжить;
			Иначе // ТипТокена = ТипыТокенов.РазделителиАтрибутов
				ЗначениеПеченьки.Добавить(Сред(ОписаниеПеченья, Позиция, ПозицияТокена.Позиция - Позиция));
			КонецЕсли;
			
			Печенька.Значение = СтрСоединить(ЗначениеПеченьки);
			СобиратьЗначениеПеченьки = Ложь;
			
			Если ПозицияТокена.ТипТокена = ТипыТокенов.РазделителиПар Тогда // это уже следующая печенька
				фрезультат.Добавить(Печенька);
				Печенька = Новый Структура("Имя, Значение, Атрибуты", "", "", Новый Массив);
				ЗаписатьИмяПеченьки = Истина;
			КонецЕсли;
		// Логика состояния ИмяПеченькиИлиЗначениеАтрибута (AD)
		ИначеЕсли СобиратьЗначениеАтрибута Тогда
			Если ПозицияТокена.ТипТокена = ТипыТокенов.РазделителиПар Тогда // это уже следующая печенька
				ЗначениеАтрибута.Удалить(ЗначениеАтрибута.ВГраница());
			ИначеЕсли ПозицияТокена.ТипТокена = ТипыТокенов.РазделителиПеченья Тогда  // добавить фрагмент значения атрибута
				// Анализировать по формату конкретного атрибута
				ЗначениеАтрибута.Добавить(Сред(НормализованноеОписаниеПеченья, Позиция, ПозицияТокена.Позиция - Позиция));
				ЗначениеАтрибута.Добавить(ПозицияТокена.Токен);
				ПрочитаноЗапятых = ПрочитаноЗапятых + 1;
				Если КоличествоЗапятых <> Неопределено И ПрочитаноЗапятых >= КоличествоЗапятых Тогда
					СобиратьЗначениеАтрибута = Ложь;
					ЗначениеАтрибута.Удалить(ЗначениеАтрибута.ВГраница());
					Состояние = СостоянияДКА.ИмяПеченьки;
				Иначе
					Позиция = ПозицияТокена.Позиция + 1;
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Атрибут.Значение = СтрСоединить(ЗначениеАтрибута);
			ЗаписатьАтрибут = Истина;
			
			Если ПозицияТокена.ТипТокена = ТипыТокенов.РазделителиПар Тогда // это уже следующая печенька
				ЗаписатьАтрибут = Ложь;
				СобиратьЗначениеАтрибута = Ложь;
				Печенька.Атрибуты.Добавить(Атрибут);
				фрезультат.Добавить(Печенька);
				Печенька = Новый Структура("Имя, Значение, Атрибуты", "", "", Новый Массив);
				ЗаписатьИмяПеченьки = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗаписатьИмяПеченьки Тогда
			Печенька.Имя = СокрЛП(Сред(ОписаниеПеченья, Позиция, ПозицияТокена.Позиция - Позиция));
			ЗаписатьИмяПеченьки = Ложь;
		ИначеЕсли ПроверитьИмяАтрибута Тогда
			Если ПозицияТокена.ТипТокена <> ТипыТокенов.Атрибуты Тогда
				ВызватьИсключение "Неизвестный атрибут";
			КонецЕсли;
			
			Атрибут = Новый Структура("Имя, Значение", ПозицияТокена.Токен);
			ЗначениеАтрибута = Новый Массив;
			Позиция = ПозицияТокена.Позиция + ПозицияТокена.Смещение;
			ПроверитьИмяАтрибута = Ложь;
			ЗаписатьАтрибут = Истина;
			ПрочитаноЗапятых = 0;
			КоличествоЗапятых = ПозицияТокена.КоличествоЗапятых;
			Состояние = НовоеСостояние;
			Продолжить;
		КонецЕсли;
		
		НовоеСостояние = ДКА.Получить(Состояние).Получить(ПозицияТокена.ТипТокена);
		Если НовоеСостояние = СостоянияДКА.ИмяПеченьки Тогда
			Если ЗаписатьАтрибут Тогда
				ЗаписатьАтрибут = Ложь;
				
				Если СобиратьЗначениеАтрибута Тогда
					СобиратьЗначениеАтрибута = Ложь;
					ЗначениеАтрибута.Добавить(Сред(НормализованноеОписаниеПеченья, Позиция, ПозицияТокена.Позиция - Позиция));
					Атрибут.Значение = СтрСоединить(ЗначениеАтрибута);
				КонецЕсли;
				
				Печенька.Атрибуты.Добавить(Атрибут);
			КонецЕсли;
			фрезультат.Добавить(Печенька);
			Печенька = Новый Структура("Имя, Значение, Атрибуты", "", "", Новый Массив);
			ЗаписатьИмяПеченьки = Истина;
			Состояние = НовоеСостояние;
			Позиция = ПозицияТокена.Позиция + 1;
		ИначеЕсли НовоеСостояние = СостоянияДКА.ЗначениеПеченьки Тогда
			Если ЗаписатьЗначениеПеченьки Тогда
				Печенька.Значение = Печенька.Значение + Сред(ОписаниеПеченья, Позиция, ПозицияТокена.Позиция - Позиция); // менял
				Позиция = ПозицияТокена.Позиция;
			Иначе
				Позиция = ПозицияТокена.Позиция + 1;
			КонецЕсли;
			ЗаписатьЗначениеПеченьки = Истина;
			ЗначениеПеченьки = Новый Массив;
			Состояние = НовоеСостояние;
		ИначеЕсли НовоеСостояние = СостоянияДКА.ИмяАтрибута Тогда
			Если ЗаписатьЗначениеПеченьки Тогда
				ЗаписатьЗначениеПеченьки = Ложь;
				Печенька.Значение = Печенька.Значение + Сред(ОписаниеПеченья, Позиция, ПозицияТокена.Позиция - Позиция); // менял
			ИначеЕсли ЗаписатьАтрибут Тогда
				ЗаписатьАтрибут = Ложь;
				СобиратьЗначениеАтрибута = Ложь;
				ЗначениеАтрибута.Добавить(Сред(НормализованноеОписаниеПеченья, Позиция, ПозицияТокена.Позиция - Позиция));
				Атрибут.Значение = СтрСоединить(ЗначениеАтрибута);
				Печенька.Атрибуты.Добавить(Атрибут);
				Позиция = ПозицияТокена.Позиция + 1;
			КонецЕсли;
			
			// на следующем шаге проверить имя атрибута и начать его писать
			ПроверитьИмяАтрибута = Истина;
		ИначеЕсли НовоеСостояние = СостоянияДКА.ЗначениеАтрибута Тогда
			// начать собирать значение атрибута
			Позиция = ПозицияТокена.Позиция + 1;
			Состояние = НовоеСостояние;
		ИначеЕсли НовоеСостояние = СостоянияДКА.ИмяИлиЗначениеПеченьки Тогда
			// собирать значение печеньки пока не придёт знак (ТипТокена В {1, 2}) его записать
			ЗаписатьЗначениеПеченьки = Ложь;
			СобиратьЗначениеПеченьки = Истина;
			ЗначениеПеченьки.Добавить(Печенька.Значение + Сред(ОписаниеПеченья, Позиция, ПозицияТокена.Позиция - Позиция)); // менял
			ЗначениеПеченьки.Добавить(ПозицияТокена.Токен);
			Позиция = ПозицияТокена.Позиция + 1;
			Состояние = НовоеСостояние;
		ИначеЕсли НовоеСостояние = СостоянияДКА.ИмяПеченькиИлиЗначениеАтрибута Тогда
			// собирать значение атрибута пока не придёт знак (ТипТокена В {1, 2}) его записать
			ЗаписатьАтрибут = Ложь;
			СобиратьЗначениеАтрибута = Истина;
			ЗначениеАтрибута.Добавить(Сред(НормализованноеОписаниеПеченья, Позиция, ПозицияТокена.Позиция - Позиция));
			ЗначениеАтрибута.Добавить(ПозицияТокена.Токен);
			Позиция = ПозицияТокена.Позиция + 1;
			Состояние = НовоеСостояние;
		Иначе	
			ВызватьИсключение "Неопределено";
		КонецЕсли;
	КонецЦикла;

	// Обработка финального состояния
	Если ЗаписатьЗначениеПеченьки Тогда
		Печенька.Значение = Сред(ОписаниеПеченья, Позиция, ПозицияТокена.Позиция - Позиция);
		фрезультат.Добавить(Печенька);
	ИначеЕсли СобиратьЗначениеПеченьки Тогда
		ЗначениеПеченьки.Добавить(Сред(ОписаниеПеченья, Позиция, ПозицияТокена.Позиция - Позиция));
		Печенька.Значение = СтрСоединить(ЗначениеПеченьки);
		фрезультат.Добавить(Печенька);
	ИначеЕсли ЗаписатьАтрибут Тогда
		Атрибут.Значение = Сред(НормализованноеОписаниеПеченья, Позиция, ПозицияТокена.Позиция - Позиция);
		Печенька.Атрибуты.Добавить(Атрибут);
		фрезультат.Добавить(Печенька);
	ИначеЕсли СобиратьЗначениеАтрибута Тогда
		ЗаписатьИмяПеченьки = (КоличествоЗапятых <> Неопределено И ПрочитаноЗапятых >= КоличествоЗапятых);
		
		Если ЗаписатьИмяПеченьки Тогда
			ЗначениеАтрибута.Удалить(ЗначениеАтрибута.ВГраница());
		Иначе
			ЗначениеАтрибута.Добавить(Сред(НормализованноеОписаниеПеченья, Позиция, ПозицияТокена.Позиция - Позиция));
		КонецЕсли;
		
		Атрибут.Значение = СтрСоединить(ЗначениеАтрибута);
		Печенька.Атрибуты.Добавить(Атрибут);
		фрезультат.Добавить(Печенька);
		
		Если ЗаписатьИмяПеченьки Тогда
			Печенька = Новый Структура("Имя, Значение, Атрибуты", "", "", Новый Массив); 
		КонецЕсли;
	КонецЕсли;
	
	Если ЗаписатьИмяПеченьки Тогда
		Печенька.Имя = СокрЛП(Сред(ОписаниеПеченья, Позиция, ДлинаОписания - Позиция + 1));
		фрезультат.Добавить(Печенька);
	КонецЕсли;
	
	Возврат фРезультат;
КонецФункции

Функция СвойстваПеченьки(Знач Имя, Знач Значение, Знач Атрибуты)
	фРезультат = Новый Структура("Имя, Значение", Имя, Значение);
	АтрибутКакСвойство = КлиентHTTPПовтИсп.АтрибутыКакСвойства();
	ИмяСрок = КлиентHTTPПовтИсп.СвойствоПеченькаСрок();
	ИмяВремяАктуальности = КлиентHTTPПовтИсп.СвойствоПеченькаВремяАктуальности();
	ИмяАдресРесурса = КлиентHTTPПовтИсп.СвойствоПеченькаАдресРесурса();
	ИмяЗащищенноеСоединение = КлиентHTTPПовтИсп.СвойствоПеченькаЗащищенноеСоединение();
	ТУД = ТекущаяУниверсальнаяДата();
	
	Для Каждого Атрибут Из Атрибуты Цикл
		Ошибка = Ложь;
		
		ИмяСвойства = АтрибутКакСвойство.Получить(Атрибут.Имя);
		Если ИмяСвойства = ИмяСрок Тогда
			Срок = КлиентHTTPСлужебный.ДатаИзHTTP(Атрибут.Значение, Ошибка);
			Если НЕ Ошибка Тогда
				фРезультат.Вставить(ИмяСвойства, Срок);
			КонецЕсли;
		ИначеЕсли ИмяСвойства = ИмяВремяАктуальности Тогда
			Попытка
				ВремяАктуальности = Число(СокрЛП(Атрибут.Значение));
			Исключение
				Ошибка = Истина;
			КонецПопытки;
			
			Если НЕ Ошибка Тогда
				фРезультат.Вставить(ИмяСрок, ТУД + ВремяАктуальности);
			КонецЕсли;
		ИначеЕсли ИмяСвойства = ИмяАдресРесурса Тогда
			Если НЕ ПустаяСтрока(Атрибут.Значение) Тогда
				фРезультат.Вставить(ИмяСвойства, СокрЛП(Атрибут.Значение));
			КонецЕсли;
		ИначеЕсли ИмяСвойства = ИмяЗащищенноеСоединение Тогда
			фРезультат.Вставить(ИмяСвойства);
		Иначе
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый ФиксированнаяСтруктура(фРезультат);
КонецФункции

Функция ПозицииТокеновПеченья(Знач ОписаниеПеченья)
	фРезультат = Новый Массив;
	
	КЧ = Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный);
	
	ОТЧ = Новый ОписаниеТипов("Число", КЧ);
	ОТС = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(20, ДопустимаяДлина.Переменная));
	ОТЧН = Новый ОписаниеТипов("Null, Число", КЧ);
	
	ПозицииТокенов = Новый ТаблицаЗначений;
	ПозицииТокенов.Колонки.Добавить("Позиция",   ОТЧ);
	ПозицииТокенов.Колонки.Добавить("Токен",     ОТС);
	ПозицииТокенов.Колонки.Добавить("ТипТокена", ОТЧ);
	ПозицииТокенов.Колонки.Добавить("Смещение",  ОТЧ);
	ПозицииТокенов.Колонки.Добавить("КоличествоЗапятых", ОТЧН);
	
	ИменаКолонок = Новый Массив;
	Для Каждого Колонка Из ПозицииТокенов.Колонки Цикл
		ИменаКолонок.Добавить(Колонка.Имя);
	КонецЦикла;
	ИменаПолей = СтрСоединить(ИменаКолонок, ",");
	
	ДлинаОписания = СтрДлина(ОписаниеПеченья);
	Поиск = Новый Структура("НачальнаяПозиция, Позиция, Токен, ТипТокена, Смещение, КоличествоЗапятых", 1, 0, "", 0, 0, Неопределено);
	
	Для Каждого Токен Из КлиентHTTPПовтИсп.ТокеныПарсингаПеченья() Цикл
		ДлинаТокена = СтрДлина(Токен.Значение);
		
		Поиск.Токен             = Токен.Значение;
		Поиск.ТипТокена         = Токен.Тип;
		Поиск.НачальнаяПозиция  = 1;
		Поиск.Позиция           = СтрНайти(ОписаниеПеченья, Поиск.Токен, , Поиск.НачальнаяПозиция);
		Поиск.Смещение          = Токен.Смещение;
		Поиск.КоличествоЗапятых = Токен.КоличествоЗапятых;
		
		Пока Поиск.Позиция > 0 Цикл
			ЗаполнитьЗначенияСвойств(ПозицииТокенов.Добавить(), Поиск);
			
			Поиск.НачальнаяПозиция = Поиск.Позиция + ДлинаТокена;
			Если Поиск.НачальнаяПозиция > ДлинаОписания Тогда
				Прервать;
			КонецЕсли;
			
			Поиск.Позиция = СтрНайти(ОписаниеПеченья, Поиск.Токен, , Поиск.НачальнаяПозиция);
		КонецЦикла;
	КонецЦикла;

	ПозицииТокенов.Сортировать("Позиция");
	
	Для Каждого Стр Из ПозицииТокенов Цикл
		ПозицияТокена = Новый Структура(ИменаПолей);
		ЗаполнитьЗначенияСвойств(ПозицияТокена, Стр);
		фРезультат.Добавить(Новый ФиксированнаяСтруктура(ПозицияТокена));
	КонецЦикла;
	
	Возврат Новый ФиксированныйМассив(фРезультат);
КонецФункции

Функция ХешСтрока(Знач Данные, Знач Алгоритм)
	ТипФункции = ТипХешФункции(Алгоритм);
	
	Если ТипЗнч(Данные) = Тип("Строка") Тогда
		Данные = ПолучитьДвоичныеДанныеИзСтроки(Данные, КодировкаТекста.UTF8, Ложь);
	КонецЕсли;
	
	Хеширование = Новый ХешированиеДанных(ТипФункции);
	Хеширование.Добавить(Данные);
	
	Возврат НРег(ПолучитьHexСтрокуИзДвоичныхДанных(Хеширование.ХешСумма));
КонецФункции

Функция ТипХешФункции(Знач Алгоритм)
	фРезультат = ?(
		ЗначениеЗаполнено(Алгоритм),
		КлиентHTTPСерверПовтИсп.ПоддерживаемыеТипыХешФункций().Получить(НРег(Алгоритм)),
		ХешФункция.MD5
	);
	Если фРезультат = Неопределено Тогда
		ВызватьИсключение "Неизвестный тип хеш-функции";
	КонецЕсли;

	Возврат фРезультат;
КонецФункции
