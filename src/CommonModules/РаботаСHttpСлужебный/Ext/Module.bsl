
Функция СтрокаBasicАвторизации(Знач Пользователь, Знач Пароль) Экспорт
	Возврат СтрЗаменить(
		Base64Строка(ПолучитьДвоичныеДанныеИзСтроки(Пользователь + ":" + Пароль)),
		Символы.ВК + Символы.ПС,
		""
	);
КонецФункции

Функция PunycodeЗначение(Знач Строка) Экспорт
	фРезультат = Новый Массив;
	Параметры = РаботаСHttpПовтИсп.ПараметрыPunycode();
	
	// Начальное состояние
	n = 0; delta = 0; h = 0; b = 0; out = 0; bias = 0; j = 0; m = 0; q = 0; k = 0; t = 0; // max_out = 0;
	
	n = Параметры.InitialN;
	//max_out = СтрДлина(Строка);
	bias = Параметры.InitialBias;
	ДлинаСтроки = СтрДлина(Строка);
	
	// Обработка символов ASCII
	Для я = 1 По ДлинаСтроки Цикл
		Если ЭтоСимволASCII(КодСимвола(Строка, я)) Тогда
			фРезультат.Добавить(Сред(Строка, я, 1));
			out = out + 1;
		КонецЕсли;
	КонецЦикла;
	
	h = out;
	b = out;
	
	// h is the number of code points that have been handled, b is the
    // number of basic code points, and out is the number of characters
    // that have been output.
	
	Если b > 0 Тогда
		фРезультат.Добавить(Параметры.Delimiter);
		out = out + 1;
	КонецЕсли;
	
	// Кодирование не ASCII символов
	Пока h < ДлинаСтроки Цикл
		m = Параметры.НаибольшееЧисло;
		Для я = 1 По ДлинаСтроки Цикл
			Код = КодСимвола(Строка, я);
			Если Код >= n И Код < m Тогда
				m = Код;
			КонецЕсли;
		КонецЦикла;
		
		// Increase delta enough to advance the decoder's
        // <n,i> state to <m,0>, but guard against overflow:
		Если m - n > Цел((Параметры.НаибольшееЧисло - delta) / (h + 1)) Тогда
			ВызватьИсключение "Punycode: требуется более широкий числовой диапазон для обработки входящих данных";
		КонецЕсли;
		
		delta = delta + (m - n) * (h + 1);
        n = m;
		
		Для я = 1 По ДлинаСтроки Цикл
			Код = КодСимвола(Строка, я);
			Если Код < n Тогда
				delta = delta + 1;
				Если delta = 0 Тогда
					ВызватьИсключение "Punycode: требуется более широкий числовой диапазон для обработки входящих данных";
				КонецЕсли;
			ИначеЕсли Код = n Тогда
				// Represent delta as a generalized variable-length integer
				
				q = delta;
				k = Параметры.Base;
				
				Пока Истина Цикл
					t = ?(
						k <= bias,
						Параметры.TMin,
						?(k >= bias + Параметры.TMax, Параметры.TMax, k - bias)
					);
					Если q < t Тогда
						Прервать;
					КонецЕсли;
					
					фРезультат.Добавить(
						ВСимволPunycode(
							t + (q - t) % (Параметры.Base - t)
						)
					);
					
					out = out + 1;
					q = Цел((q - t) / (Параметры.Base - t));
					k = k + Параметры.Base;
				КонецЦикла;
				
				фРезультат.Добавить(ВСимволPunycode(q));
				
				out = out + 1;
				bias = Адаптация(delta, h + 1, h = b);
				delta = 0;
				h = h + 1;
			КонецЕсли;
		КонецЦикла;
		
		delta = delta + 1;
		n = n + 1;
	КонецЦикла;
	
	Возврат СтрСоединить(фРезультат);
КонецФункции

Функция РазмерТекстовыхДанных(Знач Текст, Знач Кодировка = Неопределено) Экспорт
	Кодировка = ?(Кодировка = Неопределено, РаботаСHttpПовтИсп.КодировкаПоУмолчанию(), Кодировка);
	
	Поток = Новый ПотокВПамяти;
	Запись = Новый ЗаписьДанных(Поток, Кодировка, , "");
	Запись.ЗаписатьСтроку(Текст);
	ДД = Поток.ЗакрытьИПолучитьДвоичныеДанные();
	
	Возврат ДД.Размер();
КонецФункции

Функция ТипMIMEРасширенияФайла(Знач РасширениеФайла) Экспорт
	Если СтрНачинаетсяС(РасширениеФайла, ".") Тогда
		РасширениеФайла = Прав(РасширениеФайла, СтрДлина(РасширениеФайла) - 1);
	КонецЕсли;
	
	ТипMIME = РаботаСHttpПовтИсп.ТипыMIMEРасширенийФайлов().Получить(НРег(РасширениеФайла));
	
	Возврат ?(ТипMIME = Неопределено, РаботаСHttpПовтИсп.ТипMIMEOctetStream(), ТипMIME);
КонецФункции


#Область ВСПОМОГАТЕЛЬНЫЕ_ПРОЦЕДУРЫ_И_ФУНКЦИИ
Функция ЭтоСимволASCII(Знач КодСимвола)
	Возврат КодСимвола < 128; // 0x80
КонецФункции

Функция ВСимволPunycode(Знач Код)
	//  0..25 map to ASCII a..z
    // 26..35 map to ASCII 0..9
	Возврат Символ(Код + 22 + 75 * (Код < 26));
КонецФункции

Функция Адаптация(Знач Дельта, Знач ПозицияСимвола, Знач ПерваяАдаптация)
	Параметры = РаботаСHttpПовтИсп.ПараметрыPunycode();
	
	Дельта = Цел(?(ПерваяАдаптация, Дельта / Параметры.Damp, Дельта / 2));
	Дельта = Дельта + Цел(Дельта / ПозицияСимвола);
	
	ДелительДельты = Параметры.Base - Параметры.TMin;
	Порог = Цел(ДелительДельты * Параметры.TMax / 2);
	База = 0;
	
	Пока Дельта > Порог Цикл
		Дельта = Цел(Дельта / ДелительДельты);
		База = База + Параметры.Base;
	КонецЦикла;
	
	Возврат База + Цел((ДелительДельты + 1) * Дельта / (Дельта + Параметры.Skew));
КонецФункции
#КонецОбласти
