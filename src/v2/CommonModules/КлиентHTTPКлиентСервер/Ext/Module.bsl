
// SPDX-License-Identifier: Apache-2.0+

#Область ПрограммныйИнтерфейс
// Реализация GET (выбрасывает исключения)
//
// Параметры:
//  ИдентификаторРесурса	 - Строка, Структура - URI сервиса либо объект идентификатора ресурса
//  ПараметрыЗапроса		 - Соответствие		 - коллекция параметров GET-запроса (необязательный)
//  ДополнительныеПараметры	 - Структура		 - конфигурация выполнения POST-запроса (необязательный)
// 
// Возвращаемое значение:
//  Обещание, ФиксированнаяСтруктура - объект ответа:
//  * КодСостояния - Число - код состояния (ответа) HTTP-сервера,
//  * Заголовки - Соответствие - HTTP-заголовки ответа сервера в виде соответствия "Название заголовка" - "Значение",
//  * Тело - ДвоичныеДанные, Строка, Структура, Соответствие, ОбъектXDTO, ЗначениеXDTO, Неопределено - данные тела HTTP-ответа,
//  * ИмяФайлаТела - Строка, Неопределено - имя файла, в который было записано тело ответа
//
Функция Получить(Знач ИдентификаторРесурса, Знач ПараметрыЗапроса = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	Возврат ВыполнитьЗапросHTTP(
		КлиентHTTPПовтИсп.МетодGET(),
		КонфигурацияЗапроса(ИдентификаторРесурса, ПараметрыЗапроса, ДополнительныеПараметры)
	);
КонецФункции

// Реализация HEAD
//
// Параметры:
//  ИдентификаторРесурса	 - Строка, Структура - URI сервиса либо объект идентификатора ресурса
//  ПараметрыЗапроса		 - Соответствие		 - коллекция параметров запроса (необязательный)
//  ДополнительныеПараметры	 - Структура		 - конфигурация выполнения запроса (необязательный)
// 
// Возвращаемое значение:
//  Обещание, ФиксированнаяСтруктура - объект ответа:
//  * КодСостояния - Число - код состояния (ответа) HTTP-сервера,
//  * Заголовки - Соответствие - HTTP-заголовки ответа сервера в виде соответствия "Название заголовка" - "Значение",
//  * Тело - ДвоичныеДанные, Строка, Структура, Соответствие, ОбъектXDTO, ЗначениеXDTO, Неопределено - данные тела HTTP-ответа,
//  * ИмяФайлаТела - Строка, Неопределено - имя файла, в который было записано тело ответа
//
Функция ПолучитьЗаголовки(Знач ИдентификаторРесурса, Знач ПараметрыЗапроса = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	Возврат ВыполнитьЗапросHTTP(
		КлиентHTTPПовтИсп.МетодHEAD(),
		КонфигурацияЗапроса(ИдентификаторРесурса, ПараметрыЗапроса, ДополнительныеПараметры)
	);
КонецФункции

// Реализация POST
//
// Параметры:
//  ИдентификаторРесурса	 - Строка, Структура - URI сервиса либо объект идентификатора ресурса
//  Данные					 - ДвоичныеДанные	 - тело запроса
//  ДополнительныеПараметры	 - Структура		 - конфигурация выполнения запроса (необязательный)
//  ПараметрыЗапроса		 - Соответствие		 - коллекция параметров запроса (необязательный)
// 
// Возвращаемое значение:
//  Обещание, ФиксированнаяСтруктура - объект ответа:
//  * КодСостояния - Число - код состояния (ответа) HTTP-сервера,
//  * Заголовки - Соответствие - HTTP-заголовки ответа сервера в виде соответствия "Название заголовка" - "Значение",
//  * Тело - ДвоичныеДанные, Строка, Структура, Соответствие, ОбъектXDTO, ЗначениеXDTO, Неопределено - данные тела HTTP-ответа,
//  * ИмяФайлаТела - Строка, Неопределено - имя файла, в который было записано тело ответа
//
Функция ОтправитьДвоичныеДанные(Знач ИдентификаторРесурса, Знач Данные, ДополнительныеПараметры = Неопределено, Знач ПараметрыЗапроса = Неопределено) Экспорт
	Конфигурация = КонфигурацияЗапроса(ИдентификаторРесурса, ПараметрыЗапроса, ДополнительныеПараметры);
	
	ДобавитьРазмерДанныхВЗаголовкиЗапроса(Конфигурация.Заголовки, Конфигурация.ДополнительныеПараметры, Данные);
	
	Возврат ВыполнитьЗапросHTTP(КлиентHTTPПовтИсп.МетодPOST(), Конфигурация, Данные);
КонецФункции

// Реализация PUT
//
// Параметры:
//  ИдентификаторРесурса	 - Строка, Структура - URI сервиса либо объект идентификатора ресурса
//  Данные					 - ДвоичныеДанные	 - тело запроса
//  ДополнительныеПараметры	 - Структура		 - конфигурация выполнения запроса (необязательный)
//  ПараметрыЗапроса		 - Соответствие		 - коллекция параметров запроса (необязательный)
// 
// Возвращаемое значение:
//  Обещание, ФиксированнаяСтруктура - объект ответа:
//  * КодСостояния - Число - код состояния (ответа) HTTP-сервера,
//  * Заголовки - Соответствие - HTTP-заголовки ответа сервера в виде соответствия "Название заголовка" - "Значение",
//  * Тело - ДвоичныеДанные, Строка, Структура, Соответствие, ОбъектXDTO, ЗначениеXDTO, Неопределено - данные тела HTTP-ответа,
//  * ИмяФайлаТела - Строка, Неопределено - имя файла, в который было записано тело ответа
//
Функция ЗаписатьДвоичныеДанные(Знач ИдентификаторРесурса, Знач Данные, ДополнительныеПараметры = Неопределено, Знач ПараметрыЗапроса = Неопределено) Экспорт
	Конфигурация = КонфигурацияЗапроса(ИдентификаторРесурса, ПараметрыЗапроса, ДополнительныеПараметры);
	
	ДобавитьРазмерДанныхВЗаголовкиЗапроса(Конфигурация.Заголовки, Конфигурация.ДополнительныеПараметры, Данные);
	
	Возврат ВыполнитьЗапросHTTP(КлиентHTTPПовтИсп.МетодPUT(), Конфигурация, Данные);
КонецФункции

// Реализация PATCH
//
// Параметры:
//  ИдентификаторРесурса	 - Строка, Структура - URI сервиса либо объект идентификатора ресурса
//  Данные					 - ДвоичныеДанные	 - тело запроса
//  ДополнительныеПараметры	 - Структура		 - конфигурация выполнения запроса (необязательный)
//  ПараметрыЗапроса		 - Соответствие		 - коллекция параметров запроса (необязательный)
// 
// Обещание, Возвращаемое значение:
//  ФиксированнаяСтруктура - объект ответа:
//  * КодСостояния - Число - код состояния (ответа) HTTP-сервера,
//  * Заголовки - Соответствие - HTTP-заголовки ответа сервера в виде соответствия "Название заголовка" - "Значение",
//  * Тело - ДвоичныеДанные, Строка, Структура, Соответствие, ОбъектXDTO, ЗначениеXDTO, Неопределено - данные тела HTTP-ответа,
//  * ИмяФайлаТела - Строка, Неопределено - имя файла, в который было записано тело ответа
//
Функция ИзменитьДвоичныеДанные(Знач ИдентификаторРесурса, Знач Данные, ДополнительныеПараметры = Неопределено, Знач ПараметрыЗапроса = Неопределено) Экспорт
	Конфигурация = КонфигурацияЗапроса(ИдентификаторРесурса, ПараметрыЗапроса, ДополнительныеПараметры);
	
	ДобавитьРазмерДанныхВЗаголовкиЗапроса(Конфигурация.Заголовки, Конфигурация.ДополнительныеПараметры, Данные);
	
	Возврат ВыполнитьЗапросHTTP(КлиентHTTPПовтИсп.МетодPATCH(), Конфигурация, Данные);
КонецФункции

// Реализация DELETE
//
// Параметры:
//  ИдентификаторРесурса	 - Строка, Структура - URI сервиса либо объект идентификатора ресурса
//  Данные					 - Строка			 - тело запроса (необязательный)
//  ДополнительныеПараметры	 - Структура		 - конфигурация выполнения запроса (необязательный)
//  ПараметрыЗапроса		 - Соответствие		 - коллекция параметров запроса (необязательный)
// 
// Возвращаемое значение:
//  Обещание, ФиксированнаяСтруктура - объект ответа:
//  * КодСостояния - Число - код состояния (ответа) HTTP-сервера,
//  * Заголовки - Соответствие - HTTP-заголовки ответа сервера в виде соответствия "Название заголовка" - "Значение",
//  * Тело - ДвоичныеДанные, Строка, Структура, Соответствие, ОбъектXDTO, ЗначениеXDTO, Неопределено - данные тела HTTP-ответа,
//  * ИмяФайлаТела - Строка, Неопределено - имя файла, в который было записано тело ответа
//
Функция Удалить(Знач ИдентификаторРесурса, Знач Данные = "", ДополнительныеПараметры = Неопределено, Знач ПараметрыЗапроса = Неопределено) Экспорт
	Конфигурация = КонфигурацияЗапроса(ИдентификаторРесурса, ПараметрыЗапроса, ДополнительныеПараметры);
	
	Если НЕ ПустаяСтрока(Данные) Тогда
		ДобавитьКодировкуВЗаголовкиЗапроса(Конфигурация.Заголовки, Конфигурация.ДополнительныеПараметры);
		ДобавитьРазмерДанныхВЗаголовкиЗапроса(Конфигурация.Заголовки, Конфигурация.ДополнительныеПараметры, Данные);
	КонецЕсли;
	
	Возврат ВыполнитьЗапросHTTP(КлиентHTTPПовтИсп.МетодDELETE(), Конфигурация, ПолучитьДвоичныеДанныеИзСтроки(Данные, КодировкаИзДопПараметров(Конфигурация.ДополнительныеПараметры)));
КонецФункции

#Область ДЕКОРАТОРЫ
// Реализация POST
//
// Параметры:
//  ИдентификаторРесурса	 - Строка, Структура - URI сервиса либо объект идентификатора ресурса
//  Данные					 - Строка			 - тело запроса
//  ДополнительныеПараметры	 - Структура		 - конфигурация выполнения запроса (необязательный)
//  ПараметрыЗапроса		 - Соответствие		 - коллекция параметров запроса (необязательный)
// 
// Возвращаемое значение:
//  Обещание, ФиксированнаяСтруктура - объект ответа:
//  * КодСостояния - Число - код состояния (ответа) HTTP-сервера,
//  * Заголовки - Соответствие - HTTP-заголовки ответа сервера в виде соответствия "Название заголовка" - "Значение",
//  * Тело - ДвоичныеДанные, Строка, Структура, Соответствие, ОбъектXDTO, ЗначениеXDTO, Неопределено - данные тела HTTP-ответа,
//  * ИмяФайлаТела - Строка, Неопределено - имя файла, в который было записано тело ответа
//
Функция ОтправитьТекст(Знач ИдентификаторРесурса, Знач Данные, ДополнительныеПараметры = Неопределено, Знач ПараметрыЗапроса = Неопределено) Экспорт
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = НовыеДополнительныеПараметры();
	КонецЕсли;
	
	Если НЕ ДополнительныеПараметры.Свойство("ТипMIME") Тогда
		УстановитьТипMIME(ДополнительныеПараметры, КлиентHTTPПовтИсп.ТипMIMEText());
	КонецЕсли;
	Если НЕ ДополнительныеПараметры.Свойство("Кодировка") Тогда
		УстановитьКодировку(ДополнительныеПараметры, КлиентHTTPПовтИсп.КодировкаПоУмолчанию());
	КонецЕсли;
	
	Возврат ОтправитьДвоичныеДанные(
		ИдентификаторРесурса,
		ПолучитьДвоичныеДанныеИзСтроки(Данные, ДополнительныеПараметры.Кодировка),
		ДополнительныеПараметры,
		ПараметрыЗапроса
	);
КонецФункции

// Реализация POST. При отсутствии файла генерируется исключение
//
// Параметры:
//  ИдентификаторРесурса	 - Строка, Структура - URI сервиса либо объект идентификатора ресурса
//  Данные					 - Файл				 - тело запроса
//  ДополнительныеПараметры	 - Структура		 - конфигурация выполнения запроса (необязательный)
//  ПараметрыЗапроса		 - Соответствие		 - коллекция параметров запроса (необязательный)
// 
// Обещание, Возвращаемое значение:
//  ФиксированнаяСтруктура - объект ответа:
//  * КодСостояния - Число - код состояния (ответа) HTTP-сервера,
//  * Заголовки - Соответствие - HTTP-заголовки ответа сервера в виде соответствия "Название заголовка" - "Значение",
//  * Тело - ДвоичныеДанные, Строка, Структура, Соответствие, ОбъектXDTO, ЗначениеXDTO, Неопределено - данные тела HTTP-ответа,
//  * ИмяФайлаТела - Строка, Неопределено - имя файла, в который было записано тело ответа
//
Функция ОтправитьФайл(Знач ИдентификаторРесурса, Знач Данные, ДополнительныеПараметры = Неопределено, Знач ПараметрыЗапроса = Неопределено) Экспорт
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = НовыеДополнительныеПараметры();
	КонецЕсли;
	
	Если НЕ ДополнительныеПараметры.Свойство("ТипMIME") Тогда
		УстановитьТипMIME(ДополнительныеПараметры, КлиентHTTPСлужебный.ТипMIMEРасширенияФайла(Данные.Расширение));
	КонецЕсли;
	
	Возврат ОтправитьДвоичныеДанные(
		ИдентификаторРесурса,
		Новый ДвоичныеДанные(Данные.ПолноеИмя),
		ДополнительныеПараметры,
		ПараметрыЗапроса
	);
КонецФункции

// Реализация POST типа application/x-www-form-urlencoded
//
// Параметры:
//  ИдентификаторРесурса	 - Строка, Структура - URI сервиса либо объект идентификатора ресурса
//  Данные					 - Массив			 - поля HTML-формы. Элементы - Структура с ключами:
//  * Ключ - Строка - имя поля
//  * Значение - Строка - значение поля
//  ДополнительныеПараметры	 - Структура		 - конфигурация выполнения запроса (необязательный)
//  ПараметрыЗапроса		 - Соответствие		 - коллекция параметров запроса (необязательный)
// 
// Возвращаемое значение:
//  Обещание, ФиксированнаяСтруктура - объект ответа:
//  * КодСостояния - Число - код состояния (ответа) HTTP-сервера,
//  * Заголовки - Соответствие - HTTP-заголовки ответа сервера в виде соответствия "Название заголовка" - "Значение",
//  * Тело - ДвоичныеДанные, Строка, Структура, Соответствие, ОбъектXDTO, ЗначениеXDTO, Неопределено - данные тела HTTP-ответа,
//  * ИмяФайлаТела - Строка, Неопределено - имя файла, в который было записано тело ответа
//
Функция ОтправитьДанныеHTMLФормы(Знач ИдентификаторРесурса, Знач Данные, ДополнительныеПараметры = Неопределено, Знач ПараметрыЗапроса = Неопределено) Экспорт
#Если Клиент Тогда
	Возврат КлиентHTTPКлиент.ОтправитьДанныеHTMLФормы(ИдентификаторРесурса, Данные, ДополнительныеПараметры, ПараметрыЗапроса);
#Иначе
	Возврат КлиентHTTP.ОтправитьДанныеHTMLФормы(ИдентификаторРесурса, Данные, ДополнительныеПараметры, ПараметрыЗапроса);
#КонецЕсли
КонецФункции

// Реализация POST типа multipart/form-data. При отсутствии файла генерируется исключение
//
// Параметры:
//  ИдентификаторРесурса	 - Строка, Структура - URI сервиса либо объект идентификатора ресурса
//  Данные					 - Массив			 - тело запроса. Элементы - Структура с ключами:
//  * Ключ - Строка - имя поля
//  * Значение - Строка, Файл - значение поля
//  * ТипMIME - Строка - тип значения поля (необязательный)
//  * Файл - Структура (необязательный), ключи:
//    ** Имя		 - Строка - имя файла (необязательный),
//    ** ТипMIME	 - Строка - MIME-тип содержимого файла (необязательный),
//    ** Кодировка	 - Строка - кодировка файла (необязательный)
//  ДополнительныеПараметры	 - Структура    - конфигурация выполнения запроса (необязательный)
//  ПараметрыЗапроса		 - Соответствие - коллекция параметров запроса (необязательный)
// 
// Возвращаемое значение:
//  Обещание, ФиксированнаяСтруктура - объект ответа:
//  * КодСостояния - Число - код состояния (ответа) HTTP-сервера,
//  * Заголовки - Соответствие - HTTP-заголовки ответа сервера в виде соответствия "Название заголовка" - "Значение",
//  * Тело - ДвоичныеДанные, Строка, Структура, Соответствие, ОбъектXDTO, ЗначениеXDTO, Неопределено - данные тела HTTP-ответа,
//  * ИмяФайлаТела - Строка, Неопределено - имя файла, в который было записано тело ответа
//
Функция ОтправитьДанныеФормы(Знач ИдентификаторРесурса, Знач Данные, ДополнительныеПараметры = Неопределено, Знач ПараметрыЗапроса = Неопределено) Экспорт
#Если Клиент Тогда
	Возврат КлиентHTTPКлиент.ОтправитьДанныеФормы(ИдентификаторРесурса, Данные, ДополнительныеПараметры, ПараметрыЗапроса);
#Иначе
	Возврат КлиентHTTP.ОтправитьДанныеФормы(ИдентификаторРесурса, Данные, ДополнительныеПараметры, ПараметрыЗапроса);
#КонецЕсли
КонецФункции

// Реализация PUT
//
// Параметры:
//  ИдентификаторРесурса	 - Строка, Структура - URI сервиса либо объект идентификатора ресурса
//  Данные					 - Строка			 - тело запроса
//  ДополнительныеПараметры	 - Структура		 - конфигурация выполнения запроса (необязательный)
//  ПараметрыЗапроса		 - Соответствие		 - коллекция параметров запроса (необязательный)
// 
// Возвращаемое значение:
//  Обещание, ФиксированнаяСтруктура - объект ответа:
//  * КодСостояния - Число - код состояния (ответа) HTTP-сервера,
//  * Заголовки - Соответствие - HTTP-заголовки ответа сервера в виде соответствия "Название заголовка" - "Значение",
//  * Тело - ДвоичныеДанные, Строка, Структура, Соответствие, ОбъектXDTO, ЗначениеXDTO, Неопределено - данные тела HTTP-ответа,
//  * ИмяФайлаТела - Строка, Неопределено - имя файла, в который было записано тело ответа
//
Функция ЗаписатьТекст(Знач ИдентификаторРесурса, Знач Данные, ДополнительныеПараметры = Неопределено, Знач ПараметрыЗапроса = Неопределено) Экспорт
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = НовыеДополнительныеПараметры();
	КонецЕсли;
	
	Если НЕ ДополнительныеПараметры.Свойство("ТипMIME") Тогда
		УстановитьТипMIME(ДополнительныеПараметры, КлиентHTTPПовтИсп.ТипMIMEText());
	КонецЕсли;
	Если НЕ ДополнительныеПараметры.Свойство("Кодировка") Тогда
		УстановитьКодировку(ДополнительныеПараметры, КлиентHTTPПовтИсп.КодировкаПоУмолчанию());
	КонецЕсли;
	
	Возврат ЗаписатьДвоичныеДанные(
		ИдентификаторРесурса,
		ПолучитьДвоичныеДанныеИзСтроки(Данные, ДополнительныеПараметры.Кодировка),
		ДополнительныеПараметры,
		ПараметрыЗапроса
	);
КонецФункции

// Реализация PUT. При отсутствии файла генерируется исключение
//
// Параметры:
//  ИдентификаторРесурса	 - Строка, Структура - URI сервиса либо объект идентификатора ресурса
//  Данные					 - Файл				 - тело запроса
//  ДополнительныеПараметры	 - Структура		 - конфигурация выполнения запроса (необязательный)
//  ПараметрыЗапроса		 - Соответствие		 - коллекция параметров запроса (необязательный)
// 
// Возвращаемое значение:
//  Обещание, ФиксированнаяСтруктура - объект ответа:
//  * КодСостояния - Число - код состояния (ответа) HTTP-сервера,
//  * Заголовки - Соответствие - HTTP-заголовки ответа сервера в виде соответствия "Название заголовка" - "Значение",
//  * Тело - ДвоичныеДанные, Строка, Структура, Соответствие, ОбъектXDTO, ЗначениеXDTO, Неопределено - данные тела HTTP-ответа,
//  * ИмяФайлаТела - Строка, Неопределено - имя файла, в который было записано тело ответа
//
Функция ЗаписатьФайл(Знач ИдентификаторРесурса, Знач Данные, ДополнительныеПараметры = Неопределено, Знач ПараметрыЗапроса = Неопределено) Экспорт
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = НовыеДополнительныеПараметры();
	КонецЕсли;
	
	Если НЕ ДополнительныеПараметры.Свойство("ТипMIME") Тогда
		УстановитьТипMIME(ДополнительныеПараметры, КлиентHTTPСлужебный.ТипMIMEРасширенияФайла(Данные.Расширение));
	КонецЕсли;
	
	Возврат ЗаписатьДвоичныеДанные(
		ИдентификаторРесурса,
		Новый ДвоичныеДанные(Данные.ПолноеИмя),
		ДополнительныеПараметры,
		ПараметрыЗапроса
	);
КонецФункции

// Реализация PATCH
//
// Параметры:
//  ИдентификаторРесурса	 - Строка, Структура - URI сервиса либо объект идентификатора ресурса
//  Данные					 - Строка			 - тело запроса
//  ДополнительныеПараметры	 - Структура		 - конфигурация выполнения запроса (необязательный)
//  ПараметрыЗапроса		 - Соответствие		 - коллекция параметров запроса (необязательный)
// 
// Возвращаемое значение:
//  Обещание, ФиксированнаяСтруктура - объект ответа:
//  * КодСостояния - Число - код состояния (ответа) HTTP-сервера,
//  * Заголовки - Соответствие - HTTP-заголовки ответа сервера в виде соответствия "Название заголовка" - "Значение",
//  * Тело - ДвоичныеДанные, Строка, Структура, Соответствие, ОбъектXDTO, ЗначениеXDTO, Неопределено - данные тела HTTP-ответа,
//  * ИмяФайлаТела - Строка, Неопределено - имя файла, в который было записано тело ответа
//
Функция ИзменитьТекст(Знач ИдентификаторРесурса, Знач Данные, ДополнительныеПараметры = Неопределено, Знач ПараметрыЗапроса = Неопределено) Экспорт
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = НовыеДополнительныеПараметры();
	КонецЕсли;
	
	Если НЕ ДополнительныеПараметры.Свойство("ТипMIME") Тогда
		УстановитьТипMIME(ДополнительныеПараметры, КлиентHTTPПовтИсп.ТипMIMEText());
	КонецЕсли;
	Если НЕ ДополнительныеПараметры.Свойство("Кодировка") Тогда
		УстановитьКодировку(ДополнительныеПараметры, КлиентHTTPПовтИсп.КодировкаПоУмолчанию());
	КонецЕсли;
	
	Возврат ИзменитьДвоичныеДанные(
		ИдентификаторРесурса,
		ПолучитьДвоичныеДанныеИзСтроки(Данные, ДополнительныеПараметры.Кодировка),
		ДополнительныеПараметры,
		ПараметрыЗапроса
	);
КонецФункции

// Реализация PATCH. При отсутствии файла генерируется исключение
//
// Параметры:
//  ИдентификаторРесурса	 - Строка, Структура - URI сервиса либо объект идентификатора ресурса
//  Данные					 - Файл				 - тело запроса
//  ДополнительныеПараметры	 - Структура		 - конфигурация выполнения запроса (необязательный)
//  ПараметрыЗапроса		 - Соответствие		 - коллекция параметров запроса (необязательный)
// 
// Возвращаемое значение:
//  Обещание, ФиксированнаяСтруктура - объект ответа:
//  * КодСостояния - Число - код состояния (ответа) HTTP-сервера,
//  * Заголовки - Соответствие - HTTP-заголовки ответа сервера в виде соответствия "Название заголовка" - "Значение",
//  * Тело - ДвоичныеДанные, Строка, Структура, Соответствие, ОбъектXDTO, ЗначениеXDTO, Неопределено - данные тела HTTP-ответа,
//  * ИмяФайлаТела - Строка, Неопределено - имя файла, в который было записано тело ответа
//
Функция ИзменитьФайл(Знач ИдентификаторРесурса, Знач Данные, ДополнительныеПараметры = Неопределено, Знач ПараметрыЗапроса = Неопределено) Экспорт
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = НовыеДополнительныеПараметры();
	КонецЕсли;
	
	Если НЕ ДополнительныеПараметры.Свойство("ТипMIME") Тогда
		УстановитьТипMIME(ДополнительныеПараметры, КлиентHTTPСлужебный.ТипMIMEРасширенияФайла(Данные.Расширение));
	КонецЕсли;
	
	Возврат ИзменитьДвоичныеДанные(
		ИдентификаторРесурса,
		Новый ДвоичныеДанные(Данные.ПолноеИмя),
		ДополнительныеПараметры,
		ПараметрыЗапроса
	);
КонецФункции
#КонецОбласти

#Область ИНИЦИАЛИЗАТОРЫ
// Возвращает новую пустую коллекцию параметров HTTP-запроса
// 
// Возвращаемое значение:
//  Соответствие - пустая коллекция параметров HTTP-запроса
//
Функция НовыеПараметрыЗапроса() Экспорт
	Возврат Новый Соответствие;
КонецФункции

// Возвращает новую пустую конфигурацию выполнения HTTP-запроса
// 
// Возвращаемое значение:
//  Структура - пустая коллекция дополнительных параметров выполнения HTTP-запроса
//
Функция НовыеДополнительныеПараметры() Экспорт
	Возврат Новый Структура;
КонецФункции

// Возвращает копию конфигурации выполнения HTTP-запроса
//
// Параметры:
//  ДополнительныеПараметры	 - Структура - коллекция параметров выполнения запроса
// 
// Возвращаемое значение:
//  Структура - копия коллекции параметров выполнения HTTP-запроса
//
Функция КопияДополнительныхПараметров(Знач ДополнительныеПараметры) Экспорт
	фРезультат = НовыеДополнительныеПараметры();
	
	Для Каждого КЗ Из ДополнительныеПараметры Цикл
		фРезультат.Вставить(КЗ.Ключ, КЗ.Значение);
	КонецЦикла;
	
	Возврат фРезультат;
КонецФункции

// Возвращает новую пустую коллекцию полей формы тела HTTP-запроса
// 
// Возвращаемое значение:
//  Массив - пустая коллекция полей формы тела HTTP-запроса
//
Функция НовыеПоляФормы() Экспорт
	Возврат Новый Массив;
КонецФункции

// Возвращает объект идентификатора ресурса
//
// Параметры:
//  Сервер				 - Строка	 - хост сервера, с которым осуществляется соединение
//  Порт				 - Число	 - порт сервера, с которым осуществляется соединение
//  АдресРесурса		 - Строка	 - адрес ресурса, к которому будет происходить HTTP-запрос
//  ЗащищенноеСоединение - Булево	 - опция осуществления HTTPS соединения
//  Пользователь		 - Строка	 - пользователь, от имени которого установлено соединение
//  Пароль				 - Строка	 - пароль пользователя, от имени которого установлено соединение
// 
// Возвращаемое значение:
//  Структура - объект идентификатора ресурса
//
Функция ОбъектИдентификатораРесурса(Знач Сервер, Знач Порт = Неопределено, Знач АдресРесурса = "", Знач ЗащищенноеСоединение = Истина, Знач Пользователь = "", Знач Пароль = "") Экспорт
	Если Порт = Неопределено Тогда
		Порт = ?(ЗащищенноеСоединение, 443, 80);
	КонецЕсли;
	
	Если НЕ СтрНачинаетсяС(АдресРесурса, "/") Тогда
		АдресРесурса = "/" + АдресРесурса;
	КонецЕсли;
	
	Возврат Новый Структура("Сервер, Порт, АдресРесурса, ЗащищенноеСоединение, Пользователь, Пароль", Сервер, Порт, АдресРесурса, ЗащищенноеСоединение, Пользователь, Пароль);
КонецФункции
#КонецОбласти

#Область ТЕКУЧИЙ_ИНТЕРФЕЙС
// Установка значения параметра HTTP-запроса
//
// Параметры:
//  ПараметрыЗапроса - Соответствие	 - коллекция параметров запроса
//  Ключ			 - Строка		 - имя параметра
//  Значение		 - Строка		 - значение параметра
// 
// Возвращаемое значение:
//  ОбщийМодуль.КлиентHTTPКлиентСервер - модуль вызова функции
//
Функция УстановитьПараметр(ПараметрыЗапроса, Знач Ключ, Знач Значение) Экспорт
	Значения = Новый Массив;
	Значения.Добавить(Значение);
	
	ПараметрыЗапроса.Вставить(Ключ, Значения);
	
	Возврат КлиентHTTPКлиентСервер;
КонецФункции

// Добавление очередного значения параметра HTTP-запроса к уже имеющимся
//
// Параметры:
//  ПараметрыЗапроса - Соответствие	 - коллекция параметров запроса
//  Ключ			 - Строка		 - имя параметра
//  Значение		 - Строка		 - значение параметра
// 
// Возвращаемое значение:
//  ОбщийМодуль.КлиентHTTPКлиентСервер - модуль вызова функции
//
Функция ДобавитьПараметр(ПараметрыЗапроса, Знач Ключ, Знач Значение) Экспорт
	Значения = ПараметрыЗапроса.Получить(Ключ);
	Если Значения = Неопределено Тогда
		УстановитьПараметр(ПараметрыЗапроса, Ключ, Значение);
	Иначе
		Значения.Добавить(Значение);
	КонецЕсли;
	
	Возврат КлиентHTTPКлиентСервер;
КонецФункции

// Установка заголовка HTTP-запроса
//
// Параметры:
//  ДополнительныеПараметры	 - Структура - конфигурация выполнения запроса
//  Ключ					 - Строка	 - имя заголовка
//  Значение				 - Строка	 - значение заголовка
// 
// Возвращаемое значение:
//  ОбщийМодуль.КлиентHTTPКлиентСервер - модуль вызова функции
//
Функция УстановитьЗаголовок(ДополнительныеПараметры, Знач Ключ, Знач Значение) Экспорт
	Перем Заголовки;
	
	Если НЕ ДополнительныеПараметры.Свойство("Заголовки", Заголовки) Тогда
		Заголовки = Новый Соответствие;
		ДополнительныеПараметры.Вставить("Заголовки", Заголовки);
	КонецЕсли;
	
	Заголовки.Вставить(Ключ, Значение);
	
	Возврат КлиентHTTPКлиентСервер;
КонецФункции

// Установка произвольного дополнительного параметра выполнения HTTP-запроса
//
// Параметры:
//  ДополнительныеПараметры	 - Структура - конфигурация выполнения запроса
//  Ключ					 - Строка	 - имя дополнительного параметра
//  Значение				 - Строка	 - значение дополнительного параметра
// 
// Возвращаемое значение:
//  ОбщийМодуль.КлиентHTTPКлиентСервер - модуль вызова функции
//
Функция УстановитьДополнительныйПараметр(ДополнительныеПараметры, Знач Ключ, Знач Значение) Экспорт
	ДополнительныеПараметры.Вставить(Ключ, Значение);
	
	Возврат КлиентHTTPКлиентСервер;
КонецФункции

// Отмена требования попытки преобразования тела полученного ответа
//
// Параметры:
//  ДополнительныеПараметры	 - Структура - конфигурация выполнения запроса
// 
// Возвращаемое значение:
//  ОбщийМодуль.КлиентHTTPКлиентСервер - модуль вызова функции
//
Функция ТелоОтветаКакДвоичныеДанные(ДополнительныеПараметры) Экспорт
	ДополнительныеПараметры.Удалить("ПрочитатьТелоОтветаКак");
	
	Возврат КлиентHTTPКлиентСервер;
КонецФункции

// Требование попытки преобразования тела полученного ответа в текст
//
// Параметры:
//  ДополнительныеПараметры	 - Структура - конфигурация выполнения запроса
// 
// Возвращаемое значение:
//  ОбщийМодуль.КлиентHTTPКлиентСервер - модуль вызова функции
//
Функция ТелоОтветаКакТекст(ДополнительныеПараметры) Экспорт
	УстановитьДополнительныйПараметр(
		ДополнительныеПараметры,
		"ПрочитатьТелоОтветаКак",
		СпособЧтенияТелаОтвета(ФорматТелаОтветаТекст())
	);
	
	Возврат КлиентHTTPКлиентСервер;
КонецФункции

// Требование попытки десериализации тела полученного ответа в универсальную коллекцию из JSON
//
// Параметры:
//  ДополнительныеПараметры						 - Структура			 - конфигурация выполнения запроса
//  ПрочитатьВСоответствие						 - Булево				 - если установлено Истина, чтение объекта JSON будет выполнено в Соответствие (иначе в Структура)
//  ИменаСвойствСоЗначениямиДата				 - Массив, Строка, ФиксированныйМассив	 - имена свойств JSON, для которых нужно вызывать восстановление даты из строки
//  ОжидаемыйФорматДаты							 - ФорматДатыJSON						 - ожидаемый формат даты при десериализации объекта в формате JSON
//  ИмяФункцииВосстановления					 - Строка								 - данная функция вызывается при чтении каждого свойства (спецификацию параметров см. в описании функции ПрочитатьJSON)
//  МодульФункцииВосстановления					 - Произвольный							 - модуль, процедура которого будет использована для восстановления значения
//  ДополнительныеПараметрыФункцииВосстановления - Произвольный							 - дополнительные параметры, которые будут переданы в функцию восстановления значений
//  ИменаСвойствДляВосстановления				 - Массив								 - имена свойств JSON, для которых будет вызвана функция восстановления
//  МаксимальнаяВложенность						 - Число								 - максимальный уровень вложенности объекта JSON
// 
// Возвращаемое значение:
//  ОбщийМодуль.КлиентHTTPКлиентСервер - модуль вызова функции
//
Функция ТелоОтветаКакJSON(
	ДополнительныеПараметры,
	Знач ПрочитатьВСоответствие = Ложь,
	Знач ИменаСвойствСоЗначениямиДата = Неопределено,
	Знач ОжидаемыйФорматДаты = Неопределено,
	Знач ИмяФункцииВосстановления = Неопределено,
	Знач МодульФункцииВосстановления = Неопределено,
	Знач ДополнительныеПараметрыФункцииВосстановления = Неопределено,
	Знач ИменаСвойствДляВосстановления = Неопределено,
	Знач МаксимальнаяВложенность = 500
) Экспорт
	УстановитьДополнительныйПараметр(
		ДополнительныеПараметры,
		"ПрочитатьТелоОтветаКак",
		СпособЧтенияТелаОтвета(
			ФорматТелаОтветаJSON(),
			ПараметрыЧтенияJSON(
				ПрочитатьВСоответствие,
				ИменаСвойствСоЗначениямиДата,
				ОжидаемыйФорматДаты,
				ИмяФункцииВосстановления,
				МодульФункцииВосстановления,
				ДополнительныеПараметрыФункцииВосстановления,
				ИменаСвойствДляВосстановления,
				МаксимальнаяВложенность
			)
		)
	);
	
	Возврат КлиентHTTPКлиентСервер;
КонецФункции

// Требование попытки десериализации тела полученного ответа из XML в поддерживающий сериализацию в XDTO тип
//
// Параметры:
//  ДополнительныеПараметры				 - Структура		 - конфигурация выполнения запроса
//  ПутиКФайламСхемXSD					 - Массив, Неопределено	 - коллекция путей к файлам схем XML
//  СхемыXSDТекстом						 - Массив, Неопределено	 - коллекция текстовых определений схем XML
//  Пакеты								 - Массив, КоллекцияПакетовXDTO, Неопределено	 - коллекция пакетов XDTO, которые необходимо добавить в создаваемую фабрику типов XDTO
//  ИспользоватьПакетТекущейКонфигурации - Булево										 - флаг автоматического добавления пакета текущей конфигурации в пакеты создаваемой фабрики типов XDTO (параметр "Пакеты" должен быть типа Массив или Неопределено)
//  ПараметрыЧтенияXML					 - ПараметрыЧтенияXML, Неопределено				 - параметры чтения, которые будут использованы при чтении данных XML
// 
// Возвращаемое значение:
//  ОбщийМодуль.КлиентHTTPКлиентСервер - модуль вызова функции
//
Функция ТелоОтветаКакXML(
	ДополнительныеПараметры,
	Знач ПутиКФайламСхемXSD = Неопределено,
	Знач СхемыXSDТекстом = Неопределено,
	Знач Пакеты = Неопределено,
	Знач ИспользоватьПакетТекущейКонфигурации = Ложь,
	Знач ПараметрыЧтенияXML = Неопределено
) Экспорт
	УстановитьДополнительныйПараметр(
		ДополнительныеПараметры,
		"ПрочитатьТелоОтветаКак",
		СпособЧтенияТелаОтвета(
			ФорматТелаОтветаXML(),
			ПараметрыПреобразованияXDTO(ПутиКФайламСхемXSD, СхемыXSDТекстом, Пакеты, ИспользоватьПакетТекущейКонфигурации, ПараметрыЧтенияXML)
		)
	);
	
	Возврат КлиентHTTPКлиентСервер;
КонецФункции

// Установка режима переиспользования HTTP-соединения при последующих запросах.
// При включённом режиме переиспользования HTTP-соединения
// передача конфигурации выполнения запроса (дополнительные параметры) между клиентом и сервером
// становится недоступной.
// Сохранённое HTTP-соединение удаляется при вызове функции.
//
// Параметры:
//  ДополнительныеПараметры	 - Структура - конфигурация выполнения запроса
//  Переиспользовать		 - Булево	 - флаг переиспользования HTTP-соединеиня при последующих запросах
// 
// Возвращаемое значение:
//  ОбщийМодуль.КлиентHTTPКлиентСервер - модуль вызова функции
//
Функция ПереиспользоватьСоединение(ДополнительныеПараметры, Знач Переиспользовать = Истина) Экспорт
	ДополнительныеПараметры.Удалить("HTTPСоединение");
	ДополнительныеПараметры.Вставить("ПереиспользоватьСоединение", Переиспользовать);
	
	Возврат КлиентHTTPКлиентСервер;
КонецФункции

// Инициализация сессии
//
// Параметры:
//  ДополнительныеПараметры	 - Структура - конфигурация выполнения запроса
// 
// Возвращаемое значение:
//  ОбщийМодуль.КлиентHTTPКлиентСервер - модуль вызова функции
//
Функция ИспользоватьСессию(ДополнительныеПараметры) Экспорт
	Если НЕ ДополнительныеПараметры.Свойство("Сессия") Тогда
		ДополнительныеПараметры.Вставить("Сессия", Новый Структура);
		
		УстановитьПорогПеренаправлений(ДополнительныеПараметры, 10);
	КонецЕсли;
	
	Возврат КлиентHTTPКлиентСервер;
КонецФункции

// Установка максимального количества перенаправлений
//
// Параметры:
//  ДополнительныеПараметры	 - Структура - конфигурация выполнения запроса
//  ПорогПеренаправлений	 - Число	 - максимальное количество перенаправлений
// 
// Возвращаемое значение:
//  ОбщийМодуль.КлиентHTTPКлиентСервер - модуль вызова функции
//
Функция УстановитьПорогПеренаправлений(ДополнительныеПараметры, Знач ПорогПеренаправлений) Экспорт
	Если НЕ ДополнительныеПараметры.Свойство("Сессия") Тогда
		ИспользоватьСессию(ДополнительныеПараметры);
	КонецЕсли;
	
	ДополнительныеПараметры.Сессия.Вставить("ПорогПеренаправлений", ПорогПеренаправлений);
	
	Возврат КлиентHTTPКлиентСервер;
КонецФункции

// Требование принудительно переключаться на метод GET для кодов перенаправления 301 и 302
//
// Параметры:
//  ДополнительныеПараметры	 - Структура - конфигурация выполнения запроса
//  КакGET					 - Булево	 - установить переключение на GET (необязательный)
// 
// Возвращаемое значение:
//  ОбщийМодуль.КлиентHTTPКлиентСервер - модуль вызова функции
//
Функция ПеренаправленияКакGET(ДополнительныеПараметры, Знач КакGET = Истина) Экспорт
	СессияАктивирована = ДополнительныеПараметры.Свойство("Сессия");
	Если КакGET Тогда
		Если НЕ СессияАктивирована Тогда
			ИспользоватьСессию(ДополнительныеПараметры);
		КонецЕсли;
		
		ДополнительныеПараметры.Сессия.Вставить("ПеренаправлениеКакGET");
	ИначеЕсли СессияАктивирована Тогда
		ДополнительныеПараметры.Сессия.Удалить("ПеренаправлениеКакGET");
	КонецЕсли;
	
	Возврат КлиентHTTPКлиентСервер;
КонецФункции

// Установка Basic-авторизации
//
// Параметры:
//  ДополнительныеПараметры	 - Структура - конфигурация выполнения запроса
//  Пользователь			 - Строка	 - пользователь авторизации
//  Пароль					 - Строка	 - пароль авторизации
// 
// Возвращаемое значение:
//  ОбщийМодуль.КлиентHTTPКлиентСервер - модуль вызова функции
//
Функция УстановитьBasicАвторизацию(ДополнительныеПараметры, Знач Пользователь, Знач Пароль) Экспорт
	ДополнительныеПараметры.Вставить("Аутентификация", ОбъектАутентификации("Basic", Пользователь, Пароль));
	
	Возврат КлиентHTTPКлиентСервер;
КонецФункции

// Установка NTLM-авторизации
//
// Параметры:
//  ДополнительныеПараметры	 - Структура - конфигурация выполнения запроса
//  Пользователь			 - Строка	 - пользователь авторизации
//  Пароль					 - Строка	 - пароль авторизации
// 
// Возвращаемое значение:
//  ОбщийМодуль.КлиентHTTPКлиентСервер - модуль вызова функции
//
Функция УстановитьNTLMАвторизацию(ДополнительныеПараметры, Знач Пользователь, Знач Пароль) Экспорт
	ДополнительныеПараметры.Вставить("Аутентификация", ОбъектАутентификации("NTLM", Пользователь, Пароль));
	
	Возврат КлиентHTTPКлиентСервер;
КонецФункции

// Установка Digest-авторизации
//
// Параметры:
//  ДополнительныеПараметры	 - Структура - конфигурация выполнения запроса
//  Пользователь			 - Строка	 - пользователь авторизации
//  Пароль					 - Строка	 - пароль авторизации
// 
// Возвращаемое значение:
//  ОбщийМодуль.КлиентHTTPКлиентСервер - модуль вызова функции
//
Функция УстановитьDigestАвторизацию(ДополнительныеПараметры, Знач Пользователь, Знач Пароль) Экспорт
	ИспользоватьСессию(ДополнительныеПараметры)
		.УстановитьПорогПеренаправлений(ДополнительныеПараметры, 1);
	
	ДополнительныеПараметры.Вставить("Аутентификация", ОбъектАутентификации("Digest", Пользователь, Пароль));
	
	Возврат КлиентHTTPКлиентСервер;
КонецФункции

// Установка Bearer-авторизации
//
// Параметры:
//  ДополнительныеПараметры	 - Структура - конфигурация выполнения запроса
//  Токен					 - Строка	 - токен авторизации
// 
// Возвращаемое значение:
//  ОбщийМодуль.КлиентHTTPКлиентСервер - модуль вызова функции
//
Функция УстановитьBearerАвторизацию(ДополнительныеПараметры, Знач Токен) Экспорт
	ДополнительныеПараметры.Вставить("Аутентификация", ОбъектАутентификацииBearer(Токен));
	
	Возврат КлиентHTTPКлиентСервер;
КонецФункции

// Установка AWS4-авторизации
//
// Параметры:
//  ДополнительныеПараметры	 - Структура - конфигурация выполнения запроса
//  КлючДоступа				 - Строка	 - AWS ключ доступа
//  СекретныйКлюч			 - Строка	 - AWS секретный ключ
//  Регион					 - Строка	 - AWS регион получателя запроса (необязательный)
//  Сервис					 - Строка	 - AWS сервис получателя запроса (необязательный)
// 
// Возвращаемое значение:
//  ОбщийМодуль.КлиентHTTPКлиентСервер - модуль вызова функции
//
Функция УстановитьAWS4Авторизацию(ДополнительныеПараметры, Знач КлючДоступа, Знач СекретныйКлюч, Знач Регион = "", Знач Сервис = "") Экспорт
	ДополнительныеПараметры.Вставить("Аутентификация", ОбъектАутентификацииAWS4(КлючДоступа, СекретныйКлюч, Регион, Сервис));
	
	Возврат КлиентHTTPКлиентСервер;
КонецФункции

// Установка Hawk-авторизации
//
// Параметры:
//  ДополнительныеПараметры	 - Структура - конфигурация выполнения запроса
//  Идентификатор			 - Строка	 - ID аутентификации
//  Ключ					 - Строка	 - секретный ключ
//  Дополнение				 - Строка	 - (ext) специфические данные клиента (необязательный)
//  ИдентификаторПриложения	 - Строка	 - (app) идентификатор приложения (необязательный)
//  Делегирование			 - Строка	 - (dlg) выданный идентификатор приложения (необязательный)
// 
// Возвращаемое значение:
//  ОбщийМодуль.КлиентHTTPКлиентСервер - модуль вызова функции
//
Функция УстановитьHawkАвторизацию(ДополнительныеПараметры, Знач Идентификатор, Знач Ключ, Знач Дополнение = "", Знач ИдентификаторПриложения = "", Знач Делегирование = "") Экспорт
	ДополнительныеПараметры.Вставить(
		"Аутентификация",
		ОбъектАутентификацииHawk(Идентификатор, Ключ, СокрЛП(Дополнение), СокрЛП(ИдентификаторПриложения), СокрЛП(Делегирование))
	);
	
	Возврат КлиентHTTPКлиентСервер;
КонецФункции

// Установка пользовательского значения заголовка "User-Agent"
//
// Параметры:
//  ДополнительныеПараметры	 - Структура - конфигурация выполнения запроса
//  АгентПользователя		 - Строка	 - значение для заголовка User-Agent
// 
// Возвращаемое значение:
//  ОбщийМодуль.КлиентHTTPКлиентСервер - модуль вызова функции
//
Функция УстановитьАгентаПользователя(ДополнительныеПараметры, Знач АгентПользователя) Экспорт
	ДополнительныеПараметры.Вставить("АгентПользователя", СокрЛП(АгентПользователя));
	
	Возврат КлиентHTTPКлиентСервер;
КонецФункции

// Установка MIME-типа содержимого тела HTTP-запроса
//
// Параметры:
//  ДополнительныеПараметры	 - Структура - конфигурация выполнения запроса
//  ТипMIME					 - Строка	 - MIME-тип
// 
// Возвращаемое значение:
//  ОбщийМодуль.КлиентHTTPКлиентСервер - модуль вызова функции
//
Функция УстановитьТипMIME(ДополнительныеПараметры, Знач ТипMIME) Экспорт
	ДополнительныеПараметры.Вставить("ТипMIME", ТипMIME);
	
	Возврат КлиентHTTPКлиентСервер;
КонецФункции

// Установка кодировки текстового содержимого тела запроса
//
// Параметры:
//  ДополнительныеПараметры	 - Структура				 - конфигурация выполнения запроса
//  Кодировка				 - КодировкаТекста, Строка, Неопределено - кодировка (необязательный)				 - 			 -
// 
// Возвращаемое значение:
//  ОбщийМодуль.КлиентHTTPКлиентСервер - модуль вызова функции
//
Функция УстановитьКодировку(ДополнительныеПараметры, Знач Кодировка = Неопределено) Экспорт
	ДополнительныеПараметры.Вставить("Кодировка", ?(Кодировка = Неопределено, КлиентHTTPПовтИсп.КодировкаПоУмолчанию(), Кодировка));
	
	Возврат КлиентHTTPКлиентСервер;
КонецФункции

// Установка приемлемого сжатия ответа GZIP (не работает для мобильного приложения)
//
// Параметры:
//  ДополнительныеПараметры	 - Структура - конфигурация выполнения запроса
// 
// Возвращаемое значение:
//  ОбщийМодуль.КлиентHTTPКлиентСервер - модуль вызова функции
//
Функция УстановитьСжатиеОтветаGZIP(ДополнительныеПараметры) Экспорт
#Если НЕ (МобильноеПриложениеСервер ИЛИ МобильноеПриложениеКлиент ИЛИ МобильныйКлиент ИЛИ МобильныйАвтономныйСервер) Тогда
	ДополнительныеПараметры.Вставить("СжатиеОтвета", "gzip");
#КонецЕсли
	
	Возврат КлиентHTTPКлиентСервер;
КонецФункции

// Установка порта соединения
//
// Параметры:
//  ДополнительныеПараметры	 - Структура - конфигурация выполнения запроса
//  Порт					 - Число	 - порт соединения
// 
// Возвращаемое значение:
//  ОбщийМодуль.КлиентHTTPКлиентСервер - модуль вызова функции
//
Функция УстановитьПорт(ДополнительныеПараметры, Знач Порт) Экспорт
	ДополнительныеПараметры.Вставить("Порт", Порт);
	
	Возврат КлиентHTTPКлиентСервер;
КонецФункции

// Установка пользователя соединения
//
// Параметры:
//  ДополнительныеПараметры	 - Структура - конфигурация выполнения запроса
//  Пользователь			 - Строка	 - пользователь соединения
// 
// Возвращаемое значение:
//  ОбщийМодуль.КлиентHTTPКлиентСервер - модуль вызова функции
//
Функция УстановитьПользователяСоединения(ДополнительныеПараметры, Знач Пользователь) Экспорт
	ДополнительныеПараметры.Вставить("Пользователь", Пользователь);
	
	Возврат КлиентHTTPКлиентСервер;
КонецФункции

// Установка пароля соединения
//
// Параметры:
//  ДополнительныеПараметры	 - Структура - конфигурация выполнения запроса
//  Пароль					 - Строка	 - пароль соединения
// 
// Возвращаемое значение:
//  ОбщийМодуль.КлиентHTTPКлиентСервер - модуль вызова функции
//
Функция УстановитьПарольСоединения(ДополнительныеПараметры, Знач Пароль) Экспорт
	ДополнительныеПараметры.Вставить("Пароль", Пароль);
	
	Возврат КлиентHTTPКлиентСервер;
КонецФункции

// Установка прокси соединения
//
// Параметры:
//  ДополнительныеПараметры	 - Структура - конфигурация выполнения запроса
//  Прокси					 - ИнтернетПрокси	 - прокси, через который будет установлено соединение
// 
// Возвращаемое значение:
//  ОбщийМодуль.КлиентHTTPКлиентСервер - модуль вызова функции
//
Функция УстановитьПрокси(ДополнительныеПараметры, Знач Прокси) Экспорт
	ДополнительныеПараметры.Вставить("Прокси", Прокси);
	
	Возврат КлиентHTTPКлиентСервер;
КонецФункции

// Установка прокси соединения по умолчанию
//
// Параметры:
//  ДополнительныеПараметры	 - Структура - конфигурация выполнения запроса
// 
// Возвращаемое значение:
//  ОбщийМодуль.КлиентHTTPКлиентСервер - модуль вызова функции
//
Функция УстановитьПроксиПоУмолчанию(ДополнительныеПараметры) Экспорт
	ДополнительныеПараметры.Вставить("Прокси", Новый ИнтернетПрокси(Истина));
	
	Возврат КлиентHTTPКлиентСервер;
КонецФункции

// Использовать прокси-сервер
//
// Параметры:
//  ДополнительныеПараметры					 - Структура	 - конфигурация выполнения запроса
//  Сервер									 - Строка		 - имя сервера
//  Порт									 - Число, Неопределено	 - порт прокси-сервера
//  Пользователь							 - Строка				 - имя пользователя для аутентификации на прокси-сервере
//  Пароль									 - Строка				 - пароль для аутентификации на прокси-сервере
//  ИспользоватьАутентификациюОС			 - Булево				 - включает использование NTLM-аутентификации на прокси
//  НеИспользоватьПроксиДляАдресов			 - Массив, Неопределено	 - список адресов, соединение с которыми осуществляется без использования прокси
//  НеИспользоватьПроксиДляЛокальныхАдресов	 - Булево				 - опция использования прокси при запросе ресурсов с локальных адресов
//  Протокол								 - Строка, Неопределено	 - протокол, для которого устанавливаются параметры прокси-сервера. По умолчанию установка для http и https
// 
// Возвращаемое значение:
//  ОбщийМодуль.КлиентHTTPКлиентСервер - модуль вызова функции
//
Функция ИспользоватьПрокси(
	ДополнительныеПараметры,
	Знач Сервер,
	Знач Порт = Неопределено,
	Знач Пользователь = "",
	Знач Пароль = "",
	Знач ИспользоватьАутентификациюОС = Истина,
	Знач НеИспользоватьПроксиДляАдресов = Неопределено,
	Знач НеИспользоватьПроксиДляЛокальныхАдресов = Истина,
	Знач Протокол = Неопределено
) Экспорт
	Протоколы = Новый Массив;
	Если Протокол = Неопределено Тогда
		Протоколы.Добавить("http");
		Протоколы.Добавить("https");
	Иначе
		Протоколы.Добавить(НРег(СокрЛП(Протокол)));
	КонецЕсли;
	
	Прокси = Новый ИнтернетПрокси(Ложь);
	
	Для Каждого П Из Протоколы Цикл
		Прокси.Установить(П, СокрЛП(Сервер), Порт, Пользователь, Пароль, ИспользоватьАутентификациюОС);
	КонецЦикла;
	
	Если НеИспользоватьПроксиДляАдресов <> Неопределено Тогда
		Для Каждого Адрес Из НеИспользоватьПроксиДляАдресов Цикл
			Прокси.НеИспользоватьПроксиДляАдресов.Добавить(Адрес);
		КонецЦикла;
	КонецЕсли;
	
	Прокси.НеИспользоватьПроксиДляЛокальныхАдресов = НеИспользоватьПроксиДляЛокальныхАдресов;
	
	ДополнительныеПараметры.Вставить("Прокси", Прокси);
	
	Возврат КлиентHTTPКлиентСервер;
КонецФункции

// Установка таймаута соединения
//
// Параметры:
//  ДополнительныеПараметры	 - Структура - конфигурация выполнения запроса
//  Таймаут					 - Число	 - таймаут соединения
// 
// Возвращаемое значение:
//  ОбщийМодуль.КлиентHTTPКлиентСервер - модуль вызова функции
//
Функция УстановитьТаймаут(ДополнительныеПараметры, Знач Таймаут) Экспорт
	ДополнительныеПараметры.Вставить("Таймаут", Таймаут);
	
	Возврат КлиентHTTPКлиентСервер;
КонецФункции

// Установка защищенного соединения
//
// Параметры:
//  ДополнительныеПараметры	 - Структура				 - конфигурация выполнения запроса
//  ЗащищенноеСоединение	 - ЗащищенноеСоединениеOpenSSL	 - объект защищенного соединения OpenSSL
// 
// Возвращаемое значение:
//  ОбщийМодуль.КлиентHTTPКлиентСервер - модуль вызова функции
//
Функция УстановитьЗащищенноеСоединение(ДополнительныеПараметры, Знач ЗащищенноеСоединение) Экспорт
	ДополнительныеПараметры.Вставить("ЗащищенноеСоединение", ЗащищенноеСоединение);
	
	Возврат КлиентHTTPКлиентСервер;
КонецФункции

// Установка режима использования аутентификации NTLM или Negotiate
//
// Параметры:
//  ДополнительныеПараметры	 - Структура - конфигурация выполнения запроса
//  Использовать			 - Булево	 - значение использования аутентификации NTLM или Negotiate на сервере
// 
// Возвращаемое значение:
//  ОбщийМодуль.КлиентHTTPКлиентСервер - модуль вызова функции
//
Функция УстановитьИспользованиеАутентификацииОС(ДополнительныеПараметры, Знач Использовать) Экспорт
	ДополнительныеПараметры.Вставить("ИспользоватьАутентификациюОС", Использовать);
	
	Возврат КлиентHTTPКлиентСервер;
КонецФункции

// Установка имени выходного файла для хранения данных ответа сервера
//
// Параметры:
//  ДополнительныеПараметры	 - Структура - конфигурация выполнения запроса
//  ИмяВыходногоФайла		 - Строка	 - имя выходного файла, в который записываются полученные с сервера данные
// 
// Возвращаемое значение:
//  ОбщийМодуль.КлиентHTTPКлиентСервер - модуль вызова функции
//
Функция УстановитьИмяВыходногоФайла(ДополнительныеПараметры, Знач ИмяВыходногоФайла) Экспорт
	ДополнительныеПараметры.Вставить("ИмяВыходногоФайла", ИмяВыходногоФайла);
	
	Возврат КлиентHTTPКлиентСервер;
КонецФункции

// Добавление очередного поля HTML-формы тела HTTP-запроса
//
// Параметры:
//  ПоляФормы	 - Массив	 - коллекция полей формы
//  Ключ		 - Строка	 - наименование поля
//  Значение	 - Строка	 - значение поля
// 
// Возвращаемое значение:
//  ОбщийМодуль.КлиентHTTPКлиентСервер - модуль вызова функции
//
Функция ДобавитьПолеHTMLФормы(ПоляФормы, Знач Ключ, Знач Значение) Экспорт
	ПоляФормы.Добавить(Новый Структура("Ключ, Значение", Ключ, Значение));
	
	Возврат КлиентHTTPКлиентСервер;
КонецФункции

// Добавление очередного текстового поля формы тела HTTP-запроса
//
// Параметры:
//  ПоляФормы	 - Массив								 - коллекция полей формы
//  Ключ		 - Строка								 - наименование поля
//  Значение	 - Строка								 - значение текстового поля
//  ТипMIME		 - Строка, Неопределено					 - MIME-тип (необязательный)
//  Кодировка	 - КодировкаТекста, Строка, Неопределено - кодировка текста поля формы (необязательный)
// 
// Возвращаемое значение:
//  ОбщийМодуль.КлиентHTTPКлиентСервер - модуль вызова функции
//
Функция ДобавитьПолеФормыТекст(ПоляФормы, Знач Ключ, Знач Значение, Знач ТипMIME = Неопределено, Знач Кодировка = Неопределено) Экспорт
	Поле = Новый Структура("Ключ, Значение", Ключ, Значение);
	
	Если ТипMIME <> Неопределено Тогда
		Поле.Вставить("ТипMIME", ТипMIME);
	КонецЕсли;
	Если Кодировка <> Неопределено Тогда
		Поле.Вставить("Кодировка", Кодировка);
	КонецЕсли;
	
	ПоляФормы.Добавить(Поле);
	
	Возврат КлиентHTTPКлиентСервер;
КонецФункции

// Добавление очередного поля с файлом в форме тела HTTP-запроса
//
// Параметры:
//  ПоляФормы	 - Массив								 - коллекция полей формы
//  Ключ		 - Строка								 - наименование поля
//  Значение	 - Файл									 - объект доступа к файлу
//  ИмяФайла	 - Строка, Неопределено					 - имя файла в поле формы (необязательный)
//  ТипMIME		 - Строка, Неопределено					 - MIME-тип содержимого файла (необязательный)
//  Кодировка	 - КодировкаТекста, Строка, Неопределено - кодировка содержимого файла (необязательный)
// 
// Возвращаемое значение:
//  ОбщийМодуль.КлиентHTTPКлиентСервер - модуль вызова функции
//
Функция ДобавитьПолеФормыФайл(ПоляФормы, Знач Ключ, Знач Значение, ИмяФайла = Неопределено, Знач ТипMIME = Неопределено, Знач Кодировка = Неопределено) Экспорт
	Поле = Новый Структура("Ключ, Значение, Файл", Ключ, Значение, Новый Структура);
	
	Если ИмяФайла <> Неопределено Тогда
		Поле.Файл.Вставить("ИмяФайла", ИмяФайла);
	КонецЕсли;
	Если ТипMIME <> Неопределено Тогда
		Поле.Файл.Вставить("ТипMIME", ТипMIME);
	КонецЕсли;
	Если Кодировка <> Неопределено Тогда
		Поле.Файл.Вставить("Кодировка", Кодировка);
	КонецЕсли;
	
	ПоляФормы.Добавить(Поле);
	
	Возврат КлиентHTTPКлиентСервер;
КонецФункции

// Установка разделителя полей формы в теле HTTP-запроса
//
// Параметры:
//  ДополнительныеПараметры	 - Структура - конфигурация выполнения запроса
//  Разделитель				 - Строка	 - разделитель полей
// 
// Возвращаемое значение:
//  ОбщийМодуль.КлиентHTTPКлиентСервер - модуль вызова функции
//
Функция УстановитьРазделительПолейФормы(ДополнительныеПараметры, Знач Разделитель) Экспорт
	ДополнительныеПараметры.Вставить("Разделитель", Разделитель);
	
	Возврат КлиентHTTPКлиентСервер;
КонецФункции
#КонецОбласти

// Возвращает строку параметров URL из коллекции
//
// Параметры:
//  Параметры	 - Соответствие	 - коллекция пар имя/значение параметров HTTP-запроса
// 
// Возвращаемое значение:
//  Строка - параметры идентификатора ресурса
//
Функция ПараметрыЗапросаСтрокой(Знач Параметры) Экспорт
	фРезультат = Новый Массив;
	
	ПараметрыИдентификатора = Новый Массив;
	МножествоСтрок = Новый Соответствие;
	Для Каждого КЗ Из Параметры Цикл
		Параметр = Новый Структура("Ключ, Значение", КлиентHTTPСлужебный.ФорматированноеИмяПараметраЗапроса(КЗ.Ключ), "");
		Если ПустаяСтрока(Параметр.Ключ) Тогда
			Продолжить;
		КонецЕсли;
		МножествоСтрок.Вставить(Параметр.Ключ);
		Если КЗ.Значение.Количество() = 0 Тогда
			ПараметрыИдентификатора.Добавить(Параметр);
			Продолжить;
		КонецЕсли;
		
		Для Каждого ЗначениеПараметра Из КЗ.Значение Цикл
			Параметр.Значение = КлиентHTTPСлужебный.ФорматированноеЗначениеПараметраЗапроса(ЗначениеПараметра);
			Если Параметр.Значение <> "" Тогда
				МножествоСтрок.Вставить(Параметр.Значение);
			КонецЕсли;
			
			ПараметрыИдентификатора.Добавить(Параметр);
		КонецЦикла;
	КонецЦикла;
	
	МножествоСтрок = КлиентHTTPВызовСервера.КодированныеСтрокиURLвURL(МножествоСтрок);
	
	Для Каждого Параметр Из ПараметрыИдентификатора Цикл
		ИмяПараметра = МножествоСтрок.Получить(Параметр.Ключ);
		ЗначениеПараметра = МножествоСтрок.Получить(Параметр.Значение);
		
		фРезультат.Добавить(ИмяПараметра + ?(ЗначениеПараметра = "", "", "=") + ЗначениеПараметра);
	КонецЦикла;
	
	Возврат ?(фРезультат.Количество() = 0, "", "?" + СтрСоединить(фРезультат, "&"));
КонецФункции

// Копирует cookies конфигурации-источника в конфигурацию-приёмник
//
// Параметры:
//  КонфигурацияПриемник - Структура - конфигурация выполнения запроса
//  КонфигурацияИсточник - Структура - конфигурация выполнения запроса
//  Заменять			 - Булево	 - заменять Cookie при совпадении имени
//
Процедура СкопироватьПеченье(КонфигурацияПриемник, Знач КонфигурацияИсточник, Знач Заменять = Истина) Экспорт
	Если НЕ КонфигурацияИсточник.Свойство("Сессия") Тогда
		Возврат;
	КонецЕсли;
	Если НЕ КонфигурацияИсточник.Сессия.Свойство("Печенье") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ КонфигурацияПриемник.Свойство("Сессия") Тогда
		КонфигурацияПриемник.Вставить("Сессия", Новый Структура);
	КонецЕсли;
	Если НЕ КонфигурацияПриемник.Сессия.Свойство("Печенье") Тогда
		КонфигурацияПриемник.Сессия.Вставить("Печенье", Новый Соответствие);
	КонецЕсли;
	
	ОбъединитьПеченье(КонфигурацияПриемник.Сессия.Печенье, КонфигурацияИсточник.Сессия.Печенье, Заменять);
КонецПроцедуры

// Возвращает значение заголовка по имени
//
// Параметры:
//  ИмяЗаголовка - Строка	 - имя заголовка
//  Заголовки	 - Соответствие	 - коллекция заголовков
// 
// Возвращаемое значение:
//  Строка, Неопределено - значение заголовка
//
Функция ЗначениеЗаголовка(Знач ИмяЗаголовка, Знач Заголовки) Экспорт
	фРезультат = Неопределено;
	ИмяЗаголовка = НРег(ИмяЗаголовка);
	
	Для Каждого КЗ Из Заголовки Цикл
		Если НРег(КЗ.Ключ) = ИмяЗаголовка Тогда
			фРезультат = КЗ.Значение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат фРезультат;
КонецФункции

// Возвращает значение заголовка Cookie для идентификатора ресурса
//
// Параметры:
//  ИдентификаторРесурса	 - Строка, Структура - URI сервиса либо объект идентификатора ресурса
//  ДополнительныеПараметры	 - Структура		 - конфигурация выполнения запроса
// 
// Возвращаемое значение:
//  Строка, Неопределено - значение заголовка Cookie
//
Функция ЗначениеЗаголовкаCookieРесурса(Знач ИдентификаторРесурса, Знач ДополнительныеПараметры) Экспорт
	Если НЕ ДополнительныеПараметры.Свойство("Сессия") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеURI = СтруктураИдентификатораРесурса(ИдентификаторРесурса);
	
	Возврат ЗначениеЗаголовкаCookie(ДанныеURI, ДополнительныеПараметры.Сессия);
КонецФункции

// Возвращает MIME-тип из заголовков
//
// Параметры:
//  Заголовки	 - Соответствие	 - коллекция заголовков
// 
// Возвращаемое значение:
//  Строка, Неопределено - значение заголовка Content-Type
//
Функция ТипMIMEИзЗаголовков(Знач Заголовки) Экспорт
	ТипКонтента = ЗначениеЗаголовка(КлиентHTTPПовтИсп.ЗаголовокТипКонтента(), Заголовки);
	Если ТипКонтента = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПозицияОкончанияТипаMIME = СтрНайти(ТипКонтента, ";");
	
	Возврат ?(ПозицияОкончанияТипаMIME = 0, ТипКонтента, Лев(ТипКонтента, ПозицияОкончанияТипаMIME - 1));
КонецФункции

// Возвращает кодировку из заголовков
//
// Параметры:
//  Заголовки	 - Соответствие	 - коллекция заголовков
// 
// Возвращаемое значение:
//  Строка, Неопределено - значение charset заголовка Content-Type
//
Функция КодировкаИзЗаголовков(Знач Заголовки) Экспорт
	ТипКонтента = ЗначениеЗаголовка(КлиентHTTPПовтИсп.ЗаголовокТипКонтента(), Заголовки);
	Если ТипКонтента = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПозицияКодировки = СтрНайти(НРег(ТипКонтента), "charset=");
	
	Возврат ?(ПозицияКодировки = 0, Неопределено, Сред(ТипКонтента, ПозицияКодировки + 8));
КонецФункции

// Возвращает результат валидации ответа сервера по указанному заголовку (Hawk аутентификация)
//
// Параметры:
//  Ответ			 - Структура - объект ответа сервера
//  ИмяЗаголовка	 - Строка	 - имя заголовка ответа сервера с данными Hawk аутентификации
//  ОписаниеОшибки	 - Строка	 - описание ошибки валидации ответа
// 
// Возвращаемое значение:
//  Строка, Неопределено - значение charset заголовка Content-Type
//
Функция ОтветСЗаголовкомHawkКорректен(Знач Ответ, Знач ИмяЗаголовка, ОписаниеОшибки) Экспорт
	Если НЕ Ответ.КонтекстВыполнения.Свойство("АутентификацияHawk") Тогда
		ОписаниеОшибки = "Отсутствует контекст Hawk аутентификации";
		Возврат Ложь;
	КонецЕсли;
	Если Ответ.КодСостояния < 200 ИЛИ Ответ.КодСостояния > 299 Тогда
		Возврат Истина;
	КонецЕсли;
	Если ТипЗнч(Ответ.Тело) <> Тип("ДвоичныеДанные") Тогда
		ОписаниеОшибки = "Валидация доступна только для ответа с телом типа ДвоичныеДанные";
		Возврат Ложь;
	КонецЕсли;
	
	ЗначениеЗаголовкаHawk = ЗначениеЗаголовка(ИмяЗаголовка, Ответ.Заголовки);
	Если ЗначениеЗаголовкаHawk = Неопределено Тогда
		ОписаниеОшибки = "В ответе отсутствует заголовок Hawk аутентификации";
		Возврат Ложь;
	КонецЕсли;
	
	Данные = Новый Структура(
		"Тело, ТипMIME",
		Ответ.Тело,
		ЗначениеЗаголовка(КлиентHTTPПовтИсп.ЗаголовокТипКонтента(), Ответ.Заголовки)
	);
	
	Возврат КлиентHTTPВызовСервера.ОтветСЗаголовкомHawkКорректен(
		ЗначениеЗаголовкаHawk,
		Ответ.КонтекстВыполнения.АутентификацияHawk,
		ПоместитьВоВременноеХранилище(Данные, Новый УникальныйИдентификатор),
		ОписаниеОшибки
	);
КонецФункции
#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс
// (СЛУЖЕБНЫЙ) Возвращает новый пустой объект обработанного ответа
// 
// Возвращаемое значение:
//  Структура - пустой объект обработанного ответа
//
Функция НовыйОбъектОбработанногоОтвета() Экспорт
	Возврат Новый Структура("КодСостояния, Заголовки, Тело, ИмяФайлаТела, КонтекстВыполнения");
КонецФункции

// (СЛУЖЕБНЫЙ) Возвращает перобразованное тело HTTP-ответа
//
// Параметры:
//  Ответ			 - Структура, HTTPОтвет	 - объект HTTP-ответа
//  ДанныеТелаОтвета - ДвоичныеДанные		 - данные тела HTTP-ответа
//  СпособЧтения	 - Структура			 - настройки преобразования тела HTTP-ответа
// 
// Возвращаемое значение:
//  Строка, Структура, Соответствие, ОбъектXDTO, ЗначениеXDTO, ДвоичныеДанные, Неопределено - данные преобразованного тела HTTP-ответа
//
Функция ПреобразованноеТелоОтвета(Знач Ответ, Знач ДанныеТелаОтвета, Знач СпособЧтения) Экспорт
	Перем фРезультат;
	
	Кодировка = КлиентHTTPПовтИсп.КодировкаПоУмолчанию();
	
	ТипСодержимого = КлиентHTTPКлиентСервер.ЗначениеЗаголовка(КлиентHTTPПовтИсп.ЗаголовокТипКонтента(), Ответ.Заголовки);
	Если ТипСодержимого <> Неопределено Тогда
		ПозицияРазделителя = СтрНайти(ТипСодержимого, ";");
		Если ПозицияРазделителя > 0 Тогда
			Кодировка = СтрЗаменить(СтрЗаменить(НРег(СокрЛП(Сред(ТипСодержимого, ПозицияРазделителя + 1))), " ", ""), "charset=", "");
		КонецЕсли;
	КонецЕсли;
	
	Если СпособЧтения.Формат = ФорматТелаОтветаТекст() Тогда
		фРезультат = ПолучитьСтрокуИзДвоичныхДанных(ДанныеТелаОтвета, Кодировка);
	ИначеЕсли СпособЧтения.Формат = ФорматТелаОтветаJSON() Тогда
		фРезультат = ОбъектТелаОтветаИзJSON(ДанныеТелаОтвета, Кодировка, СпособЧтения);
	ИначеЕсли СпособЧтения.Формат = ФорматТелаОтветаXML() Тогда
		фРезультат = ОбъектТелаОтветаИзXML(ДанныеТелаОтвета, Кодировка, СпособЧтения);
	Иначе
		фРезультат = ДанныеТелаОтвета;
	КонецЕсли;
	
	Возврат фРезультат;
КонецФункции

// (СЛУЖЕБНЫЙ) Возвращает кодировку из конфигурации выполнения запроса или кодировку по умолчанию
//
// Параметры:
//  ДополнительныеПараметры	 - Структура - конфигурация выполнения запроса
// 
// Возвращаемое значение:
//  Строка - значение кодировки
//
Функция КодировкаИзДопПараметров(Знач ДополнительныеПараметры) Экспорт
	// Потенциально опасный возврат значения по умолчанию
	Возврат ?(ДополнительныеПараметры.Свойство("Кодировка"), ДополнительныеПараметры.Кодировка, КлиентHTTPПовтИсп.КодировкаПоУмолчанию());
КонецФункции
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
Функция ВыполнитьЗапросHTTP(Знач Метод, Знач Конфигурация, Знач Данные = Неопределено, Знач НомерПеренаправления = 0)
	Контекст = КонтекстВыполнения(Метод, НомерПеренаправления, Данные);
	
	ПрименитьAWS4Аутентификацию(Метод, Данные, Конфигурация);
	ПрименитьHawkАутентификацию(Метод, Данные, Конфигурация, Контекст);
	
	Соединение = НовоеHTTPСоединениеСПереиспользованием(Конфигурация);
	Запрос = Новый HTTPЗапрос(АдресРесурсаЗапроса(Конфигурация), Конфигурация.Заголовки);
	
	Если МетодПодразумеваетТелоЗапроса(Метод) Тогда
		Запрос.УстановитьТелоИзДвоичныхДанных(Данные);
	КонецЕсли;
	
	Возврат ОбработанныйОтвет(
		Соединение.ВызватьHTTPМетод(Метод, Запрос, ИмяВыходногоФайлаИзДопПараметров(Конфигурация.ДополнительныеПараметры)),
		Конфигурация,
		Контекст
	);
КонецФункции

Функция КонтекстВыполнения(Знач Метод, Знач НомерПеренаправления, Знач Данные)
	Возврат Новый ФиксированнаяСтруктура("Метод, НомерПеренаправления, Данные, Значения", Метод, НомерПеренаправления, Данные, Новый Структура);
КонецФункции

Функция КонфигурацияЗапроса(Знач ИдентификаторРесурса, Знач ПараметрыЗапроса = Неопределено, ДополнительныеПараметры = Неопределено)
	Если ПараметрыЗапроса = Неопределено Тогда
		ПараметрыЗапроса = НовыеПараметрыЗапроса();
	КонецЕсли;
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = НовыеДополнительныеПараметры();
	КонецЕсли;
	
	ДанныеURI = СтруктураИдентификатораРесурса(ИдентификаторРесурса);
	Параметры = ОбъединениеПараметровЗапроса(ДанныеURI.Параметры, ПараметрыЗапроса);
	ПараметрыСтрокой = ПараметрыЗапросаСтрокой(Параметры);
	Заголовки = ЗаголовкиЗапроса(ДанныеURI, ДополнительныеПараметры);
	
	Возврат Новый Структура("ДанныеURI, Параметры, ПараметрыСтрокой, Заголовки, ДополнительныеПараметры", ДанныеURI, Параметры, ПараметрыСтрокой, Заголовки, ДополнительныеПараметры);
КонецФункции

Функция МетодПодразумеваетТелоЗапроса(Знач Метод)
	Возврат Метод = КлиентHTTPПовтИсп.МетодPOST()
		ИЛИ Метод = КлиентHTTPПовтИсп.МетодPUT()
		ИЛИ Метод = КлиентHTTPПовтИсп.МетодDELETE()
		ИЛИ Метод = КлиентHTTPПовтИсп.МетодPATCH();
КонецФункции

Функция СоставляющиеАдресаРесурса(Знач АдресРесурса)
	фРезультат = Новый Структура("Путь, Параметры, Фрагмент", "/", НовыеПараметрыЗапроса(), "");
	
	АдресРесурса = СокрЛП(АдресРесурса);
	Если АдресРесурса = "" ИЛИ АдресРесурса = "/" Тогда
		Возврат фРезультат;
	КонецЕсли;
	Если НЕ СтрНачинаетсяС(АдресРесурса, "/") Тогда
		АдресРесурса = "/" + АдресРесурса;
	КонецЕсли;
	
	ДлинаАдресаРесурса = СтрДлина(АдресРесурса);
	ПозицияОкончанияПути = ДлинаАдресаРесурса;
	ПозицияСимволаПараметров = СтрНайти(АдресРесурса, "?");
	ПозицияСимволаФрагмента = СтрНайти(АдресРесурса, "#", , ?(ПозицияСимволаПараметров = 0, 1, ПозицияСимволаПараметров));
	ПозицияОкончанияПути = ?(ПозицияСимволаПараметров = 0, ПозицияСимволаФрагмента, ПозицияСимволаПараметров);
	
	фРезультат.Путь = Лев(
		АдресРесурса,
		?(
			ПозицияОкончанияПути = 0,
			ДлинаАдресаРесурса,
			ПозицияОкончанияПути - 1
		)
	);
	фРезультат.Параметры = ПараметрыИдентификатора(АдресРесурса, ПозицияСимволаПараметров, ПозицияСимволаФрагмента);
	фРезультат.Фрагмент = ?(ПозицияСимволаФрагмента = 0, "", Сред(АдресРесурса, ПозицияСимволаФрагмента + 1));
	
	Возврат фРезультат;
КонецФункции

Функция ДлинаСхемыИдентификатораРесурса(ДанныеURI, Знач ИдентификаторРесурса)
	Если СтрНачинаетсяС(ИдентификаторРесурса, "https://") Тогда
		фРезультат = 9;
		
		ДанныеURI.ЗащищенноеСоединение = Истина;
		ДанныеURI.Порт = 443;
	ИначеЕсли СтрНачинаетсяС(ИдентификаторРесурса, "http://") Тогда
		фРезультат = 8;
	Иначе
		ОписаниеОшибки = "Не удалось разобрать URI";
		КлиентHTTPВызовСервера.ДобавитьЗаписьОшибкиВЖурналРегистрации(ИдентификаторРесурса, ОписаниеОшибки);
		ВызватьИсключение ОписаниеОшибки;
	КонецЕсли;
	
	Возврат фРезультат;
КонецФункции

Процедура РазобратьОснованиеИдентификатораРесурса(ДанныеURI, Знач ИдентификаторРесурса, Знач ПозицияНачала, ПозицияПараметров, ПозицияФрагмента)
	ОписаниеТипаЧисло = Новый ОписаниеТипов("Число");
	
	ДлинаИдентификатораРесурса = СтрДлина(ИдентификаторРесурса);
	ПозицияНачалаАдресаРесурса = СтрНайти(ИдентификаторРесурса, "/", , ПозицияНачала);
	ПозицияПоиска = ?(ПозицияНачалаАдресаРесурса = 0, ПозицияНачала, ПозицияНачалаАдресаРесурса);
	ПозицияПараметров = СтрНайти(ИдентификаторРесурса, "?", , ПозицияПоиска);
	ПозицияПоиска = ?(ПозицияПараметров = 0, ПозицияПоиска, ПозицияПараметров);
	ПозицияФрагмента = СтрНайти(ИдентификаторРесурса, "#", , ПозицияПоиска);
	ПозицияОкончания = ?(ПозицияПараметров = 0, ПозицияФрагмента, ПозицияПараметров);
	
	Обращение = Сред(
		ИдентификаторРесурса,
		ПозицияНачала,
		?(
			ПозицияНачалаАдресаРесурса = 0,
			ПозицияОкончания,
			ПозицияНачалаАдресаРесурса
		) - ПозицияНачала
	);
	ДлинаОбращения = СтрДлина(Обращение);
	
	ПозицияПослеАвторизации = СтрНайти(Обращение, "@");
	Авторизация = Лев(Обращение, ПозицияПослеАвторизации - 1);
	ДлинаАвторизации = СтрДлина(Авторизация);
	Если ДлинаАвторизации > 0 Тогда
		ПозицияРазделителяАвторизации = СтрНайти(Авторизация, ":");
		Если ПозицияРазделителяАвторизации = 0 Тогда
			ПозицияРазделителяАвторизации = ДлинаАвторизации + 1;
		КонецЕсли;
		ЗакодированныйПользователь = СокрЛП(Лев(Авторизация, ПозицияРазделителяАвторизации - 1));
		ЗакодированныйПароль = Прав(Авторизация, ДлинаАвторизации - ПозицияРазделителяАвторизации);
		МножествоСтрок = Новый Соответствие;
		МножествоСтрок.Вставить(ЗакодированныйПользователь);
		МножествоСтрок.Вставить(ЗакодированныйПароль);
		
		МножествоСтрок = КлиентHTTPВызовСервера.РаскодированныеСтрокиURLвURL(МножествоСтрок);
		ДанныеURI.Пользователь = МножествоСтрок.Получить(ЗакодированныйПользователь);
		ДанныеURI.Пароль = МножествоСтрок.Получить(ЗакодированныйПароль);
	КонецЕсли;
	
	ИмяХоста = Прав(Обращение, ДлинаОбращения - ПозицияПослеАвторизации);
	
	ПозицияПорта = СтрНайти(ИмяХоста, ":");
	Если ПозицияПорта > 0 Тогда
		ДанныеURI.Порт = ОписаниеТипаЧисло.ПривестиЗначение(Сред(
			ИмяХоста,
			ПозицияПорта + 1,
			?(
				ПозицияНачалаАдресаРесурса = 0,
				ПозицияОкончания - ПозицияНачала,
				ПозицияНачалаАдресаРесурса
			) - ПозицияПорта
		));
	КонецЕсли;
	
	ДанныеURI.Сервер = ?(ПозицияПорта = 0, ИмяХоста, Лев(ИмяХоста, ПозицияПорта - 1));
	
	Если ПозицияНачалаАдресаРесурса > 0 Тогда
		ДанныеURI.Путь = Сред(
			ИдентификаторРесурса,
			ПозицияНачалаАдресаРесурса,
			?(
				ПозицияОкончания = 0,
				ДлинаИдентификатораРесурса + 1,
				ПозицияОкончания
			) - ПозицияНачалаАдресаРесурса
		);
	КонецЕсли;
КонецПроцедуры

Функция ПараметрыИдентификатора(Знач ИдентификаторРесурса, Знач ПозицияНачала, Знач ПозицияОкончания)
	фРезультат = НовыеПараметрыЗапроса();
	
	ДлинаИдентификатораРесурса = СтрДлина(ИдентификаторРесурса);
	ПараметрыСтрока = ?(
		ПозицияНачала = 0 ИЛИ ПозицияНачала = ДлинаИдентификатораРесурса,
		"",
		Сред(
			ИдентификаторРесурса,
			ПозицияНачала + 1,
			?(
				ПозицияОкончания = 0,
				ДлинаИдентификатораРесурса,
				ПозицияОкончания - 1
			) - ПозицияНачала
		)
	);
	
	Параметры = Новый Массив;
	МножествоСтрок = Новый Соответствие;
	Для Каждого Параметр Из СтрРазделить(ПараметрыСтрока, "&", Ложь) Цикл
		ПозицияРазделителя = СтрНайти(Параметр, "=");
		Если ПозицияРазделителя = 0 Тогда
			ПозицияРазделителя = СтрДлина(Параметр) + 1;
		КонецЕсли;
		
		ИмяПараметра = Лев(Параметр, ПозицияРазделителя - 1);
		Если ПустаяСтрока(ИмяПараметра) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗначениеПараметра = Сред(Параметр, ПозицияРазделителя + 1);
		
		Параметры.Добавить(Новый Структура("Ключ, Значение", ИмяПараметра, ЗначениеПараметра));
		МножествоСтрок.Вставить(ИмяПараметра);
		МножествоСтрок.Вставить(ЗначениеПараметра);
	КонецЦикла;
	
	МножествоСтрок = КлиентHTTPВызовСервера.РаскодированныеСтрокиURLвURL(МножествоСтрок);
	
	Для Каждого Параметр Из Параметры Цикл
		ИмяПараметра = МножествоСтрок.Получить(Параметр.Ключ);
		ЗначениеПараметра = МножествоСтрок.Получить(Параметр.Значение);
		
		ДобавитьПараметр(фРезультат, ИмяПараметра, ЗначениеПараметра);
	КонецЦикла;
	
	Возврат фРезультат;
КонецФункции

Функция СтруктураИдентификатораРесурса(Знач ИдентификаторРесурса)
	фРезультат = Новый Структура(
		"Сервер, Путь, Пользователь, Пароль, Порт, ЗащищенноеСоединение, Параметры, Фрагмент",
		"",   // Сервер
		"/",  // Путь
		"",   // Пользователь
		"",   // Пароль
		80,   // Порт
		Ложь, // ЗащищенноеСоединение
		Неопределено, // Параметры
		""    // Фрагмент
	);
	
	Если ТипЗнч(ИдентификаторРесурса) = Тип("Структура") Тогда
		АдресРесурса = СоставляющиеАдресаРесурса(ИдентификаторРесурса.АдресРесурса);
		фРезультат.Сервер = ИдентификаторРесурса.Сервер;
		фРезультат.Путь = АдресРесурса.Путь;
		фРезультат.Порт = ИдентификаторРесурса.Порт;
		фРезультат.Параметры = АдресРесурса.Параметры;
		фРезультат.ЗащищенноеСоединение = ИдентификаторРесурса.ЗащищенноеСоединение;
		фРезультат.Пользователь = ИдентификаторРесурса.Пользователь;
		фРезультат.Пароль = ИдентификаторРесурса.Пароль;
		фРезультат.Фрагмент = АдресРесурса.Фрагмент;
		
		Возврат фРезультат;
	КонецЕсли;
	
	ПозицияНачалаПоиска = ДлинаСхемыИдентификатораРесурса(фРезультат, ИдентификаторРесурса);
	
	ПозицияСимволаПараметров = 0;
	ПозицияСимволаФрагмента = 0;
	РазобратьОснованиеИдентификатораРесурса(фРезультат, ИдентификаторРесурса, ПозицияНачалаПоиска, ПозицияСимволаПараметров, ПозицияСимволаФрагмента);
	
	фРезультат.Параметры = ПараметрыИдентификатора(ИдентификаторРесурса, ПозицияСимволаПараметров, ПозицияСимволаФрагмента);
	фРезультат.Фрагмент = ?(ПозицияСимволаФрагмента = 0, "", Сред(ИдентификаторРесурса, ПозицияСимволаФрагмента + 1));
	
	Возврат фРезультат;
КонецФункции

Функция НовоеHTTPСоединениеСПереиспользованием(Конфигурация)
	Перем фРезультат, ПереиспользоватьСоединение;
	
	Конфигурация.ДополнительныеПараметры.Свойство("ПереиспользоватьСоединение", ПереиспользоватьСоединение);
	Если ЗначениеЗаполнено(ПереиспользоватьСоединение) И ПереиспользоватьСоединение = Истина Тогда
		Если НЕ Конфигурация.ДополнительныеПараметры.Свойство("HTTPСоединение", фРезультат) Тогда
			фРезультат = НовоеHTTPСоединение(Конфигурация.ДанныеURI, Конфигурация.ДополнительныеПараметры);
			Конфигурация.ДополнительныеПараметры.Вставить("HTTPСоединение", фРезультат);
		КонецЕсли;
	Иначе
		фРезультат = НовоеHTTPСоединение(Конфигурация.ДанныеURI, Конфигурация.ДополнительныеПараметры);
	КонецЕсли;
	
	Возврат фРезультат;
КонецФункции

Функция НовоеHTTPСоединение(Знач ДанныеURI, Знач ДополнительныеПараметры)
	КонфигурацияСоединения = Новый Структура(
		"Сервер, Порт",
		ДанныеURI.Сервер,
		?(ДополнительныеПараметры.Свойство("Порт"), ДополнительныеПараметры.Порт, ДанныеURI.Порт)
	);
	
	Если ДополнительныеПараметры.Свойство("ЗащищенноеСоединение") Тогда
		КонфигурацияСоединения.Вставить("ЗащищенноеСоединение", ДополнительныеПараметры.ЗащищенноеСоединение);
	ИначеЕсли ДанныеURI.ЗащищенноеСоединение Тогда
		КонфигурацияСоединения.Вставить("ЗащищенноеСоединение", Новый ЗащищенноеСоединениеOpenSSL);
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ДанныеURI.Пользователь) Тогда
		КонфигурацияСоединения.Вставить("Пользователь", ДанныеURI.Пользователь);
		КонфигурацияСоединения.Вставить("Пароль", ДанныеURI.Пароль);
	КонецЕсли;
	
	Для Каждого Ключ Из СтрРазделить("Пользователь,Пароль,Прокси,Таймаут,ИспользоватьАутентификациюОС", ",") Цикл
		Если ДополнительныеПараметры.Свойство(Ключ) Тогда 
			КонфигурацияСоединения.Вставить(Ключ, ДополнительныеПараметры[Ключ]);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый HTTPСоединение(
		КонфигурацияСоединения.Сервер,
		КонфигурацияСоединения.Порт,
		?(КонфигурацияСоединения.Свойство("Пользователь"), КонфигурацияСоединения.Пользователь, ""),
		?(КонфигурацияСоединения.Свойство("Пароль"), КонфигурацияСоединения.Пароль, ""),
		?(КонфигурацияСоединения.Свойство("Прокси"), КонфигурацияСоединения.Прокси, Неопределено),
		?(КонфигурацияСоединения.Свойство("Таймаут"), КонфигурацияСоединения.Таймаут, 0),
		?(КонфигурацияСоединения.Свойство("ЗащищенноеСоединение"), КонфигурацияСоединения.ЗащищенноеСоединение, Неопределено),
		?(КонфигурацияСоединения.Свойство("ИспользоватьАутентификациюОС"), КонфигурацияСоединения.ИспользоватьАутентификациюОС, Ложь)
	);
КонецФункции

Функция ОбъединениеПараметровЗапроса(Знач ПараметрыURI, Знач ПараметрыЗапроса)
	фРезультат = Новый Соответствие;
	
	Для Каждого КЗ Из ПараметрыURI Цикл
		фРезультат.Вставить(КЗ.Ключ, КЗ.Значение);
	КонецЦикла;
	
	Для Каждого КЗ Из ПараметрыЗапроса Цикл
		фРезультат.Вставить(КЗ.Ключ, КЗ.Значение);
	КонецЦикла;
	
	Возврат фРезультат;
КонецФункции

Функция ЗаголовкиЗапроса(Знач ДанныеURI, ДополнительныеПараметры)
	фРезультат = Новый Соответствие;
	
	Если ДополнительныеПараметры.Свойство("Заголовки") Тогда
		Для Каждого КЗ Из ДополнительныеПараметры.Заголовки Цикл
			Если ПустаяСтрока(КЗ.Ключ) Тогда
				Продолжить;
			КонецЕсли;
			
			фРезультат.Вставить(КЗ.Ключ, КЗ.Значение);
		КонецЦикла;
	КонецЕсли;
	
	ДобавитьХостВЗаголовкиЗапроса(фРезультат, ДанныеURI);
	ДобавитьТипКонтентаВЗаголовкиЗапроса(фРезультат, ДополнительныеПараметры);
	ДобавитьКодировкуВЗаголовкиЗапроса(фРезультат, ДополнительныеПараметры);
	ДобавитьРазделительПолейФормыВЗаголовкиЗапроса(фРезультат, ДополнительныеПараметры);
	ДобавитьСжатиеВЗаголовкиЗапроса(фРезультат, ДополнительныеПараметры);
	ДобавитьДанныеСессииВЗаголовкиЗапроса(фРезультат, ДанныеURI, ДополнительныеПараметры);
	ДобавитьАутентификациюВЗаголовкиЗапроса(фРезультат, ДополнительныеПараметры);
	
	Возврат фРезультат;
КонецФункции

Функция ИмяВыходногоФайлаИзДопПараметров(Знач ДополнительныеПараметры)
	Возврат ?(ДополнительныеПараметры.Свойство("ИмяВыходногоФайла"), ДополнительныеПараметры.ИмяВыходногоФайла, "");
КонецФункции

Процедура ДобавитьХостВЗаголовкиЗапроса(Заголовки, Знач ДанныеURI)
	Заголовки.Вставить("Host", ?(
		ЗначениеЗаполнено(ДанныеURI.Порт)
			И (ДанныеURI.ЗащищенноеСоединение И ДанныеURI.Порт <> 443
				ИЛИ НЕ ДанныеURI.ЗащищенноеСоединение И ДанныеURI.Порт <> 80),
		СтрШаблон("%1:%2", ДанныеURI.Сервер, Формат(ДанныеURI.Порт, "ЧГ=")),
		ДанныеURI.Сервер
	));
КонецПроцедуры

Процедура ДобавитьТипКонтентаВЗаголовкиЗапроса(Заголовки, Знач ДополнительныеПараметры)
	Если ДополнительныеПараметры.Свойство("ТипMIME") Тогда
		Заголовки.Вставить(КлиентHTTPПовтИсп.ЗаголовокТипКонтента(), ДополнительныеПараметры.ТипMIME);
	КонецЕсли;
КонецПроцедуры

Процедура ДобавитьКодировкуВЗаголовкиЗапроса(Заголовки, Знач ДополнительныеПараметры)
	ТекущееЗначение = Заголовки.Получить(КлиентHTTPПовтИсп.ЗаголовокТипКонтента());
	
	Если ДополнительныеПараметры.Свойство("Кодировка") И ТекущееЗначение <> Неопределено Тогда
		Заголовки.Вставить(
			КлиентHTTPПовтИсп.ЗаголовокТипКонтента(),
			ТекущееЗначение + "; charset=" + КодировкаИзДопПараметров(ДополнительныеПараметры)
		);
	КонецЕсли;
КонецПроцедуры

Процедура ДобавитьСжатиеВЗаголовкиЗапроса(Заголовки, Знач ДополнительныеПараметры)
	Если ДополнительныеПараметры.Свойство("СжатиеОтвета") Тогда
		Заголовки.Вставить("Accept-Encoding", ДополнительныеПараметры.СжатиеОтвета);
	КонецЕсли;
КонецПроцедуры

Процедура ДобавитьДанныеСессииВЗаголовкиЗапроса(Заголовки, Знач ДанныеURI, Знач ДополнительныеПараметры)
	Если НЕ ДополнительныеПараметры.Свойство("Сессия") Тогда
		Возврат;
	КонецЕсли;
	
	Значение = ЗначениеЗаголовкаCookie(ДанныеURI, ДополнительныеПараметры.Сессия);
	Если ЗначениеЗаполнено(Значение) Тогда
		Заголовки.Вставить("Cookie", Значение);
	КонецЕсли;
КонецПроцедуры

Процедура ДобавитьАутентификациюВЗаголовкиЗапроса(Заголовки, Знач ДополнительныеПараметры)
	Если НЕ (ДополнительныеПараметры.Свойство("Аутентификация")
		 И ДополнительныеПараметры.Аутентификация.Свойство("Тип")) Тогда
		Возврат;
	КонецЕсли;
	
	ТипАутентификации = ДополнительныеПараметры.Аутентификация.Тип;
	Если ТипАутентификации = "Basic" Тогда
		ДобавитьBasicАутентификациюВЗаголовкиЗапроса(Заголовки, ДополнительныеПараметры.Аутентификация);
	ИначеЕсли ТипАутентификации = "NTLM" Тогда
		УстановитьNTLMАутентификацию(ДополнительныеПараметры, ДополнительныеПараметры.Аутентификация);
	ИначеЕсли ТипАутентификации = "Digest" Тогда
		ДополнительныеПараметры.Вставить("АвторизоватьсяDigest");
	ИначеЕсли ТипАутентификации = "Bearer" Тогда
		ДобавитьBearerАутентификациюВЗаголовкиЗапроса(Заголовки, ДополнительныеПараметры.Аутентификация);
	ИначеЕсли ТипАутентификации = "AWS4" Тогда
		ЗарегистрироватьAWS4Аутентификацию(ДополнительныеПараметры);
	ИначеЕсли ТипАутентификации = "Hawk" Тогда
		ЗарегистрироватьHawkАутентификацию(ДополнительныеПараметры);
	Иначе
		ВызватьИсключение СтрШаблон("Неизвестный тип аутентификации: %1", ТипАутентификации);
	КонецЕсли;
КонецПроцедуры

Процедура ДобавитьBasicАутентификациюВЗаголовкиЗапроса(Заголовки, Знач ДанныеАутентификации)
	СтрокаАутентификации = КлиентHTTPСлужебный.СтрокаBasicАвторизации(ДанныеАутентификации.Пользователь, ДанныеАутентификации.Пароль);
	
	Заголовки.Вставить("Authorization", "Basic " + СтрокаАутентификации);
КонецПроцедуры

Процедура УстановитьNTLMАутентификацию(ДополнительныеПараметры, Знач ДанныеАутентификации)
	УстановитьИспользованиеАутентификацииОС(ДополнительныеПараметры, Истина)
		.УстановитьПользователяСоединения(ДополнительныеПараметры, ДанныеАутентификации.Пользователь)
		.УстановитьПарольСоединения(ДополнительныеПараметры, ДанныеАутентификации.Пароль);
КонецПроцедуры

Процедура ДобавитьBearerАутентификациюВЗаголовкиЗапроса(Заголовки, Знач ДанныеАутентификации)
	Заголовки.Вставить("Authorization", "Bearer " + ДанныеАутентификации.Токен);
КонецПроцедуры

Процедура ЗарегистрироватьAWS4Аутентификацию(ДополнительныеПараметры)
	ДополнительныеПараметры.Вставить("АвторизоватьсяAWS4", ДополнительныеПараметры.Аутентификация);
КонецПроцедуры

Процедура ЗарегистрироватьHawkАутентификацию(ДополнительныеПараметры)
	ДополнительныеПараметры.Вставить("АвторизоватьсяHawk", ДополнительныеПараметры.Аутентификация);
КонецПроцедуры

Процедура ПрименитьAWS4Аутентификацию(Знач Метод, Знач Данные, Конфигурация)
	Если НЕ Конфигурация.ДополнительныеПараметры.Свойство("АвторизоватьсяAWS4") Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеАдресВХ = ПоместитьВоВременноеХранилище(?(Данные = Неопределено, "", Данные), Новый УникальныйИдентификатор);
	Для Каждого Заголовок Из КлиентHTTPВызовСервера.ЗаголовкиAWS4(Метод, Конфигурация, ДанныеАдресВХ) Цикл
		Конфигурация.Заголовки.Вставить(Заголовок.Ключ, Заголовок.Значение);
	КонецЦикла;
КонецПроцедуры

Процедура ПрименитьHawkАутентификацию(Знач Метод, Знач Данные, Конфигурация, Контекст)
	Если НЕ Конфигурация.ДополнительныеПараметры.Свойство("АвторизоватьсяHawk") Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеАдресВХ = ?(
	    Данные = Неопределено,
		Неопределено,
		ПоместитьВоВременноеХранилище(Данные, Новый УникальныйИдентификатор)
	);
	
	ЗначениеЗаголовкаHawk = КлиентHTTPВызовСервера.ЗаголовокHawk(Метод, Конфигурация, ДанныеАдресВХ);
	Конфигурация.Заголовки.Вставить("Authorization", ЗначениеЗаголовкаHawk);
	
	Контекст.Значения.Вставить("АутентификацияHawk", КонтекстАутентификацииHawk(Контекст, Конфигурация));
КонецПроцедуры

Функция КонтекстАутентификацииHawk(Контекст, Конфигурация)
	Аутентификация = Конфигурация.ДополнительныеПараметры.АвторизоватьсяHawk;
	Возврат Новый ФиксированнаяСтруктура(
		"Ключ, Дополнение, ИдентификаторПриложения, Делегирование, Метод, Хост, Порт, Путь, ВременнаяМетка, РазовоеСлово",
		Аутентификация.Ключ,
		Аутентификация.Дополнение,
		Аутентификация.ИдентификаторПриложения,
		Аутентификация.Делегирование,
		Контекст.Метод,
		Конфигурация.ДанныеURI.Сервер,
		Конфигурация.ДанныеURI.Порт,
		Конфигурация.ДанныеURI.Путь,
		Аутентификация.ВременнаяМетка,
		Аутентификация.РазовоеСлово
	);
КонецФункции

Процедура ДобавитьРазделительПолейФормыВЗаголовкиЗапроса(Заголовки, Знач ДополнительныеПараметры)
	ТекущееЗначение = Заголовки.Получить(КлиентHTTPПовтИсп.ЗаголовокТипКонтента());
	
	Если ДополнительныеПараметры.Свойство("Разделитель") И ТекущееЗначение <> Неопределено Тогда
		Заголовки.Вставить(
			КлиентHTTPПовтИсп.ЗаголовокТипКонтента(),
			ТекущееЗначение + "; boundary=" + ДополнительныеПараметры.Разделитель
		);
	КонецЕсли;
КонецПроцедуры

Процедура ДобавитьРазмерДанныхВЗаголовкиЗапроса(Заголовки, Знач ДополнительныеПараметры, Знач Данные)
	Если ТипЗнч(Данные) = Тип("ДвоичныеДанные") Тогда
		Заголовки.Вставить("Content-Length", XMLСтрока(Данные.Размер()));
	ИначеЕсли ТипЗнч(Данные) = Тип("Строка") Тогда
		Кодировка = КодировкаИзДопПараметров(ДополнительныеПараметры);
		Заголовки.Вставить("Content-Length", XMLСтрока(КлиентHTTPСлужебный.РазмерТекстовыхДанных(Данные, Кодировка)));
	Иначе
		ВызватьИсключение "Неизвестный тип данных: " + ТипЗнч(Данные);
	КонецЕсли;
КонецПроцедуры

Функция ПеренаправлениеЗапросаHTTP(Знач НовыйИдентификаторРесурса, Знач Ответ, Знач Конфигурация, Знач КонтекстВыполнения)
	Метод = КонтекстВыполнения.Метод;
	Данные = КонтекстВыполнения.Данные;
	Если (
			Ответ.КодСостояния = КлиентHTTPПовтИсп.КодСостоянияПеремещен()
			ИЛИ Ответ.КодСостояния = КлиентHTTPПовтИсп.КодСостоянияНайден()
		) И Конфигурация.ДополнительныеПараметры.Сессия.Свойство("ПеренаправлениеКакGET")
	Тогда
		Метод = КлиентHTTPПовтИсп.МетодGET();
		Данные = Неопределено;
		
		Конфигурация.Заголовки.Удалить(КлиентHTTPПовтИсп.ЗаголовокРазмерКонтента());
	КонецЕсли;
	
	Конфигурация.ДанныеURI = СтруктураИдентификатораРесурса(НовыйИдентификаторРесурса);
	Конфигурация.Параметры = ОбъединениеПараметровЗапроса(Конфигурация.ДанныеURI.Параметры, НовыеПараметрыЗапроса());
	Конфигурация.ПараметрыСтрокой = ПараметрыЗапросаСтрокой(Конфигурация.Параметры);
	
	Возврат ВыполненныйЗапросHTTP(Метод, Конфигурация, Данные, КонтекстВыполнения.НомерПеренаправления + 1);
КонецФункции
		
Функция ОбработанныйОтвет(Знач Ответ, Знач Конфигурация, Знач КонтекстВыполнения)
	Если НЕ Конфигурация.ДополнительныеПараметры.Свойство("Сессия") Тогда
		Возврат ОбъектОбработанногоОтвета(Ответ, Конфигурация.ДополнительныеПараметры, КонтекстВыполнения);
	КонецЕсли;
	
	Печенье = ЗначениеЗаголовка(КлиентHTTPПовтИсп.ЗаголовокОтветаСПеченьем(), Ответ.Заголовки);
	Если Печенье <> Неопределено Тогда
		Попытка
			КлиентHTTPВызовСервера.ПринятьПеченье(Конфигурация.ДополнительныеПараметры.Сессия, Печенье, Конфигурация.ДанныеURI.Сервер); 
		Исключение
			СобытиеВТранзакции = Ложь;
			КлиентHTTPВызовСервера.ДобавитьЗаписьОшибкиВЖурналРегистрации(Печенье, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), СобытиеВТранзакции);
			Если СобытиеВТранзакции Тогда
				ВызватьИсключение ОписаниеОшибки();
			КонецЕсли;
		КонецПопытки;
	КонецЕсли;
	
	Сессия = Конфигурация.ДополнительныеПараметры.Сессия;
	НовыйИдентификаторРесурса = ИдентификаторПеренаправления(Ответ.КодСостояния, Ответ.Заголовки);
	Если ЗначениеЗаполнено(НовыйИдентификаторРесурса) И КонтекстВыполнения.НомерПеренаправления <= Сессия.ПорогПеренаправлений Тогда
		Возврат ПеренаправлениеЗапросаHTTP(НовыйИдентификаторРесурса, Ответ, Конфигурация, КонтекстВыполнения);
	КонецЕсли;
	
	Если Ответ.КодСостояния = КлиентHTTPПовтИсп.КодСостоянияНеАвторизовано() И Конфигурация.ДополнительныеПараметры.Свойство("АвторизоватьсяDigest") Тогда
		РецептАвторизации = ЗначениеЗаголовка("WWW-Authenticate", Ответ.Заголовки);
		Если СтрНачинаетсяС(НРег(РецептАвторизации), "digest") Тогда
			КонтекстВыполненияАдресВХ = ПоместитьВоВременноеХранилище(КонтекстВыполнения, Новый УникальныйИдентификатор);
			
			Конфигурация.ДополнительныеПараметры.Удалить("АвторизоватьсяDigest");
			Сессия.Вставить("ПараметрыDigest", ПараметрыDigest(РецептАвторизации));
			Конфигурация.Заголовки.Вставить("Authorization", КлиентHTTPВызовСервера.ЗаголовокDigest(Конфигурация, КонтекстВыполненияАдресВХ));
			
			Возврат ВыполнитьЗапросHTTP(КонтекстВыполнения.Метод, Конфигурация, КонтекстВыполнения.Данные, КонтекстВыполнения.НомерПеренаправления + 1);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОбъектОбработанногоОтвета(Ответ, Конфигурация.ДополнительныеПараметры, КонтекстВыполнения);
КонецФункции

Функция ОбъектОбработанногоОтвета(Знач Ответ, Знач ДополнительныеПараметры, Знач КонтекстВыполнения)
#Если Клиент Тогда
	Возврат КлиентHTTPКлиент.ОбъектОбработанногоОтвета(Ответ, ДополнительныеПараметры, КонтекстВыполнения);
#Иначе
	Возврат КлиентHTTP.ОбъектОбработанногоОтвета(Ответ, ДополнительныеПараметры, КонтекстВыполнения);
#КонецЕсли
КонецФункции

Функция ОбъектТелаОтветаИзJSON(Знач ДанныеТелаОтвета, Знач Кодировка, Знач СпособЧтения)
	Если ДанныеТелаОтвета.Размер() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Чтение = Новый ЧтениеJSON;
	Чтение.ОткрытьПоток(ДанныеТелаОтвета.ОткрытьПотокДляЧтения(), Кодировка);
	
	фРезультат = ПрочитатьJSON(
		Чтение,
		СпособЧтения.Параметры.ПрочитатьВСоответствие,
		СпособЧтения.Параметры.ИменаСвойствСоЗначениямиДата,
		СпособЧтения.Параметры.ОжидаемыйФорматДаты,
		СпособЧтения.Параметры.ИмяФункцииВосстановления,
		СпособЧтения.Параметры.МодульФункцииВосстановления,
		СпособЧтения.Параметры.ДополнительныеПараметрыФункцииВосстановления,
		СпособЧтения.Параметры.ИменаСвойствДляВосстановления,
		СпособЧтения.Параметры.МаксимальнаяВложенность
	);
	
	Чтение.Закрыть();
	
	Возврат фРезультат;
КонецФункции

Функция ОбъектТелаОтветаИзXML(Знач ДанныеТелаОтвета, Знач Кодировка, Знач СпособЧтения)
	Если ДанныеТелаОтвета.Размер() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Фабрика = Новый ФабрикаXDTO(СпособЧтения.Параметры.НаборСхемXML, СпособЧтения.Параметры.Пакеты);
	
	Чтение = Новый ЧтениеXML;
	Чтение.ОткрытьПоток(ДанныеТелаОтвета.ОткрытьПотокДляЧтения(), СпособЧтения.Параметры.ПараметрыЧтенияXML, , Кодировка);
	фРезультат = Фабрика.ПрочитатьXML(Чтение);
	
	Чтение.Закрыть();
	
	Возврат фРезультат;
КонецФункции

Функция ПеченьеДляURI(Знач ДанныеURI, Знач Печенье)
	фРезультат = Новый Массив;
	Получатель = КлиентHTTPСлужебный.НормализованныйАдресСервера(ДанныеURI.Сервер);
	ДатаЗапроса = КлиентHTTPВызовСервера.ТекущаяУниверсальнаяДатаНаСервере();
	
	ВзятьПеченье(фРезультат, Печенье, Получатель, ДатаЗапроса, ДанныеURI.АдресРесурса, ДанныеURI.ЗащищенноеСоединение);
	Если фРезультат.Количество() > 0 Тогда
		Возврат Новый ФиксированныйМассив(фРезультат);
	КонецЕсли;
	
	Части = СтрРазделить(Получатель, ".", Ложь);
	Пока Части.Количество() > 1 Цикл
		Получатель = "." + СтрСоединить(Части, ".");
		
		ВзятьПеченье(фРезультат, Печенье, Получатель, ДатаЗапроса, ДанныеURI.АдресРесурса, ДанныеURI.ЗащищенноеСоединение);
		Если фРезультат.Количество() > 0 Тогда
			Прервать;
		КонецЕсли;
		
		Части.Удалить(0);
	КонецЦикла;
	
	Возврат Новый ФиксированныйМассив(фРезультат);
КонецФункции

Процедура ВзятьПеченье(ПеченьеПолучателя, Печенье, Знач Получатель, Знач ДатаЗапроса, Знач АдресРесурса, Знач ЗащищенноеСоединение)
	ИмяСрок = КлиентHTTPПовтИсп.СвойствоПеченькаСрок();
	ИмяАдресРесурса = КлиентHTTPПовтИсп.СвойствоПеченькаАдресРесурса();
	ИмяЗащищенноеСоединение = КлиентHTTPПовтИсп.СвойствоПеченькаЗащищенноеСоединение();
	
	Печеньки = Печенье.Получить(Получатель);
	Если Печеньки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПеченькиНаУдаление = Новый Массив;
	
	Для Каждого КЗ Из Печеньки Цикл
		Печенька = КЗ.Значение;
		Если Печенька.Свойство(ИмяСрок) И Печенька[ИмяСрок] < ДатаЗапроса Тогда
			ПеченькиНаУдаление.Добавить(КЗ.Ключ);
			Продолжить;
		КонецЕсли;
		Если Печенька.Свойство(ИмяАдресРесурса) И НЕ СтрНачинаетсяС(АдресРесурса, Печенька[ИмяАдресРесурса]) Тогда
			Продолжить;
		КонецЕсли;
		Если Печенька.Свойство(ИмяЗащищенноеСоединение) И НЕ ЗащищенноеСоединение Тогда
			Продолжить;
		КонецЕсли;
		
		ПеченьеПолучателя.Добавить(Печенька.Имя + "=" + Печенька.Значение);
	КонецЦикла;
	
	Для Каждого Печенька Из ПеченькиНаУдаление Цикл
		Печеньки.Удалить(Печенька);
	КонецЦикла;
	Если НЕ ЗначениеЗаполнено(Печеньки) Тогда
		Печенье.Удалить(Получатель);
	КонецЕсли;
КонецПроцедуры

Процедура ОбъединитьПеченье(Приемник, Знач Источник, Знач Заменять = Истина)
	Для Каждого КЗ Из Источник Цикл
		ПеченьеСорта = Приемник.Получить(КЗ.Ключ);
		Если ПеченьеСорта = Неопределено Тогда
			ПеченьеСорта = Новый Соответствие;
			Приемник.Вставить(КЗ.Ключ, ПеченьеСорта);
		КонецЕсли;
		
		Для Каждого Печенька Из КЗ.Значение Цикл
			Если НЕ Заменять И ПеченьеСорта.Получить(Печенька.Ключ) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ПеченьеСорта.Вставить(Печенька.Ключ, Печенька.Значение);
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Функция ЗначениеЗаголовкаCookie(Знач ДанныеURI, Знач Сессия)
	Если НЕ Сессия.Свойство("Печенье") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Печенье = ПеченьеДляURI(ДанныеURI, Сессия.Печенье);
	
	Возврат ?(ЗначениеЗаполнено(Печенье), СтрСоединить(Печенье, "; "), "");
КонецФункции

Функция АдресРесурсаЗапроса(Знач Конфигурация)
	Возврат Конфигурация.ДанныеURI.Путь +
		Конфигурация.ПараметрыСтрокой +
		?(ПустаяСтрока(Конфигурация.ДанныеURI.Фрагмент), "", "#") +
		Конфигурация.ДанныеURI.Фрагмент;
КонецФункции

Функция ИдентификаторПеренаправления(Знач КодСостояния, Знач Заголовки)
	Возврат ?(
		КлиентHTTPПовтИсп.КодыСостоянияПеренаправления().Получить(КодСостояния) = Неопределено,
		Неопределено,
		КлиентHTTPВызовСервера.РаскодированныйИдентификаторРесурса(ЗначениеЗаголовка(КлиентHTTPПовтИсп.ЗаголовокОтветаПеренаправление(), Заголовки))
	);
КонецФункции

Функция ОбъектАутентификации(Знач Тип, Знач Пользователь, Знач Пароль)
	Возврат Новый ФиксированнаяСтруктура("Тип, Пользователь, Пароль", Тип, Пользователь, Пароль);
КонецФункции

Функция ОбъектАутентификацииBearer(Знач Токен)
	Возврат Новый ФиксированнаяСтруктура("Тип, Токен", "Bearer", Токен);
КонецФункции

Функция ОбъектАутентификацииAWS4(Знач КлючДоступа, Знач СекретныйКлюч, Знач Регион, Знач Сервис)
	Возврат Новый ФиксированнаяСтруктура("Тип, КлючДоступа, СекретныйКлюч, Регион, Сервис", "AWS4", КлючДоступа, СекретныйКлюч, Регион, Сервис);
КонецФункции

Функция ОбъектАутентификацииHawk(Знач Идентификатор, Знач Ключ, Знач Дополнение, Знач ИдентификаторПриложения, Знач Делегирование)
	Возврат Новый ФиксированнаяСтруктура(
		"Тип, Идентификатор, Ключ, Дополнение, ИдентификаторПриложения, Делегирование",
		"Hawk",
		Идентификатор,
		Ключ,
		Дополнение,
		ИдентификаторПриложения,
		Делегирование
	);
КонецФункции

Функция ПараметрыDigest(Знач РецептАвторизации)
	фРезультат = Новый Структура("algorithm, realm, nonce, qop, opaque");
	
	РецептАвторизации = СтрЗаменить(СокрЛП(Сред(РецептАвторизации, 7)), """", "");
	Для Каждого Часть Из СтрРазделить(РецептАвторизации, ",", Ложь) Цикл
		КЗ = СтрРазделить(СокрЛП(Часть), "=");
		фРезультат.Вставить(КЗ[0], КЗ[1]);
	КонецЦикла;
	
	Возврат фРезультат;
КонецФункции

Функция СпособЧтенияТелаОтвета(Знач Формат, Знач Параметры = Неопределено)
	Возврат Новый Структура("Формат, Параметры", Формат, Параметры);
КонецФункции

Функция ПараметрыЧтенияJSON(
	Знач ПрочитатьВСоответствие = Ложь,
	Знач ИменаСвойствСоЗначениямиДата = Неопределено,
	Знач ОжидаемыйФорматДаты = Неопределено,
	Знач ИмяФункцииВосстановления = Неопределено,
	Знач МодульФункцииВосстановления = Неопределено,
	Знач ДополнительныеПараметрыФункцииВосстановления = Неопределено,
	Знач ИменаСвойствДляВосстановления = Неопределено,
	Знач МаксимальнаяВложенность = 500
)
	Если ОжидаемыйФорматДаты = Неопределено Тогда
		ОжидаемыйФорматДаты = ФорматДатыJSON.ISO;
	КонецЕсли;
	
	Возврат Новый Структура(
		"ПрочитатьВСоответствие, ИменаСвойствСоЗначениямиДата, ОжидаемыйФорматДаты, ИмяФункцииВосстановления, МодульФункцииВосстановления, ДополнительныеПараметрыФункцииВосстановления, ИменаСвойствДляВосстановления, МаксимальнаяВложенность",
		ПрочитатьВСоответствие,
		ИменаСвойствСоЗначениямиДата,
		ОжидаемыйФорматДаты,
		ИмяФункцииВосстановления,
		МодульФункцииВосстановления,
		ДополнительныеПараметрыФункцииВосстановления,
		ИменаСвойствДляВосстановления,
		МаксимальнаяВложенность
	);
КонецФункции

Функция ПараметрыПреобразованияXDTO(
	Знач ПутиКФайламСхемXSD = Неопределено,
	Знач СхемыXSDТекстом = Неопределено,
	Знач Пакеты = Неопределено,
	Знач ИспользоватьПакетТекущейКонфигурации = Ложь,
	Знач ПараметрыЧтенияXML = Неопределено
)
	НаборСхем = Новый НаборСхемXML;
	Если ЗначениеЗаполнено(ПутиКФайламСхемXSD) Тогда
		Для Каждого Путь Из ПутиКФайламСхемXSD Цикл
			Чтение = Новый ЧтениеXML;
			Чтение.ОткрытьФайл(Путь);
			
			Попытка
				ПостроительОМД = Новый ПостроительDOM;
				ДокументDOM = ПостроительОМД.Прочитать(Чтение);
				ПостроительСхемы = Новый ПостроительСхемXML;
				СхемаXML = ПостроительСхемы.СоздатьСхемуXML(ДокументDOM);
			Исключение
				Чтение.Закрыть();
				ВызватьИсключение ОписаниеОшибки();
			КонецПопытки;
			
			Чтение.Закрыть();
			
			НаборСхем.Добавить(СхемаXML);
		КонецЦикла;
	КонецЕсли;
	Если ЗначениеЗаполнено(СхемыXSDТекстом) Тогда
		Для Каждого Текст Из СхемыXSDТекстом Цикл
			Чтение = Новый ЧтениеXML;
			Чтение.УстановитьСтроку(Текст);
			
			ПостроительОМД = Новый ПостроительDOM;
			ДокументDOM = ПостроительОМД.Прочитать(Чтение);
			ПостроительСхемы = Новый ПостроительСхемXML;
			СхемаXML = ПостроительСхемы.СоздатьСхемуXML(ДокументDOM);
			
			Чтение.Закрыть();
			
			НаборСхем.Добавить(СхемаXML);
		КонецЦикла;
	КонецЕсли;
	Если НаборСхем.Количество() = 0 Тогда
		НаборСхем = Неопределено;
	КонецЕсли;
	
	Пакеты = ?(ЗначениеЗаполнено(Пакеты), Пакеты, Неопределено);
	Если ИспользоватьПакетТекущейКонфигурации Тогда
		Если Пакеты = Неопределено Тогда
			Пакеты = Новый Массив;
		КонецЕсли;
		Если ТипЗнч(Пакеты) = Тип("Массив") Тогда // может быть передана коллекция типа КоллекцияПакетовXDTO
			Пакеты.Добавить(ФабрикаXDTO.Пакеты.Получить("http://v8.1c.ru/8.1/data/enterprise/current-config"));
		КонецЕсли;
	КонецЕсли;
	
	Возврат Новый Структура("НаборСхемXML, Пакеты, ПараметрыЧтенияXML", НаборСхем, Пакеты, ПараметрыЧтенияXML);
КонецФункции

Функция ФорматТелаОтветаТекст()
	Возврат "текст";
КонецФункции

Функция ФорматТелаОтветаJSON()
	Возврат "json";
КонецФункции

Функция ФорматТелаОтветаXML()
	Возврат "xml";
КонецФункции
#КонецОбласти
