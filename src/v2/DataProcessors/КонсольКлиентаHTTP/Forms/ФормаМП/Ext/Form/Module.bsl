
// SPDX-License-Identifier: Apache-2.0+

#Область ОписаниеПеременных
&НаКлиенте
Перем ТекущееИмяЗаголовка;

&НаКлиенте
Перем ДанныеТелаОтвета;
#КонецОбласти

#Область ОбработчикиСобытийФормы
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ИспользоватьСессию = Ложь;
	ПоддержкаCookie = Ложь;
	ПорогПеренаправлений = 10;
	
	Схема = Элементы.Схема.СписокВыбора[0];
	ТипАутентификации = Элементы.ТипАутентификации.СписокВыбора[0];
	ТипТелаЗапроса = Элементы.ТипТелаЗапроса.СписокВыбора[0].Значение;
	ИдентификаторРесурса = "https://ya.ru";
	
	Дополнительно = Новый Структура("Сессия", Новый Структура("Печенье", Новый Соответствие));
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиКомандФормы
&НаКлиенте
Процедура ОткрытьКонсоль(Команда)
	Элементы.Основная.ТекущаяСтраница = Элементы.СтраницаКонсоль;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройки(Элемент)
	Элементы.Основная.ТекущаяСтраница = Элементы.СтраницаНастройки;
КонецПроцедуры

&НаКлиенте
Процедура ИмпортироватьCurl(Команда)
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьCookies(Команда)
	Если НЕ ПоддержкаCookie Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("РедакторCookiesЗавершение", ЭтотОбъект, Дополнительно.Сессия);
	
	ОткрытьФорму(
		"Обработка.КонсольКлиентаHTTP.Форма.РедакторCookies",
		Новый Структура("Печенье", Дополнительно.Сессия.Печенье),
		ЭтотОбъект, , , ,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
КонецПроцедуры
#КонецОбласти

#Область КОНСОЛЬ
#Область ОбработчикиСобытийЭлементовШапкиФормы
&НаКлиенте
Процедура ИдентификаторРесурсаПриИзменении(Элемент)
	ЗаполнитьПараметрыПоИдентификаторуРесурса();
	РассчитатьПараметрыИдентификатораРесурса();
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияКонтекстВыполненияНажатие(Элемент)
	ИзменитьКонтекстВыполненияЗапроса();
КонецПроцедуры

&НаКлиенте
Процедура ТипАутентификацииПриИзменении(Элемент)
	ОтображатьПользовательПароль = (
		ТипАутентификации = Элементы.ТипАутентификации.СписокВыбора[1].Значение
		ИЛИ ТипАутентификации = Элементы.ТипАутентификации.СписокВыбора[2].Значение
		ИЛИ ТипАутентификации = Элементы.ТипАутентификации.СписокВыбора[3].Значение
	);
	ОтображатьТокен = (ТипАутентификации = Элементы.ТипАутентификации.СписокВыбора[4].Значение);
	
	Элементы.ПоказатьПарольАутентификации.Пометка = Истина;
	
	ИзменитьРежимОтображенияПароля(Элементы.ПоказатьПарольАутентификации, Элементы.ПарольАутентификации);
	
	Элементы.ПользовательАутентификации.Видимость = ОтображатьПользовательПароль;
	Элементы.ГруппаПарольАутентификации.Видимость = ОтображатьПользовательПароль;
	
	Элементы.ПоказатьТокенАутентификации.Пометка = Истина;
	
	ИзменитьРежимОтображенияПароля(Элементы.ПоказатьТокенАутентификации, Элементы.ТокенАутентификации);
	
	Элементы.ГруппаТокенАутентификации.Видимость = ОтображатьТокен;
КонецПроцедуры

&НаКлиенте
Процедура ПарольАутентификацииОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Оповещение = Новый ОписаниеОповещения("РедакторПарольАутентификацииЗавершение", ЭтотОбъект);
	
	ОткрытьФорму(
		"Обработка.КонсольКлиентаHTTP.Форма.РедакторТекстовогоПоля",
		Новый Структура("Текст", ПарольАутентификации),
		ЭтотОбъект, , , ,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
КонецПроцедуры

&НаКлиенте
Процедура ТокенАутентификацииОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Оповещение = Новый ОписаниеОповещения("РедакторТокенАутентификацииЗавершение", ЭтотОбъект);
	
	ОткрытьФорму(
		"Обработка.КонсольКлиентаHTTP.Форма.РедакторТекстовогоПоля",
		Новый Структура("Текст", ТокенАутентификации),
		ЭтотОбъект, , , ,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиКомандФормы
&НаКлиенте
Процедура КонструкторURL(Команда)
	Оповещение = Новый ОписаниеОповещения("КонструкторURIЗавершение", ЭтотОбъект);
	
	ОткрытьФорму(
		"Обработка.КонсольКлиентаHTTP.Форма.КонструкторИдентификатораРесурса",
		Новый Структура("ИдентификаторРесурса", ИдентификаторРесурса),
		ЭтотОбъект, , , ,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПарольАутентификации(Команда)
	ИзменитьРежимОтображенияПароля(Элементы.ПоказатьПарольАутентификации, Элементы.ПарольАутентификации);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьТокенАутентификации(Команда)
	ИзменитьРежимОтображенияПароля(Элементы.ПоказатьТокенАутентификации, Элементы.ТокенАутентификации);
КонецПроцедуры

&НаКлиенте
Асинх Процедура ВыполнитьЗапрос(Команда)
	ПЗ = МножествоПараметровЗапроса();
	ДП = ДополнительныеПараметрыЗапроса();
	
	ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Результат = Ждать РезультатВыполненногоЗапроса(ПЗ, ДП);
	
	ЗафиксироватьВремяВыполненияЗапроса(ВремяНачала);
	ОбработатьОтвет(Результат.Ответ);
	
	Если ИспользоватьСессию И ПоддержкаCookie Тогда
		КлиентHTTPКлиентСервер.СкопироватьПеченье(Дополнительно, Результат.ДополнительныеПараметры);
	КонецЕсли;
	
	Элементы.ГруппаРазделы.ТекущаяСтраница = Элементы.РазделОтвет;
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПараметрыЗапроса
&НаКлиенте
Процедура ПараметрыЗапросаПриИзменении(Элемент)
	РассчитатьПараметрыИдентификатораРесурса();
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗапросаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И НЕ Копирование Тогда
		Элемент.ТекущиеДанные.Активно = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗапросаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	КоличествоАктивных = КоличествоАктивныхЭлементовТаблицы(ПараметрыЗапроса);
	Элементы.ГруппаПараметрыЗапроса.Заголовок = ЗаголовокТаблицыСАктивнымиЭлементами("Параметры", КоличествоАктивных);
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗапросаКлючОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	Оповещение = Новый ОписаниеОповещения("РедакторПараметраЗапросаЗавершение", ЭтотОбъект, "Ключ");
	
	ОткрытьФорму(
		"Обработка.КонсольКлиентаHTTP.Форма.РедакторТекстовогоПоля",
		Новый Структура("Текст", ТекущиеДанные.Ключ),
		ЭтотОбъект, , , ,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗапросаЗначениеОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	Оповещение = Новый ОписаниеОповещения("РедакторПараметраЗапросаЗавершение", ЭтотОбъект, "Значение");
	
	ОткрытьФорму(
		"Обработка.КонсольКлиентаHTTP.Форма.РедакторТекстовогоПоля",
		Новый Структура("Текст", ТекущиеДанные.Значение),
		ЭтотОбъект, , , ,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗаголовкиЗапроса
&НаКлиенте
Процедура ЗаголовкиЗапросаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И НЕ Копирование Тогда
		Элемент.ТекущиеДанные.Активно = Истина;
	КонецЕсли;
	
	ТекущееИмяЗаголовка = ?(НоваяСтрока, Неопределено, Элемент.ТекущиеДанные.Ключ);
КонецПроцедуры

&НаКлиенте
Процедура ЗаголовкиЗапросаПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если ОтменаРедактирования Тогда
		Если НЕ НоваяСтрока Тогда
			Элемент.ТекущиеДанные.Ключ = ТекущееИмяЗаголовка;
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	ИмяЗаголовка = Элемент.ТекущиеДанные.Ключ;
	Если ТекущееИмяЗаголовка <> Неопределено И ИмяЗаголовка = ТекущееИмяЗаголовка Тогда
		Возврат;
	КонецЕсли;
	
	НайденныеСтроки = ЗаголовкиЗапроса.НайтиСтроки(Новый Структура("Ключ", ИмяЗаголовка));
	ПозицияТекущейСтрокиВНайденных = НайденныеСтроки.Найти(ЗаголовкиЗапроса.НайтиПоИдентификатору(Элемент.ТекущаяСтрока));
	Если ПозицияТекущейСтрокиВНайденных <> Неопределено Тогда
		НайденныеСтроки.Удалить(ПозицияТекущейСтрокиВНайденных);
	КонецЕсли;
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		Отказ = Истина;
		
		СообщитьПользователю("Введите уникальное имя заголовка (ограничение платформы 1С)");
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаголовкиЗапросаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	КоличествоАктивных = КоличествоАктивныхЭлементовТаблицы(ЗаголовкиЗапроса);
	Элементы.ГруппаЗаголовкиЗапроса.Заголовок = ЗаголовокТаблицыСАктивнымиЭлементами("Заголовки", КоличествоАктивных);
КонецПроцедуры

&НаКлиенте
Процедура ЗаголовкиЗапросаКлючПриИзменении(Элемент)
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	ТекущиеДанные.Ключ = ИсправленноеИмяЗаголовкаЗапроса(ТекущиеДанные.Ключ);
КонецПроцедуры

&НаКлиенте
Процедура ЗаголовкиЗапросаКлючОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	Оповещение = Новый ОписаниеОповещения("РедакторИмениЗаголовкаЗапросаЗавершение", ЭтотОбъект);
	
	ОткрытьФорму(
		"Обработка.КонсольКлиентаHTTP.Форма.РедакторТекстовогоПоля",
		Новый Структура("Текст", ТекущиеДанные.Ключ),
		ЭтотОбъект, , , ,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
КонецПроцедуры

&НаКлиенте
Процедура ЗаголовкиЗапросаЗначениеОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	Оповещение = Новый ОписаниеОповещения("РедакторЗначенияЗаголовкаЗапросаЗавершение", ЭтотОбъект);
	
	ОткрытьФорму(
		"Обработка.КонсольКлиентаHTTP.Форма.РедакторТекстовогоПоля",
		Новый Структура("Текст", ТекущиеДанные.Значение),
		ЭтотОбъект, , , ,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
КонецПроцедуры
#КонецОбласти

#Область ТЕЛО_ЗАПРОСА
#Область ОбработчикиСобытийЭлементовШапкиФормы
&НаКлиенте
Процедура ТипТелаЗапросаПриИзменении(Элемент)
	ТипТелаЗапросаСписокВыбора = Элементы.ТипТелаЗапроса.СписокВыбора;
	Элементы.ГруппаТипыТелаЗапроса.Видимость = (ТипТелаЗапроса <> ТипТелаЗапросаСписокВыбора[0].Значение);
	Если ТипТелаЗапроса = ТипТелаЗапросаСписокВыбора[1].Значение Тогда // form-data
		Если ПустаяСтрока(Разделитель) Тогда
			РазделительОчистка(Неопределено, Ложь);
		КонецЕсли;
		
		Элементы.ГруппаТипыТелаЗапроса.ТекущаяСтраница = Элементы.ТипыТелаЗапросаДанныеФормы;
	ИначеЕсли ТипТелаЗапроса = ТипТелаЗапросаСписокВыбора[2].Значение Тогда // x-www-form-urlencoded
		Элементы.ГруппаТипыТелаЗапроса.ТекущаяСтраница = Элементы.ТипыТелаЗапросаДанныеHTMLФормы;
	ИначеЕсли ТипТелаЗапроса = ТипТелаЗапросаСписокВыбора[3].Значение Тогда // raw
		Элементы.ГруппаТипыТелаЗапроса.ТекущаяСтраница = Элементы.ТипыТелаЗапросаТекст;
	ИначеЕсли ТипТелаЗапроса = ТипТелаЗапросаСписокВыбора[4].Значение Тогда // binary
		Элементы.ГруппаТипыТелаЗапроса.ТекущаяСтраница = Элементы.ТипыТелаЗапросаДвоичныеДанные;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РазделительОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Разделитель = XMLСтрока(Новый УникальныйИдентификатор);
КонецПроцедуры

&НаКлиенте
Процедура ТелоЗапросаФайлНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если ВыполнятьНаСервере Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	Оповещение = Новый ОписаниеОповещения("ВыборФайлаТелаЗапросаЗавершение", ЭтотОбъект);
	
	ПоказатьДиалогВыбораФайла(Оповещение, "Выбор файла для отправки");
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТелоЗапросаДанныеФормы
&НаКлиенте
Процедура ДанныеФормыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И НЕ Копирование Тогда
		ТекущиеДанные = Элемент.ТекущиеДанные;
		ТекущиеДанные.Тип     = Элемент.ПодчиненныеЭлементы.ДанныеФормыТип.СписокВыбора[0]; // Текст
		ТекущиеДанные.Активно = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДанныеФормыТипПриИзменении(Элемент)
	Элемент.Родитель.ТекущиеДанные.Значение = "";
КонецПроцедуры

&НаКлиенте
Процедура ДанныеФормыКлючОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	Оповещение = Новый ОписаниеОповещения(
		"РедакторПоляТелаЗапросаЗавершение",
		ЭтотОбъект,
		Новый Структура("ТаблицаФормы, ИмяПоля", Элемент.Родитель, "Ключ")
	);
	
	ОткрытьФорму(
		"Обработка.КонсольКлиентаHTTP.Форма.РедакторТекстовогоПоля",
		Новый Структура("Текст, ЗаголовокФормы", ТекущиеДанные.Ключ, "Ключ поля формы"),
		ЭтотОбъект, , , ,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
КонецПроцедуры

&НаКлиенте
Процедура ДанныеФормыЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	ДанныеФормыТипСписокВыбора = Элемент.Родитель.ПодчиненныеЭлементы.ДанныеФормыТип.СписокВыбора;
	
	Если ТекущиеДанные.Тип = ДанныеФормыТипСписокВыбора[1].Значение Тогда // Файл
		Если ВыполнятьНаСервере Тогда
			Возврат;
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("ВыборФайлаПоляФормыЗавершение", ЭтотОбъект, ТекущиеДанные);
		
		ПоказатьДиалогВыбораФайла(Оповещение, "Выбор файла для отправки");
	Иначе // Текст
		Оповещение = Новый ОписаниеОповещения(
			"РедакторПоляТелаЗапросаЗавершение",
			ЭтотОбъект,
			Новый Структура("ТаблицаФормы, ИмяПоля", Элемент.Родитель, "Значение")
		);
		
		ОткрытьФорму(
			"Обработка.КонсольКлиентаHTTP.Форма.РедакторТекстовогоПоля",
			Новый Структура("Текст, ЗаголовокФормы", ТекущиеДанные.Значение, СтрШаблон("Значение поля формы ""%1""", ТекущиеДанные.Ключ)),
			ЭтотОбъект, , , ,
			Оповещение,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
		);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДанныеФормыЗначениеОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	Оповещение = Новый ОписаниеОповещения(
		"РедакторПоляТелаЗапросаЗавершение",
		ЭтотОбъект,
		Новый Структура("ТаблицаФормы, ИмяПоля", Элемент.Родитель, "Значение")
	);
	
	ОткрытьФорму(
		"Обработка.КонсольКлиентаHTTP.Форма.РедакторТекстовогоПоля",
		Новый Структура("Текст", ТекущиеДанные.Значение),
		ЭтотОбъект, , , ,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТелоЗапросаДанныеHTMLФормы
&НаКлиенте
Процедура ДанныеHTMLФормыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И НЕ Копирование Тогда
		Элемент.ТекущиеДанные.Активно = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДанныеHTMLФормыКлючОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	Оповещение = Новый ОписаниеОповещения(
		"РедакторПоляТелаЗапросаЗавершение",
		ЭтотОбъект,
		Новый Структура("ТаблицаФормы, ИмяПоля", Элемент.Родитель, "Ключ")
	);
	
	ОткрытьФорму(
		"Обработка.КонсольКлиентаHTTP.Форма.РедакторТекстовогоПоля",
		Новый Структура("Текст, ЗаголовокФормы", ТекущиеДанные.Ключ, "Ключ поля HTML-формы"),
		ЭтотОбъект, , , ,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
КонецПроцедуры

&НаКлиенте
Процедура ДанныеHTMLФормыЗначениеОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	Оповещение = Новый ОписаниеОповещения(
		"РедакторПоляТелаЗапросаЗавершение",
		ЭтотОбъект,
		Новый Структура("ТаблицаФормы, ИмяПоля", Элемент.Родитель, "Значение")
	);
	
	ОткрытьФорму(
		"Обработка.КонсольКлиентаHTTP.Форма.РедакторТекстовогоПоля",
		Новый Структура("Текст, ЗаголовокФормы", ТекущиеДанные.Значение, СтрШаблон("Значение поля HTML-формы ""%1""", ТекущиеДанные.Ключ)),
		ЭтотОбъект, , , ,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
КонецПроцедуры
#КонецОбласти
#КонецОбласти

#Область ОТВЕТ
#Область ОбработчикиКомандФормы
&НаКлиенте
Процедура ПопробоватьОтобразитьКартинку(Команда)
	Если НЕ ЗначениеЗаполнено(ДанныеТелаОтвета) Тогда
		Возврат;
	КонецЕсли;
	
	ОтветКартинка = ПоместитьВоВременноеХранилище(Новый Картинка(ДанныеТелаОтвета), Новый УникальныйИдентификатор);
	Элементы.ОтветКартинка.Видимость = Истина;
	Элементы.ГруппаОтветНеКартинка.Видимость = Ложь;
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗаголовкиОтвета
&НаКлиенте
Процедура ЗаголовкиОтветаЗначениеОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	Оповещение = Новый ОписаниеОповещения("РедакторЗначенияЗаголовкаОтветаЗавершение", ЭтотОбъект);
	
	ОткрытьФорму(
		"Обработка.КонсольКлиентаHTTP.Форма.РедакторТекстовогоПоля",
		Новый Структура("Текст, ЗаголовокФормы", ТекущиеДанные.Значение, "Заголовок " + ТекущиеДанные.Ключ),
		ЭтотОбъект, , , ,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
КонецПроцедуры
#КонецОбласти
#КонецОбласти
#КонецОбласти

#Область НАСТРОЙКИ
#Область ОбработчикиСобытийЭлементовШапкиФормы
&НаКлиенте
Процедура ДекорацияЗаголовокКонтекстВыполненияНастройкиНажатие(Элемент)
	ИзменитьКонтекстВыполненияЗапроса();
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияКонтекстВыполненияНастройкиНажатие(Элемент)
	ИзменитьКонтекстВыполненияЗапроса();
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьСессиюПриИзменении(Элемент)
	Элементы.ГруппаНастройкиСессии.Доступность = ИспользоватьСессию;
	
	ПоддержкаCookieПриИзменении(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ПоддержкаCookieПриИзменении(Элемент)
	Элементы.ОткрытьCookies.Доступность = (ИспользоватьСессию И ПоддержкаCookie);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПроксиПриИзменении(Элемент)
	Элементы.СерверПрокси.Доступность = ИспользоватьПрокси;
	Элементы.ПортПрокси.Доступность = ИспользоватьПрокси;
	Элементы.ПользовательПрокси.Доступность = ИспользоватьПрокси;
	Элементы.ГруппаПарольПрокси.Доступность = ИспользоватьПрокси;
	Элементы.ИспользоватьАутентификациюОСПрокси.Доступность = ИспользоватьПрокси;
	Элементы.НеИспользоватьПроксиДляЛокальныхАдресов.Доступность = ИспользоватьПрокси;
КонецПроцедуры
#КонецОбласти
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
&НаКлиенте
Асинх Функция РезультатВыполненногоЗапроса(ПараметрыЗапроса, ДополнительныеПараметры)
	фРезультат = Новый Структура("Ответ, ДополнительныеПараметры");
	
	Схемы = Элементы.Схема.СписокВыбора;
	Если Схема = Схемы[0].Значение Тогда // GET
		фРезультат.Ответ = ?(
			ВыполнятьНаСервере,
			ПолучитьНаСервере(ИдентификаторРесурса, ПараметрыЗапроса, ДополнительныеПараметры),
			Ждать ПолучитьНаКлиенте(ПараметрыЗапроса, ДополнительныеПараметры)
		);
	ИначеЕсли Схема = Схемы[1].Значение Тогда // POST
		фРезультат.Ответ = Ждать ОтветВыполненногоЗапросаPOST(ПараметрыЗапроса, ДополнительныеПараметры); 
	ИначеЕсли Схема = Схемы[2].Значение Тогда // PUT
		фРезультат.Ответ = Ждать ОтветВыполненногоЗапросаPUT(ПараметрыЗапроса, ДополнительныеПараметры);
	ИначеЕсли Схема = Схемы[3].Значение Тогда // DELETE
		ТипыТелаЗапроса = Элементы.ТипТелаЗапроса.СписокВыбора;
		ТелоЗапроса = ?(
			ТипТелаЗапроса = ТипыТелаЗапроса[3].Значение, // raw
			ТелоЗапросаТекст,
			""
		);
		фРезультат.Ответ = ?(
			ВыполнятьНаСервере,
			УдалитьНаСервере(ИдентификаторРесурса, ТелоЗапроса, ПараметрыЗапроса, ДополнительныеПараметры),
			Ждать УдалитьНаКлиенте(ТелоЗапроса, ПараметрыЗапроса, ДополнительныеПараметры)
		);
	ИначеЕсли Схема = Схемы[4].Значение Тогда // HEAD
		фРезультат.Ответ = ?(
			ВыполнятьНаСервере,
			ПолучитьЗаголовкиНаСервере(ИдентификаторРесурса, ПараметрыЗапроса, ДополнительныеПараметры),
			Ждать ПолучитьЗаголовкиНаКлиенте(ПараметрыЗапроса, ДополнительныеПараметры)
		);
	ИначеЕсли Схема = Схемы[5].Значение Тогда // PATCH
		фРезультат.Ответ = Ждать ОтветВыполненногоЗапросаPATCH(ПараметрыЗапроса, ДополнительныеПараметры);
	Иначе
		ВызватьИсключение "Неизвестная схема запроса";
	КонецЕсли;
	
	фРезультат.ДополнительныеПараметры = ДополнительныеПараметры;
	
	Возврат фРезультат;
КонецФункции

&НаКлиенте
Асинх Функция ОтветВыполненногоЗапросаPOST(ПараметрыЗапроса, ДополнительныеПараметры)
	Перем фРезультат;
	
	ТипыТелаЗапроса = Элементы.ТипТелаЗапроса.СписокВыбора;
	Если ТипТелаЗапроса = ТипыТелаЗапроса[0].Значение Тогда // none
		фРезультат = ?(
			ВыполнятьНаСервере,
			ОтправитьТекстНаСервере(ИдентификаторРесурса, "", ПараметрыЗапроса, ДополнительныеПараметры),
			Ждать ОтправитьТекстНаКлиенте("", ПараметрыЗапроса, ДополнительныеПараметры)
		);
	ИначеЕсли ТипТелаЗапроса = ТипыТелаЗапроса[1].Значение Тогда // form-data
		фРезультат = ?(
			ВыполнятьНаСервере,
			ОтправитьДанныеФормыНаСервере(ПараметрыЗапроса, ДополнительныеПараметры),
			Ждать ОтправитьДанныеФормыНаКлиенте(ПараметрыЗапроса, ДополнительныеПараметры)
		);
	ИначеЕсли ТипТелаЗапроса = ТипыТелаЗапроса[2].Значение Тогда // x-www-form-urlencoded
		фРезультат = ?(
			ВыполнятьНаСервере,
			ОтправитьДанныеHTMLФормыНаСервере(ИдентификаторРесурса, ДанныеHTMLФормыТелаЗапроса(), ПараметрыЗапроса, ДополнительныеПараметры),
			Ждать ОтправитьДанныеHTMLФормыНаКлиенте(ДанныеHTMLФормыТелаЗапроса(), ПараметрыЗапроса, ДополнительныеПараметры)
		);
	ИначеЕсли ТипТелаЗапроса = ТипыТелаЗапроса[3].Значение Тогда // raw
		фРезультат = ?(
			ВыполнятьНаСервере,
			ОтправитьТекстНаСервере(ИдентификаторРесурса, ТелоЗапросаТекст, ПараметрыЗапроса, ДополнительныеПараметры),
			Ждать ОтправитьТекстНаКлиенте(ТелоЗапросаТекст, ПараметрыЗапроса, ДополнительныеПараметры)
		);
	ИначеЕсли ТипТелаЗапроса = ТипыТелаЗапроса[4].Значение Тогда // binary
		фРезультат = ?(
			ВыполнятьНаСервере,
			ОтправитьФайлНаСервере(ИдентификаторРесурса, ТелоЗапросаФайл, ПараметрыЗапроса, ДополнительныеПараметры),
			Ждать ОтправитьФайлНаКлиенте(ПараметрыЗапроса, ДополнительныеПараметры)
		);
	Иначе 
		ВызватьИсключение СтрШаблон("Тип тела запроса %1 не поддерживается для %2", ТипТелаЗапроса, Схема);
	КонецЕсли;
	
	Возврат фРезультат;
КонецФункции

&НаКлиенте
Асинх Функция ОтветВыполненногоЗапросаPUT(ПараметрыЗапроса, ДополнительныеПараметры)
	Перем фРезультат;
	
	ТипыТелаЗапроса = Элементы.ТипТелаЗапроса.СписокВыбора;
	Если ТипТелаЗапроса = ТипыТелаЗапроса[0].Значение Тогда // none
		фРезультат = ?(
			ВыполнятьНаСервере,
			ЗаписатьТекстНаСервере(ИдентификаторРесурса, "", ПараметрыЗапроса, ДополнительныеПараметры),
			Ждать ЗаписатьТекстНаКлиенте("", ПараметрыЗапроса, ДополнительныеПараметры)
		);
	ИначеЕсли ТипТелаЗапроса = ТипыТелаЗапроса[3].Значение Тогда // raw
		фРезультат = ?(
			ВыполнятьНаСервере,
			ЗаписатьТекстНаСервере(ИдентификаторРесурса, ТелоЗапросаТекст, ПараметрыЗапроса, ДополнительныеПараметры),
			Ждать ЗаписатьТекстНаКлиенте(ТелоЗапросаТекст, ПараметрыЗапроса, ДополнительныеПараметры)
		);
	ИначеЕсли ТипТелаЗапроса = ТипыТелаЗапроса[4].Значение Тогда // binary
		фРезультат = ?(
			ВыполнятьНаСервере,
			ЗаписатьФайлНаСервере(ИдентификаторРесурса, ТелоЗапросаФайл, ПараметрыЗапроса, ДополнительныеПараметры),
			Ждать ЗаписатьФайлНаКлиенте(ПараметрыЗапроса, ДополнительныеПараметры)
		);
	Иначе 
		ВызватьИсключение СтрШаблон("Тип тела запроса %1 не поддерживается для %2", ТипТелаЗапроса, Схема);
	КонецЕсли;
	
	Возврат фРезультат;
КонецФункции

&НаКлиенте
Асинх Функция ОтветВыполненногоЗапросаPATCH(ПараметрыЗапроса, ДополнительныеПараметры)
	Перем фРезультат;
	
	ТипыТелаЗапроса = Элементы.ТипТелаЗапроса.СписокВыбора;
	Если ТипТелаЗапроса = ТипыТелаЗапроса[0].Значение Тогда // none
		фРезультат = ?(
			ВыполнятьНаСервере,
			ИзменитьТекстНаСервере(ИдентификаторРесурса, "", ПараметрыЗапроса, ДополнительныеПараметры),
			Ждать ИзменитьТекстНаКлиенте("", ПараметрыЗапроса, ДополнительныеПараметры)
		);
	ИначеЕсли ТипТелаЗапроса = ТипыТелаЗапроса[3].Значение Тогда // raw
		фРезультат = ?(
			ВыполнятьНаСервере,
			ИзменитьТекстНаСервере(ИдентификаторРесурса, ТелоЗапросаТекст, ПараметрыЗапроса, ДополнительныеПараметры),
			Ждать ИзменитьТекстНаКлиенте(ТелоЗапросаТекст, ПараметрыЗапроса, ДополнительныеПараметры)
		);
	ИначеЕсли ТипТелаЗапроса = ТипыТелаЗапроса[4].Значение Тогда // binary
		фРезультат = ?(
			ВыполнятьНаСервере,
			ИзменитьФайлНаСервере(ИдентификаторРесурса, ТелоЗапросаФайл, ПараметрыЗапроса, ДополнительныеПараметры),
			Ждать ИзменитьФайлНаКлиенте(ПараметрыЗапроса, ДополнительныеПараметры)
		);
	Иначе 
		ВызватьИсключение СтрШаблон("Тип тела запроса %1 не поддерживается для %2", ТипТелаЗапроса, Схема);
	КонецЕсли;
	
	Возврат фРезультат;
КонецФункции

&НаКлиенте
Асинх Функция ПолучитьНаКлиенте(ПараметрыЗапроса, ДополнительныеПараметры)
	Возврат Ждать КлиентHTTPКлиентСервер.Получить(ИдентификаторРесурса, ПараметрыЗапроса, ДополнительныеПараметры);
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьНаСервере(Знач URI, Знач ПараметрыЗапроса, ДополнительныеПараметры)
	Возврат КлиентHTTPКлиентСервер.Получить(URI, ПараметрыЗапроса, ДополнительныеПараметры);
КонецФункции

&НаКлиенте
Асинх Функция ПолучитьЗаголовкиНаКлиенте(ПараметрыЗапроса, ДополнительныеПараметры)
	Возврат Ждать КлиентHTTPКлиентСервер.ПолучитьЗаголовки(ИдентификаторРесурса, ПараметрыЗапроса, ДополнительныеПараметры);
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЗаголовкиНаСервере(Знач URI, Знач ПараметрыЗапроса, ДополнительныеПараметры)
	Возврат КлиентHTTPКлиентСервер.ПолучитьЗаголовки(URI, ПараметрыЗапроса, ДополнительныеПараметры);
КонецФункции

&НаКлиенте
Асинх Функция ОтправитьТекстНаКлиенте(Данные, ПараметрыЗапроса, ДополнительныеПараметры)
	Возврат Ждать КлиентHTTPКлиентСервер.ОтправитьТекст(ИдентификаторРесурса, Данные, ДополнительныеПараметры, ПараметрыЗапроса);
КонецФункции

&НаСервереБезКонтекста
Функция ОтправитьТекстНаСервере(Знач URI, Знач Данные, Знач ПараметрыЗапроса, ДополнительныеПараметры)
	Возврат КлиентHTTPКлиентСервер.ОтправитьТекст(URI, Данные, ДополнительныеПараметры, ПараметрыЗапроса);
КонецФункции

&НаКлиенте
Асинх Функция ОтправитьДанныеФормыНаКлиенте(ПараметрыЗапроса, ДополнительныеПараметры)
	Возврат Ждать КлиентHTTPКлиентСервер.ОтправитьДанныеФормы(
		ИдентификаторРесурса,
		Ждать ДанныеФормыТелаЗапроса(), 
		ПараметрыОтправкиДанныхФормыНаКлиенте(ДополнительныеПараметры),
		ПараметрыЗапроса
	);
КонецФункции

&НаСервере
Функция ОтправитьДанныеФормыНаСервере(Знач ПараметрыЗапроса, ДополнительныеПараметры)
	Возврат КлиентHTTPКлиентСервер.ОтправитьДанныеФормы(
		ИдентификаторРесурса,
		ДанныеФормыТелаЗапросаНаСервере(), 
		ПараметрыОтправкиДанныхФормыНаСервере(ДополнительныеПараметры, Разделитель),
		ПараметрыЗапроса
	);
КонецФункции

&НаКлиенте
Асинх Функция ОтправитьДанныеHTMLФормыНаКлиенте(Данные, ПараметрыЗапроса, ДополнительныеПараметры)
	Возврат Ждать КлиентHTTPКлиентСервер.ОтправитьДанныеHTMLФормы(ИдентификаторРесурса, Данные, ДополнительныеПараметры, ПараметрыЗапроса);
КонецФункции

&НаСервереБезКонтекста
Функция ОтправитьДанныеHTMLФормыНаСервере(Знач URI, Знач Данные, Знач ПараметрыЗапроса, ДополнительныеПараметры)
	Возврат КлиентHTTPКлиентСервер.ОтправитьДанныеHTMLФормы(URI, Данные, ДополнительныеПараметры, ПараметрыЗапроса);
КонецФункции

&НаКлиенте
Асинх Функция ОтправитьФайлНаКлиенте(ПараметрыЗапроса, ДополнительныеПараметры)
	Возврат Ждать КлиентHTTPКлиентСервер.ОтправитьФайл(ИдентификаторРесурса, Новый Файл(ТелоЗапросаФайл), ДополнительныеПараметры, ПараметрыЗапроса);
КонецФункции

&НаСервереБезКонтекста
Функция ОтправитьФайлНаСервере(Знач URI, Знач Данные, Знач ПараметрыЗапроса, ДополнительныеПараметры)
	Возврат КлиентHTTPКлиентСервер.ОтправитьФайл(URI, Новый Файл(Данные), ДополнительныеПараметры, ПараметрыЗапроса);
КонецФункции

&НаКлиенте
Асинх Функция ЗаписатьТекстНаКлиенте(Данные, ПараметрыЗапроса, ДополнительныеПараметры)
	Возврат Ждать КлиентHTTPКлиентСервер.ЗаписатьТекст(ИдентификаторРесурса, Данные, ДополнительныеПараметры, ПараметрыЗапроса);
КонецФункции

&НаСервереБезКонтекста
Функция ЗаписатьТекстНаСервере(Знач URI, Знач Данные, Знач ПараметрыЗапроса, ДополнительныеПараметры)
	Возврат КлиентHTTPКлиентСервер.ЗаписатьТекст(URI, Данные, ДополнительныеПараметры, ПараметрыЗапроса);
КонецФункции

&НаКлиенте
Асинх Функция ЗаписатьФайлНаКлиенте(ПараметрыЗапроса, ДополнительныеПараметры)
	Возврат Ждать КлиентHTTPКлиентСервер.ЗаписатьФайл(ИдентификаторРесурса, Новый Файл(ТелоЗапросаФайл), ДополнительныеПараметры, ПараметрыЗапроса);
КонецФункции

&НаСервереБезКонтекста
Функция ЗаписатьФайлНаСервере(Знач URI, Знач Данные, Знач ПараметрыЗапроса, ДополнительныеПараметры)
	Возврат КлиентHTTPКлиентСервер.ЗаписатьФайл(URI, Новый Файл(Данные), ДополнительныеПараметры, ПараметрыЗапроса);
КонецФункции

&НаКлиенте
Асинх Функция ИзменитьТекстНаКлиенте(Данные, ПараметрыЗапроса, ДополнительныеПараметры)
	Возврат Ждать КлиентHTTPКлиентСервер.ИзменитьТекст(ИдентификаторРесурса, Данные, ДополнительныеПараметры, ПараметрыЗапроса);
КонецФункции

&НаСервереБезКонтекста
Функция ИзменитьТекстНаСервере(Знач URI, Знач Данные, Знач ПараметрыЗапроса, ДополнительныеПараметры)
	Возврат КлиентHTTPКлиентСервер.ИзменитьТекст(URI, Данные, ДополнительныеПараметры, ПараметрыЗапроса);
КонецФункции

&НаКлиенте
Асинх Функция ИзменитьФайлНаКлиенте(ПараметрыЗапроса, ДополнительныеПараметры)
	Возврат Ждать КлиентHTTPКлиентСервер.ИзменитьФайл(ИдентификаторРесурса, Новый Файл(ТелоЗапросаФайл), ДополнительныеПараметры, ПараметрыЗапроса);
КонецФункции

&НаСервереБезКонтекста
Функция ИзменитьФайлНаСервере(Знач URI, Знач Данные, Знач ПараметрыЗапроса, ДополнительныеПараметры)
	Возврат КлиентHTTPКлиентСервер.ИзменитьФайл(URI, Новый Файл(Данные), ДополнительныеПараметры, ПараметрыЗапроса);
КонецФункции

&НаКлиенте
Асинх Функция УдалитьНаКлиенте(ТелоЗапроса, ПараметрыЗапроса, ДополнительныеПараметры)
	Возврат Ждать КлиентHTTPКлиентСервер.Удалить(ИдентификаторРесурса, ТелоЗапроса, ДополнительныеПараметры, ПараметрыЗапроса);
КонецФункции

&НаСервереБезКонтекста
Функция УдалитьНаСервере(Знач URI, Знач ТелоЗапроса, Знач ПараметрыЗапроса, ДополнительныеПараметры)
	Возврат КлиентHTTPКлиентСервер.Удалить(URI, ТелоЗапроса, ДополнительныеПараметры, ПараметрыЗапроса);
КонецФункции

&НаКлиенте
Функция ДополнительныеПараметрыЗапроса()
	фРезультат = КлиентHTTPКлиентСервер.НовыеДополнительныеПараметры();
	
	УстановитьЗаголовкиЗапроса(фРезультат);
	
	ТипАутентификацииСписокВыбора = Элементы.ТипАутентификации.СписокВыбора;
	Если ТипАутентификации = ТипАутентификацииСписокВыбора[1].Значение Тогда // Basic
		КлиентHTTPКлиентСервер.УстановитьBasicАвторизацию(фРезультат, ПользовательАутентификации, ПарольАутентификации);
	ИначеЕсли ТипАутентификации = ТипАутентификацииСписокВыбора[2].Значение Тогда // NTLM
		КлиентHTTPКлиентСервер.УстановитьNTLMАвторизацию(фРезультат, ПользовательАутентификации, ПарольАутентификации);
	ИначеЕсли ТипАутентификации = ТипАутентификацииСписокВыбора[3].Значение Тогда // Digest
		КлиентHTTPКлиентСервер.УстановитьDigestАвторизацию(фРезультат, ПользовательАутентификации, ПарольАутентификации);
	ИначеЕсли ТипАутентификации = ТипАутентификацииСписокВыбора[4].Значение Тогда // Bearer
		КлиентHTTPКлиентСервер.УстановитьBearerАвторизацию(фРезультат, ТокенАутентификации);
	КонецЕсли;
	
	Если ИспользоватьПрокси Тогда
		Если ПустаяСтрока(СерверПрокси) Тогда
			Элементы.Основная.ТекущаяСтраница = Элементы.СтраницаНастройки;
			СообщитьПользователю("Прокси сервер должен быть указан");
			ВызватьИсключение "Неправильные настройки";
		КонецЕсли;
		
		КлиентHTTPКлиентСервер.ИспользоватьПрокси(
			фРезультат,
			СерверПрокси,
			ПортПрокси,
			ПользовательПрокси,
			ПарольПрокси,
			ИспользоватьАутентификациюОСПрокси,
			,
			НеИспользоватьПроксиДляЛокальныхАдресов
		);
	КонецЕсли;
	
	Если ИспользоватьСессию Тогда
		КлиентHTTPКлиентСервер
			.ИспользоватьСессию(фРезультат)
			.УстановитьПорогПеренаправлений(фРезультат, ПорогПеренаправлений);
		
		Если ПоддержкаCookie Тогда
			КлиентHTTPКлиентСервер.СкопироватьПеченье(фРезультат, Дополнительно);
		КонецЕсли;
	КонецЕсли;
	
	Возврат фРезультат;
КонецФункции

&НаКлиенте
Процедура УстановитьЗаголовкиЗапроса(Знач ДополнительныеПараметры)
	Для Каждого Стр Из ЗаголовкиЗапроса Цикл
		Если НЕ Стр.Активно Тогда
			Продолжить;
		КонецЕсли;
		
		КлиентHTTPКлиентСервер.УстановитьЗаголовок(ДополнительныеПараметры, Стр.Ключ, Стр.Значение);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Асинх Функция ДанныеФормыТелаЗапроса()
	фРезультат = КлиентHTTPКлиентСервер.НовыеПоляФормы();
	ТипыДанныхФормы = Элементы.ТелоЗапросаДанныеФормы.ПодчиненныеЭлементы.ДанныеФормыТип.СписокВыбора;
	
	Для Каждого Стр Из ТелоЗапросаДанныеФормы Цикл
		Если НЕ Стр.Активно Тогда
			Продолжить;
		КонецЕсли;
		
		Если Стр.Тип = ТипыДанныхФормы[0].Значение Тогда // Текст
			КлиентHTTPКлиентСервер.ДобавитьПолеФормыТекст(фРезультат, Стр.Ключ, Стр.Значение);
		Иначе // Файл
			Если ПустаяСтрока(Стр.Значение) Тогда
				Элементы.ГруппаРазделыЗапроса.ТекущаяСтраница = Элементы.РазделТелоЗапроса;
				Элементы.ГруппаРазделы.ТекущаяСтраница = Элементы.РазделЗапрос;
				
				ВызватьИсключение "Укажите выгружаемый файл в форме тела запроса";
			КонецЕсли;
			
			ФайлПоля = Новый Файл(Стр.Значение);
			ФайлСуществует = Ждать ФайлПоля.СуществуетАсинх();
			Если НЕ ФайлСуществует Тогда
				ВызватьИсключение СтрШаблон("Файл %1 не найден", ФайлПоля.ПолноеИмя);
			КонецЕсли;
			
			ТипMIME = КлиентHTTPСлужебный.ТипMIMEРасширенияФайла(ФайлПоля.Расширение);
			
			КлиентHTTPКлиентСервер.ДобавитьПолеФормыФайл(фРезультат, Стр.Ключ, ФайлПоля, ФайлПоля.Имя, ТипMIME);
		КонецЕсли;
	КонецЦикла;
	
	Возврат фРезультат;
КонецФункции

&НаСервере
Функция ДанныеФормыТелаЗапросаНаСервере()
	фРезультат = КлиентHTTPКлиентСервер.НовыеПоляФормы();
	ТипыДанныхФормы = Элементы.ТелоЗапросаДанныеФормы.ПодчиненныеЭлементы.ДанныеФормыТип.СписокВыбора;
	
	Для Каждого Стр Из ТелоЗапросаДанныеФормы Цикл
		Если НЕ Стр.Активно Тогда
			Продолжить;
		КонецЕсли;
		
		Если Стр.Тип = ТипыДанныхФормы[0].Значение Тогда // Текст
			КлиентHTTPКлиентСервер.ДобавитьПолеФормыТекст(фРезультат, Стр.Ключ, Стр.Значение);
		Иначе // Файл
			Если ПустаяСтрока(Стр.Значение) Тогда
				Элементы.ГруппаРазделыЗапроса.ТекущаяСтраница = Элементы.РазделТелоЗапроса;
				Элементы.ГруппаРазделы.ТекущаяСтраница = Элементы.РазделЗапрос;
				
				ВызватьИсключение "Укажите выгружаемый файл в форме тела запроса";
			КонецЕсли;
			
			ФайлПоля = Новый Файл(Стр.Значение);
			Если НЕ ФайлПоля.Существует() Тогда
				Продолжить;
			КонецЕсли;
			
			ТипMIME = КлиентHTTPСлужебный.ТипMIMEРасширенияФайла(ФайлПоля.Расширение);
			
			КлиентHTTPКлиентСервер.ДобавитьПолеФормыФайл(фРезультат, Стр.Ключ, ФайлПоля, ФайлПоля.Имя, ТипMIME);
		КонецЕсли;
	КонецЦикла;
	
	Возврат фРезультат;
КонецФункции

&НаКлиенте
Функция ДанныеHTMLФормыТелаЗапроса()
	фРезультат = КлиентHTTPКлиентСервер.НовыеПоляФормы();
	
	Для Каждого Стр Из ТелоЗапросаДанныеHTMLФормы Цикл
		Если НЕ Стр.Активно Тогда
			Продолжить;
		КонецЕсли;
		
		КлиентHTTPКлиентСервер.ДобавитьПолеHTMLФормы(фРезультат, Стр.Ключ, Стр.Значение);
	КонецЦикла;
	
	Возврат фРезультат;
КонецФункции

&НаКлиенте
Процедура ОбработатьОтвет(Знач Ответ)
	ФроматированиеВремениВыполненияЗапроса();
	ОтобразитьКодСостоянияСервера(Ответ.КодСостояния);
	
	ДанныеТелаОтвета = Ответ.Тело;
	ТипMIMEОтвета = КлиентHTTPКлиентСервер.ТипMIMEИзЗаголовков(Ответ.Заголовки);
	
	ОтобразитьРазмерТелаОтвета();
	
	ЗаголовкиОтвета.Очистить();
	Для Каждого КЗ Из Ответ.Заголовки Цикл
		ЗаполнитьЗначенияСвойств(ЗаголовкиОтвета.Добавить(), КЗ);
	КонецЦикла;
	ЗаголовкиОтвета.Сортировать("Ключ");
	
	ИмяФайлаТела = Ответ.ИмяФайлаТела;
	КодировкаТелаОтвета = КлиентHTTPКлиентСервер.КодировкаИзЗаголовков(Ответ.Заголовки);
	
	ОтветHTML = "";
	ТелоОтветаЭтоТекст = (КлиентHTTPПовтИсп.ТипыMIMEТекстовыхДанных().Получить(ТипMIMEОтвета) <> Неопределено);
	Если ТелоОтветаЭтоТекст Тогда
		ТекстТелаОтвета = ПолучитьСтрокуИзДвоичныхДанных(
			ДанныеТелаОтвета,
			?(КодировкаТелаОтвета = Неопределено, КлиентHTTPПовтИсп.КодировкаПоУмолчанию(), КодировкаТелаОтвета)
		);
		
		ОтветHTML = ТекстТелаОтвета;
	Иначе
		ТекстТелаОтвета = "двоичные данные";
	КонецЕсли;
	
	ВТелеОтветаHTML = ТипMIMEОтвета = КлиентHTTPПовтИсп.ТипMIMEHTML();
	Если ВТелеОтветаHTML Тогда
		ОтветТекстСтрока = Лев(ТекстТелаОтвета, 131072) + ?(СтрДлина(ТекстТелаОтвета) > 131072, "...", "");
		ОтветТекст.УстановитьФорматированнуюСтроку(Новый ФорматированнаяСтрока(""));
	Иначе
		ОтветТекстСтрока = "";
		ОтветТекст.УстановитьФорматированнуюСтроку(Новый ФорматированнаяСтрока(ТекстТелаОтвета));
	КонецЕсли;
	
	Элементы.ОтветТекст.Видимость = НЕ ВТелеОтветаHTML;
	Элементы.ОтветТекстСтрока.Видимость = ВТелеОтветаHTML;
	
	ВывестиТелоОтветаJSON(ТекстТелаОтвета);
	ОтобразитьКартинкуТелаОтвета(ТипMIMEОтвета);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыОтправкиДанныхФормы(Знач ДополнительныеПараметры, Знач РазделительПолей)
	фРезультат = КлиентHTTPКлиентСервер.КопияДополнительныхПараметров(ДополнительныеПараметры);
	
	КлиентHTTPКлиентСервер.УстановитьРазделительПолейФормы(фРезультат, РазделительПолей);
	
	Возврат фРезультат;
КонецФункции

&НаКлиенте
Функция ПараметрыОтправкиДанныхФормыНаКлиенте(Знач ДополнительныеПараметры)
	Возврат ПараметрыОтправкиДанныхФормы(ДополнительныеПараметры, Разделитель);
КонецФункции

&НаСервереБезКонтекста
Функция ПараметрыОтправкиДанныхФормыНаСервере(Знач ДополнительныеПараметры, Знач РазделительПолей)
	Возврат ПараметрыОтправкиДанныхФормы(ДополнительныеПараметры, РазделительПолей);
КонецФункции

&НаКлиенте
Процедура ФроматированиеВремениВыполненияЗапроса()
	Если ВремяВыполнения > 999 Тогда
		Точность = 2;
		Сдвиг = 3;
		Единицы = "с";
	Иначе
		Точность = 0;
		Сдвиг = 0;
		Единицы = "мс";
	КонецЕсли;
	
	Элементы.ВремяВыполнения.Формат = СтрШаблон("ЧДЦ=%1; ЧС=%2; ЧН='0 мс'; ЧГ=; ЧФ='Ч %3'", Точность, Сдвиг, Единицы);
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьКодСостоянияСервера(Знач КодСостоянияСервера)
	КодСостояния = КодСостоянияСервера;
	
	Если КодСостояния > 499 Тогда // серверные 5xx
		Элементы.КодСостояния.ЦветТекста = WebЦвета.Черный;
	ИначеЕсли КодСостояния > 399 Тогда // клиентские 4xx
		Элементы.КодСостояния.ЦветТекста = WebЦвета.Красный;
	ИначеЕсли КодСостояния > 299 Тогда // перенаправления 3xx
		Элементы.КодСостояния.ЦветТекста = WebЦвета.ТемноОранжевый;
	ИначеЕсли КодСостояния > 199 Тогда // успешные 2xx
		Элементы.КодСостояния.ЦветТекста = WebЦвета.ЗеленыйЛес;
	Иначе // информационные 1xx
		Элементы.КодСостояния.ЦветТекста = WebЦвета.КоролевскиГолубой;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьРазмерТелаОтвета()
	ДелительГБ = 1073741824; // 2^30
	ДелительМБ = 1048576; // 2^20
	ДелительКБ = 1024; // 2^10
	Делитель = 1;
	Точность = 2;
	Единица = "Б";
	РазмерОтвета = ДанныеТелаОтвета.Размер();
	Если РазмерОтвета >= ДелительГБ Тогда
		Делитель = ДелительГБ;
		Единица = "ГБ";
	ИначеЕсли РазмерОтвета >= ДелительМБ Тогда
		Делитель = ДелительМБ;
		Единица = "МБ";
	ИначеЕсли РазмерОтвета >= ДелительКБ Тогда
		Делитель = ДелительКБ;
		Единица = "КБ";
	Иначе
		Точность = 0;
	КонецЕсли;
	
	Элементы.РазмерОтвета.Формат = СтрШаблон("ЧДЦ=%1; ЧН='0 Б'; ЧГ=; ЧФ='Ч %2'", Точность, Единица);
	РазмерОтвета = РазмерОтвета / Делитель;
КонецПроцедуры

&НаКлиенте
Процедура ВывестиТелоОтветаJSON(Знач Текст)
	Перем ОбъектJSON;
	
	Чтение = Новый ЧтениеJSON;
	Чтение.УстановитьСтроку(Текст);
	
	Попытка
		ОбъектJSON = ПрочитатьJSON(Чтение, Истина);
	Исключение
		Текст = Неопределено;
	КонецПопытки;
	
	Чтение.Закрыть();
	
	Если Текст = Неопределено Тогда
		Текст = "не удалось прочитать как JSON";
	Иначе
		Запись = Новый ЗаписьJSON;
		Запись.УстановитьСтроку(Новый ПараметрыЗаписиJSON(, "    ", Истина));
		ЗаписатьJSON(Запись, ОбъектJSON);
		Текст = Запись.Закрыть();
	КонецЕсли;
	
	ОтветJSON.УстановитьФорматированнуюСтроку(Новый ФорматированнаяСтрока(Текст));
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьКартинкуТелаОтвета(Знач ТипMIME)
	Если ТипыMIMEКартинок().Получить(ТипMIME) = Неопределено Тогда
		Элементы.ДекорацияНеКартинкаContentType.Заголовок = ТипMIME;
		Элементы.ОтветКартинка.Видимость = Ложь;
		Элементы.ГруппаОтветНеКартинка.Видимость = Истина;
		
		Возврат;
	КонецЕсли;
	
	ПопробоватьОтобразитьКартинку(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьКонтекстВыполненияЗапроса()
	Элементы.ТелоЗапросаФайл.КнопкаВыбора = ВыполнятьНаСервере;
	Элементы.ДанныеФормыЗначение.КнопкаВыбора = ВыполнятьНаСервере;
	Элементы.ДанныеФормыЗначение.КнопкаОткрытия = НЕ ВыполнятьНаСервере;
	ВыполнятьНаСервере = НЕ ВыполнятьНаСервере;
	ЗаголовокКонтекстаВыполнения = ?(
		ВыполнятьНаСервере,
		"на сервере",
		"на клиенте"
	);
	Элементы.ДекорацияКонтекстВыполнения.Заголовок = ЗаголовокКонтекстаВыполнения;
	Элементы.ДекорацияКонтекстВыполненияНастройки.Заголовок = ЗаголовокКонтекстаВыполнения;
КонецПроцедуры

&НаКлиенте
Функция ПараметрыИдентификатораСПорядком(Знач ИдентификаторРесурса, Знач ПозицияНачала)
	фРезультат = Новый Структура("Параметры, Порядок", Новый Соответствие, Новый Массив);
	
	ПараметрыСтрока = ?(
		ПозицияНачала = 0,
		"",
		Сред(ИдентификаторРесурса, ПозицияНачала + 1)
	);
	
	ПараметрыИдентификатора = СтрРазделить(ПараметрыСтрока, "&", Ложь);
	Для Каждого Параметр Из ПараметрыИдентификатора Цикл
		ПозицияРазделителя = СтрНайти(Параметр, "=");
		Если ПозицияРазделителя = 0 Тогда
			ПозицияРазделителя = СтрДлина(Параметр) + 1;
		КонецЕсли;
		
		ИмяПараметра = Лев(Параметр, ПозицияРазделителя - 1);
		Если ПустаяСтрока(ИмяПараметра) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗначениеПараметра = Прав(Параметр, СтрДлина(Параметр) - ПозицияРазделителя);
		
		ЗначенияПараметра = фРезультат.Параметры.Получить(ИмяПараметра);
		Если ЗначенияПараметра = Неопределено Тогда
			ЗначенияПараметра = Новый Соответствие;
			фРезультат.Параметры.Вставить(ИмяПараметра, ЗначенияПараметра);
			Добавлять = Истина;
		Иначе
			Добавлять = (ЗначенияПараметра.Получить(ЗначениеПараметра) = Неопределено);
		КонецЕсли;
		
		Если Добавлять Тогда
			ЗначенияПараметра.Вставить(ЗначениеПараметра, Истина);
			фРезультат.Порядок.Добавить(Новый Структура("Ключ, Значение", ИмяПараметра, ЗначениеПараметра));
		КонецЕсли;
	КонецЦикла;
	
	Возврат фРезультат;
КонецФункции

&НаКлиенте
Процедура УдалитьСтрокиОтсутствующихПараметров(ЗначенияПараметров)
	СтрокиНаУдаление = Новый Массив;
	
	Для Каждого Стр Из ПараметрыЗапроса Цикл
		ЗначенияПараметра = ЗначенияПараметров.Параметры.Получить(Стр.Ключ);
		Если ЗначенияПараметра = Неопределено
			 ИЛИ ЗначенияПараметра.Получить(Стр.Значение) = Неопределено Тогда
			Если Стр.Активно Тогда
				СтрокиНаУдаление.Добавить(Стр);
			КонецЕсли;
		Иначе
			Стр.Активно = Истина;
			ЗначенияПараметра.Удалить(Стр.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Стр Из СтрокиНаУдаление Цикл
		ПараметрыЗапроса.Удалить(Стр);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПараметрыПоИдентификаторуРесурса()
	Если СтрНачинаетсяС(ИдентификаторРесурса, "https://") Тогда
		ПозицияНачалаПоиска = 8;
	ИначеЕсли СтрНачинаетсяС(ИдентификаторРесурса, "http://") Тогда
		ПозицияНачалаПоиска = 7;
	Иначе
		ВызватьИсключение "Не удалось разобрать URI";
	КонецЕсли;
	
	ПозицияНачалаСтрокиПараметров = СтрНайти(ИдентификаторРесурса, "?", , ПозицияНачалаПоиска);
	КоллекцияПараметров = ПараметрыИдентификатораСПорядком(ИдентификаторРесурса, ПозицияНачалаСтрокиПараметров);
	
	УдалитьСтрокиОтсутствующихПараметров(КоллекцияПараметров);
	
	Для Каждого ЗначениеПараметра Из КоллекцияПараметров.Порядок Цикл
		ЗначенияПараметра = КоллекцияПараметров.Параметры.Получить(ЗначениеПараметра.Ключ);
		Если ЗначенияПараметра = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если ЗначенияПараметра.Получить(ЗначениеПараметра.Значение) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Стр = ПараметрыЗапроса.Добавить();
		Стр.Ключ     = ЗначениеПараметра.Ключ;
		Стр.Значение = ЗначениеПараметра.Значение;
		Стр.Активно  = Истина;
	КонецЦикла;
	
	ПараметрыЗапросаПриОкончанииРедактирования(Неопределено, Неопределено, Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРежимОтображенияПароля(Знач Переключатель, Знач ПолеПароля)
	ПолеПароля.РежимПароля = Переключатель.Пометка;
	Переключатель.Пометка = НЕ Переключатель.Пометка;
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьПараметрыИдентификатораРесурса()
	ДлинаИдентификатораРесурса = СтрДлина(ИдентификаторРесурса);
	ПозицияНачалаПоиска = 7;
	
	Если СтрНачинаетсяС(ИдентификаторРесурса, "https://") Тогда
		ПозицияНачалаПоиска = 8;
	ИначеЕсли НЕ СтрНачинаетсяС(ИдентификаторРесурса, "http://") Тогда
		ВызватьИсключение "Не удалось разобрать URI";
	КонецЕсли;
	
	ПозицияНачалаСтрокиПараметров = СтрНайти(ИдентификаторРесурса, "?", , ПозицияНачалаПоиска);
	
	НовыйИдентификатор = ?(
		ПозицияНачалаСтрокиПараметров = 0,
		ИдентификаторРесурса,
		Лев(ИдентификаторРесурса, ПозицияНачалаСтрокиПараметров - 1)
	);
	
	ПараметрыИдентификатора = Новый Массив;
	Для Каждого Стр Из ПараметрыЗапроса Цикл
		Если ПустаяСтрока(Стр.Ключ) ИЛИ НЕ Стр.Активно Тогда
			Продолжить;
		КонецЕсли;
		
		ЗначениеПараметра = Новый Массив;
		ЗначениеПараметра.Добавить(Стр.Значение);
		
		// Имитация элемента соответствия
		ПараметрыИдентификатора.Добавить(Новый Структура("Ключ, Значение", Стр.Ключ, ЗначениеПараметра));
	КонецЦикла;
	
	ИдентификаторРесурса = НовыйИдентификатор + КлиентHTTPКлиентСервер.ПараметрыЗапросаСтрокой(ПараметрыИдентификатора);
КонецПроцедуры

&НаКлиенте
Функция ИсправленноеИмяЗаголовкаЗапроса(Знач Имя)
	НедопустимыеСимволы = СтрСоединить(СтрРазделить(Имя, КлиентHTTPПовтИсп.ДопустимыеСимволыИмениЗаголовка(), Ложь));
	
	Возврат СтрСоединить(СтрРазделить(Имя, НедопустимыеСимволы), "-"); // заменили все недопустимые символы на "-"
КонецФункции

&НаКлиенте
Функция КоличествоАктивныхЭлементовТаблицы(Знач Таблица)
	фРезультат = 0;
	Для Каждого Стр Из Таблица Цикл
		фРезультат = фРезультат + Стр.Активно;
	КонецЦикла;
	
	Возврат фРезультат;
КонецФункции

&НаКлиенте
Функция ЗаголовокТаблицыСАктивнымиЭлементами(Знач ОснованиеЗаголовка, Знач КоличествоАктивных)
	Возврат СтрШаблон(
		"%1%2",
		ОснованиеЗаголовка,
		?(КоличествоАктивных > 0, СтрШаблон(" (%1)", КоличествоАктивных), "")
	);
КонецФункции

&НаКлиенте
Функция МножествоПараметровЗапроса()
	фРезультат = КлиентHTTPКлиентСервер.НовыеПараметрыЗапроса();
	
	Для Каждого Стр Из ПараметрыЗапроса Цикл
		Если НЕ Стр.Активно Тогда
			Продолжить;
		КонецЕсли;
		
		КлиентHTTPКлиентСервер.ДобавитьПараметр(фРезультат, Стр.Ключ, Стр.Значение);
	КонецЦикла;
	
	Возврат фРезультат;
КонецФункции

&НаКлиенте
Процедура ЗафиксироватьВремяВыполненияЗапроса(Знач ВремяНачала)
	ВремяВыполнения = ТекущаяУниверсальнаяДатаВМиллисекундах() - ВремяНачала;
КонецПроцедуры

&НаКлиенте
Функция ТипыMIMEКартинок()
	фРезультат = Новый Соответствие;
	фРезультат.Вставить(КлиентHTTPПовтИсп.ТипMIMEJPEG(), Истина);
	фРезультат.Вставить(КлиентHTTPПовтИсп.ТипMIMEJPEG(), Истина);
	фРезультат.Вставить(КлиентHTTPПовтИсп.ТипMIMEPNG(), Истина);
	фРезультат.Вставить(КлиентHTTPПовтИсп.ТипMIMEGIF(), Истина);
	фРезультат.Вставить(КлиентHTTPПовтИсп.ТипыMIME().image.tiff, Истина);
	фРезультат.Вставить(КлиентHTTPПовтИсп.ТипыMIME().image.webp, Истина);
	фРезультат.Вставить(КлиентHTTPПовтИсп.ТипыMIME().image.bmp, Истина);
	
	Возврат фРезультат;
КонецФункции

&НаСервереБезКонтекста
Функция РаскодированныеСтроки(Знач КоллекцияСтрок)
	Возврат КлиентHTTP.РаскодированныеСтроки(КоллекцияСтрок);
КонецФункции

&НаКлиенте
Процедура СообщитьПользователю(Знач Текст)
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = Текст;
	Сообщение.Сообщить();
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДиалогВыбораФайла(Знач Оповещение, Знач Заголовок = "Выбор файла", Знач Фильтр = Неопределено)
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Заголовок                   = Заголовок;
	Диалог.ПредварительныйПросмотр     = Ложь;
	Диалог.ПроверятьСуществованиеФайла = Истина;
	Диалог.МножественныйВыбор          = Ложь;
	
	Если Фильтр <> Неопределено Тогда
		Диалог.Фильтр = Фильтр;
	КонецЕсли;
	
	Диалог.Показать(Оповещение);
КонецПроцедуры

#Область ОБРАТНЫЕ_ВЫЗОВЫ
&НаКлиенте
Процедура КонструкторURIЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторРесурса = Результат;
	
	РассчитатьПараметрыИдентификатораРесурса();
КонецПроцедуры

&НаКлиенте
Процедура РедакторCookiesЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат <> Неопределено Тогда
		ДополнительныеПараметры.Печенье = Результат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РедакторПараметраЗапросаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ПараметрыЗапроса.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДвойнойПеренос = Символы.ПС + Символы.ПС;
	Пока СтрНайти(Результат, ДвойнойПеренос) > 0 Цикл
		Результат = СтрЗаменить(Результат, ДвойнойПеренос, Символы.ПС);
	КонецЦикла;
	
	ТекущиеДанные[ДополнительныеПараметры] = СтрЗаменить(Результат, Символы.ПС, " ");
	
	РассчитатьПараметрыИдентификатораРесурса();
КонецПроцедуры

&НаКлиенте
Процедура РедакторПарольАутентификацииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПарольАутентификации = СтрЗаменить(Результат, Символы.ПС, "");
КонецПроцедуры

&НаКлиенте
Процедура РедакторТокенАутентификацииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТокенАутентификации = СтрЗаменить(Результат, Символы.ПС, "");
КонецПроцедуры

&НаКлиенте
Процедура РедакторИмениЗаголовкаЗапросаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ЗаголовкиЗапроса.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.Ключ = ИсправленноеИмяЗаголовкаЗапроса(Результат);
КонецПроцедуры

&НаКлиенте
Процедура РедакторЗначенияЗаголовкаЗапросаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ЗаголовкиЗапроса.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДвойнойПеренос = Символы.ПС + Символы.ПС;
	Пока СтрНайти(Результат, ДвойнойПеренос) > 0 Цикл
		Результат = СтрЗаменить(Результат, ДвойнойПеренос, Символы.ПС);
	КонецЦикла;
	
	ТекущиеДанные.Значение = СтрЗаменить(Результат, Символы.ПС, " ");
КонецПроцедуры

&НаКлиенте
Процедура РедакторПоляТелаЗапросаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = ДополнительныеПараметры.ТаблицаФормы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат <> Неопределено Тогда
		ТекущиеДанные[ДополнительныеПараметры.ИмяПоля] = Результат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаПоляФормыЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	Если ВыбранныеФайлы <> Неопределено Тогда
		ДополнительныеПараметры.Значение = ВыбранныеФайлы[0];
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаТелаЗапросаЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	Если ВыбранныеФайлы <> Неопределено Тогда
		ТелоЗапросаФайл = ВыбранныеФайлы[0];
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РедакторЗначенияЗаголовкаОтветаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Возврат;
КонецПроцедуры
#КонецОбласти
#КонецОбласти
