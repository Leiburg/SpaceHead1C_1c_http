
// SPDX-License-Identifier: Apache-2.0+

#Область ОписаниеПеременных
&НаКлиенте
Перем ТекущееИмяЗаголовка;

&НаКлиенте
Перем ДанныеТелаОтвета;
#КонецОбласти

#Область ОбработчикиСобытийФормы
&НаКлиенте
Процедура ПриОткрытии(Отказ)
#Если МобильноеПриложениеКлиент Тогда
	// В мобильном приложении не отображается картинка ОтправитьСообщение
	Элементы.ОткрытьКонсоль.Картинка = БиблиотекаКартинок.Избранное;
#КонецЕсли
	
	Для Каждого КЗ Из КлиентHTTPПовтИсп.РегионыAWS() Цикл
		Элементы.РегионAWS.СписокВыбора.Добавить(КЗ.Значение);
	КонецЦикла;
	
	ИспользоватьСессию = Ложь;
	ПоддержкаCookie = Ложь;
	ПорогПеренаправлений = 10;
	
	Схема = Элементы.Схема.СписокВыбора[0];
	ТипАутентификации = Элементы.ТипАутентификации.СписокВыбора[0];
	AWSРегион = Элементы.РегионAWS.СписокВыбора[0].Значение;
	ТипТелаЗапроса = Элементы.ТипТелаЗапроса.СписокВыбора[0];
	ПротоколПрокси = Элементы.ПротоколПрокси.СписокВыбора[0];
	ИдентификаторРесурса = "https://ya.ru";
	
	Дополнительно = Новый Структура("Сессия", Новый Структура("Печенье", Новый Соответствие));
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиКомандФормы
&НаКлиенте
Процедура ОткрытьКонсоль(Команда)
	Элементы.Основная.ТекущаяСтраница = Элементы.СтраницаКонсоль;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройки(Элемент)
	Элементы.Основная.ТекущаяСтраница = Элементы.СтраницаНастройки;
КонецПроцедуры

&НаКлиенте
Процедура ИмпортироватьCurl(Команда)
	Оповещение = Новый ОписаниеОповещения("РедакторКомандыCurlЗавершение", ЭтотОбъект);
	
	ОткрытьФорму(
		"Обработка.КонсольКлиентаHTTP.Форма.РедакторТекстовогоПоля",
		ПараметрыОткрытияФормыКомандыCurl(КомандаCurlЗапросаКонсоли()),
		ЭтотОбъект, , , ,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьCookies(Команда)
	Если НЕ ПоддержкаCookie Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("РедакторCookiesЗавершение", ЭтотОбъект, Дополнительно.Сессия);
	
	ОткрытьФорму(
		"Обработка.КонсольКлиентаHTTP.Форма.РедакторCookies",
		Новый Структура("Печенье", Дополнительно.Сессия.Печенье),
		ЭтотОбъект, , , ,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
КонецПроцедуры
#КонецОбласти

#Область КОНСОЛЬ
#Область ОбработчикиСобытийЭлементовШапкиФормы
&НаКлиенте
Процедура ИдентификаторРесурсаПриИзменении(Элемент)
	ЗаполнитьПараметрыПоИдентификаторуРесурса();
	РассчитатьПараметрыИдентификатораРесурса();
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияКонтекстВыполненияНажатие(Элемент)
	ИзменитьКонтекстВыполненияЗапроса();
КонецПроцедуры

&НаКлиенте
Процедура ТипАутентификацииПриИзменении(Элемент)
	ТипАутентификацииСписокВыбора = Элементы.ТипАутентификации.СписокВыбора;
	ОтображатьПользовательПароль = (
		ТипАутентификации = ТипАутентификацииСписокВыбора[1].Значение
		ИЛИ ТипАутентификации = ТипАутентификацииСписокВыбора[2].Значение
		ИЛИ ТипАутентификации = ТипАутентификацииСписокВыбора[3].Значение
	);
	ОтображатьТокен = (ТипАутентификации = ТипАутентификацииСписокВыбора[4].Значение);
	ОтображатьAWS4 = (ТипАутентификации = ТипАутентификацииСписокВыбора[5].Значение);
	ОтображатьHawk = (ТипАутентификации = ТипАутентификацииСписокВыбора[6].Значение);
	
	Элементы.ПоказатьПарольАутентификации.Пометка = Истина;
	
	ПоказатьПарольАутентификации(Неопределено);
	
	Элементы.ПользовательАутентификации.Видимость = ОтображатьПользовательПароль;
	Элементы.ГруппаПарольАутентификации.Видимость = ОтображатьПользовательПароль;
	
	Элементы.ПоказатьТокенАутентификации.Пометка = Истина;
	
	ПоказатьТокенАутентификации(Неопределено);
	
	Элементы.ГруппаТокенАутентификации.Видимость = ОтображатьТокен;
	
	Элементы.ПоказатьСекретныйКлючAWS.Пометка = Истина;
	
	ПоказатьСекретныйКлючAWS(Неопределено);
	
	Элементы.КлючДоступаAWS.Видимость = ОтображатьAWS4;
	Элементы.ГруппаСекретныйКлючAWS.Видимость = ОтображатьAWS4;
	Элементы.РегионAWS.Видимость = ОтображатьAWS4;
	Элементы.СервисAWS.Видимость = ОтображатьAWS4;
	
	Элементы.ПоказатьКлючHawk.Пометка = Истина;
	
	ПоказатьКлючHawk(Неопределено);
	
	Элементы.ИдентификаторHawk.Видимость = ОтображатьHawk;
	Элементы.ГруппаКлючHawk.Видимость = ОтображатьHawk;
	
	Элементы.ГруппаАутентификация.Заголовок = ЗаголовокГруппыСВыбраннымЭлементом("Аутентификация", ТипАутентификации <> ТипАутентификацииСписокВыбора[0].Значение);
КонецПроцедуры

&НаКлиенте
Процедура ПарольАутентификацииОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Оповещение = Новый ОписаниеОповещения("РедакторПарольАутентификацииЗавершение", ЭтотОбъект);
	
	ОткрытьФорму(
		"Обработка.КонсольКлиентаHTTP.Форма.РедакторТекстовогоПоля",
		Новый Структура("Текст", ПарольАутентификации),
		ЭтотОбъект, , , ,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
КонецПроцедуры

&НаКлиенте
Процедура ТокенАутентификацииОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Оповещение = Новый ОписаниеОповещения("РедакторТокенАутентификацииЗавершение", ЭтотОбъект);
	
	ОткрытьФорму(
		"Обработка.КонсольКлиентаHTTP.Форма.РедакторТекстовогоПоля",
		Новый Структура("Текст", ТокенАутентификации),
		ЭтотОбъект, , , ,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиКомандФормы
&НаКлиенте
Процедура КонструкторURL(Команда)
	Оповещение = Новый ОписаниеОповещения("КонструкторURIЗавершение", ЭтотОбъект);
	
	ОткрытьФорму(
		"Обработка.КонсольКлиентаHTTP.Форма.КонструкторИдентификатораРесурса",
		Новый Структура("ИдентификаторРесурса", ИдентификаторРесурса),
		ЭтотОбъект, , , ,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПарольАутентификации(Команда)
	ИзменитьРежимОтображенияПароля(Элементы.ПоказатьПарольАутентификации, Элементы.ПарольАутентификации);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьТокенАутентификации(Команда)
	ИзменитьРежимОтображенияПароля(Элементы.ПоказатьТокенАутентификации, Элементы.ТокенАутентификации);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСекретныйКлючAWS(Команда)
	ИзменитьРежимОтображенияПароля(Элементы.ПоказатьСекретныйКлючAWS, Элементы.СекретныйКлючAWS);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКлючHawk(Команда)
	ИзменитьРежимОтображенияПароля(Элементы.ПоказатьКлючHawk, Элементы.КлючHawk);
КонецПроцедуры

&НаКлиенте
Асинх Процедура ВыполнитьЗапрос(Команда)
	ПЗ = МножествоПараметровЗапроса();
	ДП = ДополнительныеПараметрыЗапроса();
	
	ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Результат = Ждать РезультатВыполненногоЗапроса(ПЗ, ДП);
	
	ЗафиксироватьВремяВыполненияЗапроса(ВремяНачала);
	ОбработатьОтвет(Результат.Ответ);
	
	Если ИспользоватьСессию И ПоддержкаCookie Тогда
		КлиентHTTPКлиентСервер.СкопироватьПеченье(Дополнительно, Результат.ДополнительныеПараметры);
	КонецЕсли;
	
	Элементы.ГруппаРазделы.ТекущаяСтраница = Элементы.РазделОтвет;
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПараметрыЗапроса
&НаКлиенте
Процедура ПараметрыЗапросаПриИзменении(Элемент)
	РассчитатьПараметрыИдентификатораРесурса();
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗапросаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И НЕ Копирование Тогда
		Элемент.ТекущиеДанные.Активно = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗапросаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	КоличествоАктивных = КоличествоАктивныхЭлементовТаблицы(ПараметрыЗапроса);
	Элементы.ГруппаПараметрыЗапроса.Заголовок = ЗаголовокТаблицыСАктивнымиЭлементами("Параметры", КоличествоАктивных);
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗапросаКлючОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	Оповещение = Новый ОписаниеОповещения("РедакторПараметраЗапросаЗавершение", ЭтотОбъект, "Ключ");
	
	ОткрытьФорму(
		"Обработка.КонсольКлиентаHTTP.Форма.РедакторТекстовогоПоля",
		Новый Структура("Текст", ТекущиеДанные.Ключ),
		ЭтотОбъект, , , ,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗапросаЗначениеОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	Оповещение = Новый ОписаниеОповещения("РедакторПараметраЗапросаЗавершение", ЭтотОбъект, "Значение");
	
	ОткрытьФорму(
		"Обработка.КонсольКлиентаHTTP.Форма.РедакторТекстовогоПоля",
		Новый Структура("Текст", ТекущиеДанные.Значение),
		ЭтотОбъект, , , ,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗаголовкиЗапроса
&НаКлиенте
Процедура ЗаголовкиЗапросаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И НЕ Копирование Тогда
		Элемент.ТекущиеДанные.Активно = Истина;
	КонецЕсли;
	
	ТекущееИмяЗаголовка = ?(НоваяСтрока, Неопределено, Элемент.ТекущиеДанные.Ключ);
КонецПроцедуры

&НаКлиенте
Процедура ЗаголовкиЗапросаПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если ОтменаРедактирования Тогда
		Если НЕ НоваяСтрока Тогда
			Элемент.ТекущиеДанные.Ключ = ТекущееИмяЗаголовка;
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	ИмяЗаголовка = Элемент.ТекущиеДанные.Ключ;
	Если ТекущееИмяЗаголовка <> Неопределено И ИмяЗаголовка = ТекущееИмяЗаголовка Тогда
		Возврат;
	КонецЕсли;
	
	НайденныеСтроки = ЗаголовкиЗапроса.НайтиСтроки(Новый Структура("Ключ", ИмяЗаголовка));
	ПозицияТекущейСтрокиВНайденных = НайденныеСтроки.Найти(ЗаголовкиЗапроса.НайтиПоИдентификатору(Элемент.ТекущаяСтрока));
	Если ПозицияТекущейСтрокиВНайденных <> Неопределено Тогда
		НайденныеСтроки.Удалить(ПозицияТекущейСтрокиВНайденных);
	КонецЕсли;
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		Отказ = Истина;
		
		СообщитьПользователю("Введите уникальное имя заголовка (ограничение платформы 1С)");
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаголовкиЗапросаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	КоличествоАктивных = КоличествоАктивныхЭлементовТаблицы(ЗаголовкиЗапроса);
	Элементы.ГруппаЗаголовкиЗапроса.Заголовок = ЗаголовокТаблицыСАктивнымиЭлементами("Заголовки", КоличествоАктивных);
КонецПроцедуры

&НаКлиенте
Процедура ЗаголовкиЗапросаКлючПриИзменении(Элемент)
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	ТекущиеДанные.Ключ = ИсправленноеИмяЗаголовкаЗапроса(ТекущиеДанные.Ключ);
КонецПроцедуры

&НаКлиенте
Процедура ЗаголовкиЗапросаКлючОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	Оповещение = Новый ОписаниеОповещения("РедакторИмениЗаголовкаЗапросаЗавершение", ЭтотОбъект);
	
	ОткрытьФорму(
		"Обработка.КонсольКлиентаHTTP.Форма.РедакторТекстовогоПоля",
		Новый Структура("Текст", ТекущиеДанные.Ключ),
		ЭтотОбъект, , , ,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
КонецПроцедуры

&НаКлиенте
Процедура ЗаголовкиЗапросаЗначениеОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	Оповещение = Новый ОписаниеОповещения("РедакторЗначенияЗаголовкаЗапросаЗавершение", ЭтотОбъект);
	
	ОткрытьФорму(
		"Обработка.КонсольКлиентаHTTP.Форма.РедакторТекстовогоПоля",
		Новый Структура("Текст", ТекущиеДанные.Значение),
		ЭтотОбъект, , , ,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
КонецПроцедуры
#КонецОбласти

#Область ТЕЛО_ЗАПРОСА
#Область ОбработчикиСобытийЭлементовШапкиФормы
&НаКлиенте
Процедура ТипТелаЗапросаПриИзменении(Элемент)
	ТипТелаЗапросаСписокВыбора = Элементы.ТипТелаЗапроса.СписокВыбора;
	Элементы.ГруппаТипыТелаЗапроса.Видимость = (ТипТелаЗапроса <> ТипТелаЗапросаСписокВыбора[0].Значение);
	Если ТипТелаЗапроса = ТипТелаЗапросаСписокВыбора[1].Значение Тогда // form-data
		Если ПустаяСтрока(Разделитель) Тогда
			РазделительОчистка(Неопределено, Ложь);
		КонецЕсли;
		
		Элементы.ГруппаТипыТелаЗапроса.ТекущаяСтраница = Элементы.ТипыТелаЗапросаДанныеФормы;
	ИначеЕсли ТипТелаЗапроса = ТипТелаЗапросаСписокВыбора[2].Значение Тогда // x-www-form-urlencoded
		Элементы.ГруппаТипыТелаЗапроса.ТекущаяСтраница = Элементы.ТипыТелаЗапросаДанныеHTMLФормы;
	ИначеЕсли ТипТелаЗапроса = ТипТелаЗапросаСписокВыбора[3].Значение Тогда // raw
		Элементы.ГруппаТипыТелаЗапроса.ТекущаяСтраница = Элементы.ТипыТелаЗапросаТекст;
	ИначеЕсли ТипТелаЗапроса = ТипТелаЗапросаСписокВыбора[4].Значение Тогда // binary
		Элементы.ГруппаТипыТелаЗапроса.ТекущаяСтраница = Элементы.ТипыТелаЗапросаДвоичныеДанные;
	КонецЕсли;
	
	Элементы.ГруппаТелоЗапроса.Заголовок = ЗаголовокГруппыСВыбраннымЭлементом("Тело", ТипТелаЗапроса <> ТипТелаЗапросаСписокВыбора[0].Значение);
КонецПроцедуры

&НаКлиенте
Процедура РазделительОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Разделитель = XMLСтрока(Новый УникальныйИдентификатор);
КонецПроцедуры

&НаКлиенте
Процедура ТелоЗапросаФайлНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если ВыполнятьНаСервере Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	Оповещение = Новый ОписаниеОповещения("ВыборФайлаТелаЗапросаЗавершение", ЭтотОбъект);
	
	ПоказатьДиалогВыбораФайла(Оповещение, "Выбор файла для отправки");
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТелоЗапросаДанныеФормы
&НаКлиенте
Процедура ДанныеФормыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И НЕ Копирование Тогда
		ТекущиеДанные = Элемент.ТекущиеДанные;
		ТекущиеДанные.Тип     = Элемент.ПодчиненныеЭлементы.ДанныеФормыТип.СписокВыбора[0]; // Текст
		ТекущиеДанные.Активно = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДанныеФормыТипПриИзменении(Элемент)
	Элемент.Родитель.ТекущиеДанные.Значение = "";
КонецПроцедуры

&НаКлиенте
Процедура ДанныеФормыКлючОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	Оповещение = Новый ОписаниеОповещения(
		"РедакторПоляТелаЗапросаЗавершение",
		ЭтотОбъект,
		Новый Структура("ТаблицаФормы, ИмяПоля", Элемент.Родитель, "Ключ")
	);
	
	ОткрытьФорму(
		"Обработка.КонсольКлиентаHTTP.Форма.РедакторТекстовогоПоля",
		Новый Структура("Текст, ЗаголовокФормы", ТекущиеДанные.Ключ, "Ключ поля формы"),
		ЭтотОбъект, , , ,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
КонецПроцедуры

&НаКлиенте
Процедура ДанныеФормыЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	ДанныеФормыТипСписокВыбора = Элемент.Родитель.ПодчиненныеЭлементы.ДанныеФормыТип.СписокВыбора;
	
	Если ТекущиеДанные.Тип = ДанныеФормыТипСписокВыбора[1].Значение Тогда // Файл
		Если ВыполнятьНаСервере Тогда
			Возврат;
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("ВыборФайлаПоляФормыЗавершение", ЭтотОбъект, ТекущиеДанные);
		
		ПоказатьДиалогВыбораФайла(Оповещение, "Выбор файла для отправки");
	Иначе // Текст
		Оповещение = Новый ОписаниеОповещения(
			"РедакторПоляТелаЗапросаЗавершение",
			ЭтотОбъект,
			Новый Структура("ТаблицаФормы, ИмяПоля", Элемент.Родитель, "Значение")
		);
		
		ОткрытьФорму(
			"Обработка.КонсольКлиентаHTTP.Форма.РедакторТекстовогоПоля",
			Новый Структура("Текст, ЗаголовокФормы", ТекущиеДанные.Значение, СтрШаблон("Значение поля формы ""%1""", ТекущиеДанные.Ключ)),
			ЭтотОбъект, , , ,
			Оповещение,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
		);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДанныеФормыЗначениеОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	Оповещение = Новый ОписаниеОповещения(
		"РедакторПоляТелаЗапросаЗавершение",
		ЭтотОбъект,
		Новый Структура("ТаблицаФормы, ИмяПоля", Элемент.Родитель, "Значение")
	);
	
	ОткрытьФорму(
		"Обработка.КонсольКлиентаHTTP.Форма.РедакторТекстовогоПоля",
		Новый Структура("Текст", ТекущиеДанные.Значение),
		ЭтотОбъект, , , ,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТелоЗапросаДанныеHTMLФормы
&НаКлиенте
Процедура ДанныеHTMLФормыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И НЕ Копирование Тогда
		Элемент.ТекущиеДанные.Активно = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДанныеHTMLФормыКлючОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	Оповещение = Новый ОписаниеОповещения(
		"РедакторПоляТелаЗапросаЗавершение",
		ЭтотОбъект,
		Новый Структура("ТаблицаФормы, ИмяПоля", Элемент.Родитель, "Ключ")
	);
	
	ОткрытьФорму(
		"Обработка.КонсольКлиентаHTTP.Форма.РедакторТекстовогоПоля",
		Новый Структура("Текст, ЗаголовокФормы", ТекущиеДанные.Ключ, "Ключ поля HTML-формы"),
		ЭтотОбъект, , , ,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
КонецПроцедуры

&НаКлиенте
Процедура ДанныеHTMLФормыЗначениеОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	Оповещение = Новый ОписаниеОповещения(
		"РедакторПоляТелаЗапросаЗавершение",
		ЭтотОбъект,
		Новый Структура("ТаблицаФормы, ИмяПоля", Элемент.Родитель, "Значение")
	);
	
	ОткрытьФорму(
		"Обработка.КонсольКлиентаHTTP.Форма.РедакторТекстовогоПоля",
		Новый Структура("Текст, ЗаголовокФормы", ТекущиеДанные.Значение, СтрШаблон("Значение поля HTML-формы ""%1""", ТекущиеДанные.Ключ)),
		ЭтотОбъект, , , ,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
КонецПроцедуры
#КонецОбласти
#КонецОбласти

#Область ОТВЕТ
#Область ОбработчикиКомандФормы
&НаКлиенте
Процедура ПопробоватьОтобразитьКартинку(Команда)
	Если НЕ ЗначениеЗаполнено(ДанныеТелаОтвета) Тогда
		Возврат;
	КонецЕсли;
	
	ОтветКартинка = ПоместитьВоВременноеХранилище(Новый Картинка(ДанныеТелаОтвета), Новый УникальныйИдентификатор);
	Элементы.ОтветКартинка.Видимость = Истина;
	Элементы.ГруппаОтветНеКартинка.Видимость = Ложь;
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗаголовкиОтвета
&НаКлиенте
Процедура ЗаголовкиОтветаЗначениеОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	Оповещение = Новый ОписаниеОповещения("РедакторЗначенияЗаголовкаОтветаЗавершение", ЭтотОбъект);
	
	ОткрытьФорму(
		"Обработка.КонсольКлиентаHTTP.Форма.РедакторТекстовогоПоля",
		Новый Структура("Текст, ЗаголовокФормы", ТекущиеДанные.Значение, "Заголовок " + ТекущиеДанные.Ключ),
		ЭтотОбъект, , , ,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
КонецПроцедуры
#КонецОбласти
#КонецОбласти
#КонецОбласти

#Область НАСТРОЙКИ
#Область ОбработчикиСобытийЭлементовШапкиФормы
&НаКлиенте
Процедура ДекорацияЗаголовокКонтекстВыполненияНастройкиНажатие(Элемент)
	ИзменитьКонтекстВыполненияЗапроса();
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияКонтекстВыполненияНастройкиНажатие(Элемент)
	ИзменитьКонтекстВыполненияЗапроса();
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьСессиюПриИзменении(Элемент)
	Элементы.ГруппаНастройкиСессии.Доступность = ИспользоватьСессию;
	
	ПоддержкаCookieПриИзменении(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ПоддержкаCookieПриИзменении(Элемент)
	Элементы.ОткрытьCookies.Доступность = (ИспользоватьСессию И ПоддержкаCookie);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПроксиПриИзменении(Элемент)
	Элементы.ПротоколПрокси.Доступность = ИспользоватьПрокси;
	Элементы.СерверПрокси.Доступность = ИспользоватьПрокси;
	Элементы.ПортПрокси.Доступность = ИспользоватьПрокси;
	Элементы.ПользовательПрокси.Доступность = ИспользоватьПрокси;
	Элементы.ГруппаПарольПрокси.Доступность = ИспользоватьПрокси;
	Элементы.ИспользоватьАутентификациюОСПрокси.Доступность = ИспользоватьПрокси;
	Элементы.НеИспользоватьПроксиДляЛокальныхАдресов.Доступность = ИспользоватьПрокси;
КонецПроцедуры
#КонецОбласти
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
&НаКлиенте
Асинх Функция РезультатВыполненногоЗапроса(ПараметрыЗапроса, ДополнительныеПараметры)
	фРезультат = Новый Структура("Ответ, ДополнительныеПараметры");
	
	Схемы = Элементы.Схема.СписокВыбора;
	Если Схема = Схемы[0].Значение Тогда // GET
		фРезультат.Ответ = ?(
			ВыполнятьНаСервере,
			ПолучитьНаСервере(ИдентификаторРесурса, ПараметрыЗапроса, ДополнительныеПараметры),
			Ждать ПолучитьНаКлиенте(ПараметрыЗапроса, ДополнительныеПараметры)
		);
	ИначеЕсли Схема = Схемы[1].Значение Тогда // POST
		фРезультат.Ответ = Ждать ОтветВыполненногоЗапросаPOST(ПараметрыЗапроса, ДополнительныеПараметры); 
	ИначеЕсли Схема = Схемы[2].Значение Тогда // PUT
		фРезультат.Ответ = Ждать ОтветВыполненногоЗапросаPUT(ПараметрыЗапроса, ДополнительныеПараметры);
	ИначеЕсли Схема = Схемы[3].Значение Тогда // DELETE
		ТипыТелаЗапроса = Элементы.ТипТелаЗапроса.СписокВыбора;
		ТелоЗапроса = ?(
			ТипТелаЗапроса = ТипыТелаЗапроса[3].Значение, // raw
			ТелоЗапросаТекст,
			""
		);
		фРезультат.Ответ = ?(
			ВыполнятьНаСервере,
			УдалитьНаСервере(ИдентификаторРесурса, ТелоЗапроса, ПараметрыЗапроса, ДополнительныеПараметры),
			Ждать УдалитьНаКлиенте(ТелоЗапроса, ПараметрыЗапроса, ДополнительныеПараметры)
		);
	ИначеЕсли Схема = Схемы[4].Значение Тогда // HEAD
		фРезультат.Ответ = ?(
			ВыполнятьНаСервере,
			ПолучитьЗаголовкиНаСервере(ИдентификаторРесурса, ПараметрыЗапроса, ДополнительныеПараметры),
			Ждать ПолучитьЗаголовкиНаКлиенте(ПараметрыЗапроса, ДополнительныеПараметры)
		);
	ИначеЕсли Схема = Схемы[5].Значение Тогда // PATCH
		фРезультат.Ответ = Ждать ОтветВыполненногоЗапросаPATCH(ПараметрыЗапроса, ДополнительныеПараметры);
	Иначе
		ВызватьИсключение "Неизвестная схема запроса";
	КонецЕсли;
	
	фРезультат.ДополнительныеПараметры = ДополнительныеПараметры;
	
	Возврат фРезультат;
КонецФункции

&НаКлиенте
Асинх Функция ОтветВыполненногоЗапросаPOST(ПараметрыЗапроса, ДополнительныеПараметры)
	Перем фРезультат;
	
	ТипыТелаЗапроса = Элементы.ТипТелаЗапроса.СписокВыбора;
	Если ТипТелаЗапроса = ТипыТелаЗапроса[0].Значение Тогда // none
		фРезультат = ?(
			ВыполнятьНаСервере,
			ОтправитьТекстНаСервере(ИдентификаторРесурса, "", ПараметрыЗапроса, ДополнительныеПараметры),
			Ждать ОтправитьТекстНаКлиенте("", ПараметрыЗапроса, ДополнительныеПараметры)
		);
	ИначеЕсли ТипТелаЗапроса = ТипыТелаЗапроса[1].Значение Тогда // form-data
		фРезультат = ?(
			ВыполнятьНаСервере,
			ОтправитьДанныеФормыНаСервере(ПараметрыЗапроса, ДополнительныеПараметры),
			Ждать ОтправитьДанныеФормыНаКлиенте(ПараметрыЗапроса, ДополнительныеПараметры)
		);
	ИначеЕсли ТипТелаЗапроса = ТипыТелаЗапроса[2].Значение Тогда // x-www-form-urlencoded
		фРезультат = ?(
			ВыполнятьНаСервере,
			ОтправитьДанныеHTMLФормыНаСервере(ИдентификаторРесурса, ДанныеHTMLФормыТелаЗапроса(), ПараметрыЗапроса, ДополнительныеПараметры),
			Ждать ОтправитьДанныеHTMLФормыНаКлиенте(ДанныеHTMLФормыТелаЗапроса(), ПараметрыЗапроса, ДополнительныеПараметры)
		);
	ИначеЕсли ТипТелаЗапроса = ТипыТелаЗапроса[3].Значение Тогда // raw
		фРезультат = ?(
			ВыполнятьНаСервере,
			ОтправитьТекстНаСервере(ИдентификаторРесурса, ТелоЗапросаТекст, ПараметрыЗапроса, ДополнительныеПараметры),
			Ждать ОтправитьТекстНаКлиенте(ТелоЗапросаТекст, ПараметрыЗапроса, ДополнительныеПараметры)
		);
	ИначеЕсли ТипТелаЗапроса = ТипыТелаЗапроса[4].Значение Тогда // binary
		фРезультат = ?(
			ВыполнятьНаСервере,
			ОтправитьФайлНаСервере(ИдентификаторРесурса, ТелоЗапросаФайл, ПараметрыЗапроса, ДополнительныеПараметры),
			Ждать ОтправитьФайлНаКлиенте(ПараметрыЗапроса, ДополнительныеПараметры)
		);
	Иначе 
		ВызватьИсключение СтрШаблон("Тип тела запроса %1 не поддерживается для %2", ТипТелаЗапроса, Схема);
	КонецЕсли;
	
	Возврат фРезультат;
КонецФункции

&НаКлиенте
Асинх Функция ОтветВыполненногоЗапросаPUT(ПараметрыЗапроса, ДополнительныеПараметры)
	Перем фРезультат;
	
	ТипыТелаЗапроса = Элементы.ТипТелаЗапроса.СписокВыбора;
	Если ТипТелаЗапроса = ТипыТелаЗапроса[0].Значение Тогда // none
		фРезультат = ?(
			ВыполнятьНаСервере,
			ЗаписатьТекстНаСервере(ИдентификаторРесурса, "", ПараметрыЗапроса, ДополнительныеПараметры),
			Ждать ЗаписатьТекстНаКлиенте("", ПараметрыЗапроса, ДополнительныеПараметры)
		);
	ИначеЕсли ТипТелаЗапроса = ТипыТелаЗапроса[3].Значение Тогда // raw
		фРезультат = ?(
			ВыполнятьНаСервере,
			ЗаписатьТекстНаСервере(ИдентификаторРесурса, ТелоЗапросаТекст, ПараметрыЗапроса, ДополнительныеПараметры),
			Ждать ЗаписатьТекстНаКлиенте(ТелоЗапросаТекст, ПараметрыЗапроса, ДополнительныеПараметры)
		);
	ИначеЕсли ТипТелаЗапроса = ТипыТелаЗапроса[4].Значение Тогда // binary
		фРезультат = ?(
			ВыполнятьНаСервере,
			ЗаписатьФайлНаСервере(ИдентификаторРесурса, ТелоЗапросаФайл, ПараметрыЗапроса, ДополнительныеПараметры),
			Ждать ЗаписатьФайлНаКлиенте(ПараметрыЗапроса, ДополнительныеПараметры)
		);
	Иначе 
		ВызватьИсключение СтрШаблон("Тип тела запроса %1 не поддерживается для %2", ТипТелаЗапроса, Схема);
	КонецЕсли;
	
	Возврат фРезультат;
КонецФункции

&НаКлиенте
Асинх Функция ОтветВыполненногоЗапросаPATCH(ПараметрыЗапроса, ДополнительныеПараметры)
	Перем фРезультат;
	
	ТипыТелаЗапроса = Элементы.ТипТелаЗапроса.СписокВыбора;
	Если ТипТелаЗапроса = ТипыТелаЗапроса[0].Значение Тогда // none
		фРезультат = ?(
			ВыполнятьНаСервере,
			ИзменитьТекстНаСервере(ИдентификаторРесурса, "", ПараметрыЗапроса, ДополнительныеПараметры),
			Ждать ИзменитьТекстНаКлиенте("", ПараметрыЗапроса, ДополнительныеПараметры)
		);
	ИначеЕсли ТипТелаЗапроса = ТипыТелаЗапроса[3].Значение Тогда // raw
		фРезультат = ?(
			ВыполнятьНаСервере,
			ИзменитьТекстНаСервере(ИдентификаторРесурса, ТелоЗапросаТекст, ПараметрыЗапроса, ДополнительныеПараметры),
			Ждать ИзменитьТекстНаКлиенте(ТелоЗапросаТекст, ПараметрыЗапроса, ДополнительныеПараметры)
		);
	ИначеЕсли ТипТелаЗапроса = ТипыТелаЗапроса[4].Значение Тогда // binary
		фРезультат = ?(
			ВыполнятьНаСервере,
			ИзменитьФайлНаСервере(ИдентификаторРесурса, ТелоЗапросаФайл, ПараметрыЗапроса, ДополнительныеПараметры),
			Ждать ИзменитьФайлНаКлиенте(ПараметрыЗапроса, ДополнительныеПараметры)
		);
	Иначе 
		ВызватьИсключение СтрШаблон("Тип тела запроса %1 не поддерживается для %2", ТипТелаЗапроса, Схема);
	КонецЕсли;
	
	Возврат фРезультат;
КонецФункции

&НаКлиенте
Асинх Функция ПолучитьНаКлиенте(ПараметрыЗапроса, ДополнительныеПараметры)
	Возврат Ждать КлиентHTTPКлиентСервер.Получить(ИдентификаторРесурса, ПараметрыЗапроса, ДополнительныеПараметры);
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьНаСервере(Знач URI, Знач ПараметрыЗапроса, ДополнительныеПараметры)
	Возврат КлиентHTTPКлиентСервер.Получить(URI, ПараметрыЗапроса, ДополнительныеПараметры);
КонецФункции

&НаКлиенте
Асинх Функция ПолучитьЗаголовкиНаКлиенте(ПараметрыЗапроса, ДополнительныеПараметры)
	Возврат Ждать КлиентHTTPКлиентСервер.ПолучитьЗаголовки(ИдентификаторРесурса, ПараметрыЗапроса, ДополнительныеПараметры);
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЗаголовкиНаСервере(Знач URI, Знач ПараметрыЗапроса, ДополнительныеПараметры)
	Возврат КлиентHTTPКлиентСервер.ПолучитьЗаголовки(URI, ПараметрыЗапроса, ДополнительныеПараметры);
КонецФункции

&НаКлиенте
Асинх Функция ОтправитьТекстНаКлиенте(Данные, ПараметрыЗапроса, ДополнительныеПараметры)
	Возврат Ждать КлиентHTTPКлиентСервер.ОтправитьТекст(ИдентификаторРесурса, Данные, ДополнительныеПараметры, ПараметрыЗапроса);
КонецФункции

&НаСервереБезКонтекста
Функция ОтправитьТекстНаСервере(Знач URI, Знач Данные, Знач ПараметрыЗапроса, ДополнительныеПараметры)
	Возврат КлиентHTTPКлиентСервер.ОтправитьТекст(URI, Данные, ДополнительныеПараметры, ПараметрыЗапроса);
КонецФункции

&НаКлиенте
Асинх Функция ОтправитьДанныеФормыНаКлиенте(ПараметрыЗапроса, ДополнительныеПараметры)
	Возврат Ждать КлиентHTTPКлиентСервер.ОтправитьДанныеФормы(
		ИдентификаторРесурса,
		Ждать ДанныеФормыТелаЗапроса(), 
		ПараметрыОтправкиДанныхФормыНаКлиенте(ДополнительныеПараметры),
		ПараметрыЗапроса
	);
КонецФункции

&НаСервере
Функция ОтправитьДанныеФормыНаСервере(Знач ПараметрыЗапроса, ДополнительныеПараметры)
	Возврат КлиентHTTPКлиентСервер.ОтправитьДанныеФормы(
		ИдентификаторРесурса,
		ДанныеФормыТелаЗапросаНаСервере(), 
		ПараметрыОтправкиДанныхФормыНаСервере(ДополнительныеПараметры, Разделитель),
		ПараметрыЗапроса
	);
КонецФункции

&НаКлиенте
Асинх Функция ОтправитьДанныеHTMLФормыНаКлиенте(Данные, ПараметрыЗапроса, ДополнительныеПараметры)
	Возврат Ждать КлиентHTTPКлиентСервер.ОтправитьДанныеHTMLФормы(ИдентификаторРесурса, Данные, ДополнительныеПараметры, ПараметрыЗапроса);
КонецФункции

&НаСервереБезКонтекста
Функция ОтправитьДанныеHTMLФормыНаСервере(Знач URI, Знач Данные, Знач ПараметрыЗапроса, ДополнительныеПараметры)
	Возврат КлиентHTTPКлиентСервер.ОтправитьДанныеHTMLФормы(URI, Данные, ДополнительныеПараметры, ПараметрыЗапроса);
КонецФункции

&НаКлиенте
Асинх Функция ОтправитьФайлНаКлиенте(ПараметрыЗапроса, ДополнительныеПараметры)
	Возврат Ждать КлиентHTTPКлиентСервер.ОтправитьФайл(ИдентификаторРесурса, Новый Файл(ТелоЗапросаФайл), ДополнительныеПараметры, ПараметрыЗапроса);
КонецФункции

&НаСервереБезКонтекста
Функция ОтправитьФайлНаСервере(Знач URI, Знач Данные, Знач ПараметрыЗапроса, ДополнительныеПараметры)
	Возврат КлиентHTTPКлиентСервер.ОтправитьФайл(URI, Новый Файл(Данные), ДополнительныеПараметры, ПараметрыЗапроса);
КонецФункции

&НаКлиенте
Асинх Функция ЗаписатьТекстНаКлиенте(Данные, ПараметрыЗапроса, ДополнительныеПараметры)
	Возврат Ждать КлиентHTTPКлиентСервер.ЗаписатьТекст(ИдентификаторРесурса, Данные, ДополнительныеПараметры, ПараметрыЗапроса);
КонецФункции

&НаСервереБезКонтекста
Функция ЗаписатьТекстНаСервере(Знач URI, Знач Данные, Знач ПараметрыЗапроса, ДополнительныеПараметры)
	Возврат КлиентHTTPКлиентСервер.ЗаписатьТекст(URI, Данные, ДополнительныеПараметры, ПараметрыЗапроса);
КонецФункции

&НаКлиенте
Асинх Функция ЗаписатьФайлНаКлиенте(ПараметрыЗапроса, ДополнительныеПараметры)
	Возврат Ждать КлиентHTTPКлиентСервер.ЗаписатьФайл(ИдентификаторРесурса, Новый Файл(ТелоЗапросаФайл), ДополнительныеПараметры, ПараметрыЗапроса);
КонецФункции

&НаСервереБезКонтекста
Функция ЗаписатьФайлНаСервере(Знач URI, Знач Данные, Знач ПараметрыЗапроса, ДополнительныеПараметры)
	Возврат КлиентHTTPКлиентСервер.ЗаписатьФайл(URI, Новый Файл(Данные), ДополнительныеПараметры, ПараметрыЗапроса);
КонецФункции

&НаКлиенте
Асинх Функция ИзменитьТекстНаКлиенте(Данные, ПараметрыЗапроса, ДополнительныеПараметры)
	Возврат Ждать КлиентHTTPКлиентСервер.ИзменитьТекст(ИдентификаторРесурса, Данные, ДополнительныеПараметры, ПараметрыЗапроса);
КонецФункции

&НаСервереБезКонтекста
Функция ИзменитьТекстНаСервере(Знач URI, Знач Данные, Знач ПараметрыЗапроса, ДополнительныеПараметры)
	Возврат КлиентHTTPКлиентСервер.ИзменитьТекст(URI, Данные, ДополнительныеПараметры, ПараметрыЗапроса);
КонецФункции

&НаКлиенте
Асинх Функция ИзменитьФайлНаКлиенте(ПараметрыЗапроса, ДополнительныеПараметры)
	Возврат Ждать КлиентHTTPКлиентСервер.ИзменитьФайл(ИдентификаторРесурса, Новый Файл(ТелоЗапросаФайл), ДополнительныеПараметры, ПараметрыЗапроса);
КонецФункции

&НаСервереБезКонтекста
Функция ИзменитьФайлНаСервере(Знач URI, Знач Данные, Знач ПараметрыЗапроса, ДополнительныеПараметры)
	Возврат КлиентHTTPКлиентСервер.ИзменитьФайл(URI, Новый Файл(Данные), ДополнительныеПараметры, ПараметрыЗапроса);
КонецФункции

&НаКлиенте
Асинх Функция УдалитьНаКлиенте(ТелоЗапроса, ПараметрыЗапроса, ДополнительныеПараметры)
	Возврат Ждать КлиентHTTPКлиентСервер.Удалить(ИдентификаторРесурса, ТелоЗапроса, ДополнительныеПараметры, ПараметрыЗапроса);
КонецФункции

&НаСервереБезКонтекста
Функция УдалитьНаСервере(Знач URI, Знач ТелоЗапроса, Знач ПараметрыЗапроса, ДополнительныеПараметры)
	Возврат КлиентHTTPКлиентСервер.Удалить(URI, ТелоЗапроса, ДополнительныеПараметры, ПараметрыЗапроса);
КонецФункции

&НаКлиенте
Функция ДополнительныеПараметрыЗапроса()
	фРезультат = КлиентHTTPКлиентСервер.НовыеДополнительныеПараметры();
	
	УстановитьЗаголовкиЗапроса(фРезультат);
	
	ТипАутентификацииСписокВыбора = Элементы.ТипАутентификации.СписокВыбора;
	Если ТипАутентификации = ТипАутентификацииСписокВыбора[1].Значение Тогда // Basic
		КлиентHTTPКлиентСервер.УстановитьBasicАвторизацию(фРезультат, ПользовательАутентификации, ПарольАутентификации);
	ИначеЕсли ТипАутентификации = ТипАутентификацииСписокВыбора[2].Значение Тогда // NTLM
		КлиентHTTPКлиентСервер.УстановитьNTLMАвторизацию(фРезультат, ПользовательАутентификации, ПарольАутентификации);
	ИначеЕсли ТипАутентификации = ТипАутентификацииСписокВыбора[3].Значение Тогда // Digest
		КлиентHTTPКлиентСервер.УстановитьDigestАвторизацию(фРезультат, ПользовательАутентификации, ПарольАутентификации);
	ИначеЕсли ТипАутентификации = ТипАутентификацииСписокВыбора[4].Значение Тогда // Bearer
		КлиентHTTPКлиентСервер.УстановитьBearerАвторизацию(фРезультат, ТокенАутентификации);
	ИначеЕсли ТипАутентификации = ТипАутентификацииСписокВыбора[5].Значение Тогда // AWS4-HMAC-SHA256
		КлиентHTTPКлиентСервер.УстановитьAWS4Авторизацию(фРезультат, AWSКлючДоступа, AWSСекретныйКлюч, AWSРегион, AWSСервис);
	ИначеЕсли ТипАутентификации = ТипАутентификацииСписокВыбора[6].Значение Тогда // Hawk
		КлиентHTTPКлиентСервер.УстановитьHawkАвторизацию(фРезультат, HawkИдентификатор, HawkКлюч, HawkДополнение, HawkИдентификаторПриложения, HawkДелегирование);
	КонецЕсли;
	
	Если ИспользоватьПрокси Тогда
		Если ПустаяСтрока(СерверПрокси) Тогда
			Элементы.Основная.ТекущаяСтраница = Элементы.СтраницаНастройки;
			СообщитьПользователю("Прокси сервер должен быть указан");
			ВызватьИсключение "Неправильные настройки";
		КонецЕсли;
		
		КлиентHTTPКлиентСервер.ИспользоватьПрокси(
			фРезультат,
			СерверПрокси,
			ПортПрокси,
			ПользовательПрокси,
			ПарольПрокси,
			ИспользоватьАутентификациюОСПрокси,
			,
			НеИспользоватьПроксиДляЛокальныхАдресов,
			ПротоколПрокси
		);
	КонецЕсли;
	
	Если ИспользоватьСессию Тогда
		КлиентHTTPКлиентСервер
			.ИспользоватьСессию(фРезультат)
			.УстановитьПорогПеренаправлений(фРезультат, ПорогПеренаправлений)
			.ПеренаправленияКакGET(фРезультат, ПеренаправлениеКакGET);
		
		Если ПоддержкаCookie Тогда
			КлиентHTTPКлиентСервер.СкопироватьПеченье(фРезультат, Дополнительно);
		КонецЕсли;
	КонецЕсли;
	
	Если Таймаут > 0 Тогда
		КлиентHTTPКлиентСервер.УстановитьТаймаут(фРезультат, Таймаут);
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(АгентПользователя) Тогда
		КлиентHTTPКлиентСервер.УстановитьАгентаПользователя(фРезультат, АгентПользователя);
	КонецЕсли;
	
	Возврат фРезультат;
КонецФункции

&НаКлиенте
Процедура УстановитьЗаголовкиЗапроса(Знач ДополнительныеПараметры)
	Для Каждого Стр Из ЗаголовкиЗапроса Цикл
		Если НЕ Стр.Активно Тогда
			Продолжить;
		КонецЕсли;
		
		КлиентHTTPКлиентСервер.УстановитьЗаголовок(ДополнительныеПараметры, Стр.Ключ, Стр.Значение);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Асинх Функция ДанныеФормыТелаЗапроса()
	фРезультат = КлиентHTTPКлиентСервер.НовыеПоляФормы();
	ТипыДанныхФормы = Элементы.ТелоЗапросаДанныеФормы.ПодчиненныеЭлементы.ДанныеФормыТип.СписокВыбора;
	
	Для Каждого Стр Из ТелоЗапросаДанныеФормы Цикл
		Если НЕ Стр.Активно Тогда
			Продолжить;
		КонецЕсли;
		
		Если Стр.Тип = ТипыДанныхФормы[0].Значение Тогда // Текст
			КлиентHTTPКлиентСервер.ДобавитьПолеФормыТекст(фРезультат, Стр.Ключ, Стр.Значение);
		Иначе // Файл
			Если ПустаяСтрока(Стр.Значение) Тогда
				Элементы.ГруппаРазделыЗапроса.ТекущаяСтраница = Элементы.РазделТелоЗапроса;
				Элементы.ГруппаРазделы.ТекущаяСтраница = Элементы.РазделЗапрос;
				
				ВызватьИсключение "Укажите выгружаемый файл в форме тела запроса";
			КонецЕсли;
			
			ФайлПоля = Новый Файл(Стр.Значение);
			ФайлСуществует = Ждать ФайлПоля.СуществуетАсинх();
			Если НЕ ФайлСуществует Тогда
				ВызватьИсключение СтрШаблон("Файл %1 не найден", ФайлПоля.ПолноеИмя);
			КонецЕсли;
			
			ТипMIME = КлиентHTTPСлужебный.ТипMIMEРасширенияФайла(ФайлПоля.Расширение);
			
			КлиентHTTPКлиентСервер.ДобавитьПолеФормыФайл(фРезультат, Стр.Ключ, ФайлПоля, ФайлПоля.Имя, ТипMIME);
		КонецЕсли;
	КонецЦикла;
	
	Возврат фРезультат;
КонецФункции

&НаСервере
Функция ДанныеФормыТелаЗапросаНаСервере()
	фРезультат = КлиентHTTPКлиентСервер.НовыеПоляФормы();
	ТипыДанныхФормы = Элементы.ТелоЗапросаДанныеФормы.ПодчиненныеЭлементы.ДанныеФормыТип.СписокВыбора;
	
	Для Каждого Стр Из ТелоЗапросаДанныеФормы Цикл
		Если НЕ Стр.Активно Тогда
			Продолжить;
		КонецЕсли;
		
		Если Стр.Тип = ТипыДанныхФормы[0].Значение Тогда // Текст
			КлиентHTTPКлиентСервер.ДобавитьПолеФормыТекст(фРезультат, Стр.Ключ, Стр.Значение);
		Иначе // Файл
			Если ПустаяСтрока(Стр.Значение) Тогда
				Элементы.ГруппаРазделыЗапроса.ТекущаяСтраница = Элементы.РазделТелоЗапроса;
				Элементы.ГруппаРазделы.ТекущаяСтраница = Элементы.РазделЗапрос;
				
				ВызватьИсключение "Укажите выгружаемый файл в форме тела запроса";
			КонецЕсли;
			
			ФайлПоля = Новый Файл(Стр.Значение);
			Если НЕ ФайлПоля.Существует() Тогда
				Продолжить;
			КонецЕсли;
			
			ТипMIME = КлиентHTTPСлужебный.ТипMIMEРасширенияФайла(ФайлПоля.Расширение);
			
			КлиентHTTPКлиентСервер.ДобавитьПолеФормыФайл(фРезультат, Стр.Ключ, ФайлПоля, ФайлПоля.Имя, ТипMIME);
		КонецЕсли;
	КонецЦикла;
	
	Возврат фРезультат;
КонецФункции

&НаКлиенте
Функция ДанныеHTMLФормыТелаЗапроса()
	фРезультат = КлиентHTTPКлиентСервер.НовыеПоляФормы();
	
	Для Каждого Стр Из ТелоЗапросаДанныеHTMLФормы Цикл
		Если НЕ Стр.Активно Тогда
			Продолжить;
		КонецЕсли;
		
		КлиентHTTPКлиентСервер.ДобавитьПолеHTMLФормы(фРезультат, Стр.Ключ, Стр.Значение);
	КонецЦикла;
	
	Возврат фРезультат;
КонецФункции

&НаКлиенте
Процедура ОбработатьОтвет(Знач Ответ)
	ФроматированиеВремениВыполненияЗапроса();
	ОтобразитьКодСостоянияСервера(Ответ.КодСостояния);
	
	ДанныеТелаОтвета = Ответ.Тело;
	ТипMIMEОтвета = КлиентHTTPКлиентСервер.ТипMIMEИзЗаголовков(Ответ.Заголовки);
	
	ОтобразитьРазмерТелаОтвета();
	
	ЗаголовкиОтвета.Очистить();
	Для Каждого КЗ Из Ответ.Заголовки Цикл
		ЗаполнитьЗначенияСвойств(ЗаголовкиОтвета.Добавить(), КЗ);
	КонецЦикла;
	ЗаголовкиОтвета.Сортировать("Ключ");
	
	ИмяФайлаТела = Ответ.ИмяФайлаТела;
	КодировкаТелаОтвета = КлиентHTTPКлиентСервер.КодировкаИзЗаголовков(Ответ.Заголовки);
	
	ОтветHTML = "";
	ТелоОтветаЭтоТекст = (КлиентHTTPПовтИсп.ТипыMIMEТекстовыхДанных().Получить(ТипMIMEОтвета) <> Неопределено);
	Если ТелоОтветаЭтоТекст Тогда
		ТекстТелаОтвета = ПолучитьСтрокуИзДвоичныхДанных(
			ДанныеТелаОтвета,
			?(КодировкаТелаОтвета = Неопределено, КлиентHTTPПовтИсп.КодировкаПоУмолчанию(), КодировкаТелаОтвета)
		);
		
		ОтветHTML = ТекстТелаОтвета;
	Иначе
		ТекстТелаОтвета = "двоичные данные";
	КонецЕсли;
	
	ОтобразитьВПолеВвода = (
		ТипMIMEОтвета = КлиентHTTPПовтИсп.ТипMIMEHTML() ИЛИ
		ТипMIMEОтвета = КлиентHTTPПовтИсп.ТипMIMETextXML() ИЛИ
		ТипMIMEОтвета = КлиентHTTPПовтИсп.ТипMIMEApplicationXML()
	);
	Если ОтобразитьВПолеВвода Тогда
		ОтветТекстСтрока = Лев(ТекстТелаОтвета, 131072) + ?(СтрДлина(ТекстТелаОтвета) > 131072, "...", "");
		ОтветТекст.УстановитьФорматированнуюСтроку(Новый ФорматированнаяСтрока(""));
	Иначе
		ОтветТекстСтрока = "";
		ОтветТекст.УстановитьФорматированнуюСтроку(Новый ФорматированнаяСтрока(ТекстТелаОтвета));
	КонецЕсли;
	
	Элементы.ОтветТекст.Видимость = НЕ ОтобразитьВПолеВвода;
	Элементы.ОтветТекстСтрока.Видимость = ОтобразитьВПолеВвода;
	
	ВывестиТелоОтветаJSON(ТекстТелаОтвета);
	ОтобразитьКартинкуТелаОтвета(ТипMIMEОтвета);
	ПроверитьОтветHawk(Ответ);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыОтправкиДанныхФормы(Знач ДополнительныеПараметры, Знач РазделительПолей)
	фРезультат = КлиентHTTPКлиентСервер.КопияДополнительныхПараметров(ДополнительныеПараметры);
	
	КлиентHTTPКлиентСервер.УстановитьРазделительПолейФормы(фРезультат, РазделительПолей);
	
	Возврат фРезультат;
КонецФункции

&НаКлиенте
Функция ПараметрыОтправкиДанныхФормыНаКлиенте(Знач ДополнительныеПараметры)
	Возврат ПараметрыОтправкиДанныхФормы(ДополнительныеПараметры, Разделитель);
КонецФункции

&НаСервереБезКонтекста
Функция ПараметрыОтправкиДанныхФормыНаСервере(Знач ДополнительныеПараметры, Знач РазделительПолей)
	Возврат ПараметрыОтправкиДанныхФормы(ДополнительныеПараметры, РазделительПолей);
КонецФункции

&НаКлиенте
Процедура ФроматированиеВремениВыполненияЗапроса()
	Если ВремяВыполнения > 999 Тогда
		Точность = 2;
		Сдвиг = 3;
		Единицы = "с";
	Иначе
		Точность = 0;
		Сдвиг = 0;
		Единицы = "мс";
	КонецЕсли;
	
	Элементы.ВремяВыполнения.Формат = СтрШаблон("ЧДЦ=%1; ЧС=%2; ЧН='0 мс'; ЧГ=; ЧФ='Ч %3'", Точность, Сдвиг, Единицы);
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьКодСостоянияСервера(Знач КодСостоянияСервера)
	КодСостояния = КодСостоянияСервера;
	
	Если КодСостояния > 499 Тогда // серверные 5xx
		Элементы.КодСостояния.ЦветТекста = WebЦвета.Черный;
	ИначеЕсли КодСостояния > 399 Тогда // клиентские 4xx
		Элементы.КодСостояния.ЦветТекста = WebЦвета.Красный;
	ИначеЕсли КодСостояния > 299 Тогда // перенаправления 3xx
		Элементы.КодСостояния.ЦветТекста = WebЦвета.ТемноОранжевый;
	ИначеЕсли КодСостояния > 199 Тогда // успешные 2xx
		Элементы.КодСостояния.ЦветТекста = WebЦвета.ЗеленыйЛес;
	Иначе // информационные 1xx
		Элементы.КодСостояния.ЦветТекста = WebЦвета.КоролевскиГолубой;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьРазмерТелаОтвета()
	ДелительГБ = 1073741824; // 2^30
	ДелительМБ = 1048576; // 2^20
	ДелительКБ = 1024; // 2^10
	Делитель = 1;
	Точность = 2;
	Единица = "Б";
	РазмерОтвета = ДанныеТелаОтвета.Размер();
	Если РазмерОтвета >= ДелительГБ Тогда
		Делитель = ДелительГБ;
		Единица = "ГБ";
	ИначеЕсли РазмерОтвета >= ДелительМБ Тогда
		Делитель = ДелительМБ;
		Единица = "МБ";
	ИначеЕсли РазмерОтвета >= ДелительКБ Тогда
		Делитель = ДелительКБ;
		Единица = "КБ";
	Иначе
		Точность = 0;
	КонецЕсли;
	
	Элементы.РазмерОтвета.Формат = СтрШаблон("ЧДЦ=%1; ЧН='0 Б'; ЧГ=; ЧФ='Ч %2'", Точность, Единица);
	РазмерОтвета = РазмерОтвета / Делитель;
КонецПроцедуры

&НаКлиенте
Процедура ВывестиТелоОтветаJSON(Знач Текст)
	Перем ОбъектJSON;
	
	Чтение = Новый ЧтениеJSON;
	Чтение.УстановитьСтроку(Текст);
	
	Попытка
		ОбъектJSON = ПрочитатьJSON(Чтение, Истина);
	Исключение
		Текст = Неопределено;
	КонецПопытки;
	
	Чтение.Закрыть();
	
	Если Текст = Неопределено Тогда
		Текст = "не удалось прочитать как JSON";
	Иначе
		Запись = Новый ЗаписьJSON;
		Запись.УстановитьСтроку(Новый ПараметрыЗаписиJSON(, "    ", Истина));
		ЗаписатьJSON(Запись, ОбъектJSON);
		Текст = Запись.Закрыть();
	КонецЕсли;
	
	ОтветJSON.УстановитьФорматированнуюСтроку(Новый ФорматированнаяСтрока(Текст));
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьКартинкуТелаОтвета(Знач ТипMIME)
	Если ТипыMIMEКартинок().Получить(ТипMIME) = Неопределено Тогда
		Элементы.ДекорацияНеКартинкаContentType.Заголовок = ТипMIME;
		Элементы.ОтветКартинка.Видимость = Ложь;
		Элементы.ГруппаОтветНеКартинка.Видимость = Истина;
		
		Возврат;
	КонецЕсли;
	
	ПопробоватьОтобразитьКартинку(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьОтветHawk(Знач Ответ)
	Если ТипАутентификации <> Элементы.ТипАутентификации.СписокВыбора[6].Значение Тогда // Hawk
		Возврат;
	КонецЕсли;
	Если Цел(Ответ.КодСостояния / 100) <> 2 Тогда // 2хх
		Возврат;
	КонецЕсли;
	Если КлиентHTTPКлиентСервер.ЗначениеЗаголовка("Server-Authorization", Ответ.Заголовки) = Неопределено Тогда
		СообщитьПользователю("В ответе отсутствует заголовок верефикации 'Server-Authorization'");
	КонецЕсли;
	
	ОписаниеОшибки = "";
	Если НЕ КлиентHTTPКлиентСервер.ОтветСЗаголовкомHawkКорректен(Ответ, "Server-Authorization", ОписаниеОшибки) Тогда
		СообщитьПользователю(ОписаниеОшибки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьКонтекстВыполненияЗапроса()
	Элементы.ТелоЗапросаФайл.КнопкаВыбора = ВыполнятьНаСервере;
	Элементы.ДанныеФормыЗначение.КнопкаВыбора = ВыполнятьНаСервере;
	Элементы.ДанныеФормыЗначение.КнопкаОткрытия = НЕ ВыполнятьНаСервере;
	ВыполнятьНаСервере = НЕ ВыполнятьНаСервере;
	ЗаголовокКонтекстаВыполнения = ?(
		ВыполнятьНаСервере,
		"на сервере",
		"на клиенте"
	);
	Элементы.ДекорацияКонтекстВыполнения.Заголовок = ЗаголовокКонтекстаВыполнения;
	Элементы.ДекорацияКонтекстВыполненияНастройки.Заголовок = ЗаголовокКонтекстаВыполнения;
КонецПроцедуры

&НаКлиенте
Функция ПараметрыИдентификатораСПорядком(Знач ИдентификаторРесурса, Знач ПозицияНачала)
	фРезультат = Новый Структура("Параметры, Порядок", Новый Соответствие, Новый Массив);
	
	Если ПозицияНачала = 0 Тогда
		Возврат фРезультат;
	КонецЕсли;
	
	ПозицияОкончания = СтрНайти(ИдентификаторРесурса, "#", , ПозицияНачала);
	ПараметрыСтрока = Сред(
		ИдентификаторРесурса,
		ПозицияНачала + 1,
		?(
			ПозицияОкончания = 0,
			СтрДлина(ИдентификаторРесурса),
			ПозицияОкончания - 1
		) - ПозицияНачала
	);
	
	ПараметрыИдентификатора = Новый Массив;
	МножествоСтрок = Новый Соответствие;
	Для Каждого Параметр Из СтрРазделить(ПараметрыСтрока, "&", Ложь) Цикл
		ПозицияРазделителя = СтрНайти(Параметр, "=");
		Если ПозицияРазделителя = 0 Тогда
			ПозицияРазделителя = СтрДлина(Параметр) + 1;
		КонецЕсли;
		
		ИмяПараметра = Лев(Параметр, ПозицияРазделителя - 1);
		Если ПустаяСтрока(ИмяПараметра) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗначениеПараметра = Прав(Параметр, СтрДлина(Параметр) - ПозицияРазделителя);
		
		ПараметрыИдентификатора.Добавить(Новый Структура("Ключ, Значение", ИмяПараметра, ЗначениеПараметра));
		МножествоСтрок.Вставить(ИмяПараметра);
		МножествоСтрок.Вставить(ЗначениеПараметра);
	КонецЦикла;
	
	МножествоСтрок = РаскодированныеСтрокиURLвURL(МножествоСтрок);
	
	Для Каждого Параметр Из ПараметрыИдентификатора Цикл
		ИмяПараметра = МножествоСтрок.Получить(Параметр.Ключ);
		ЗначениеПараметра = МножествоСтрок.Получить(Параметр.Значение);
		ЗначенияПараметра = фРезультат.Параметры.Получить(ИмяПараметра);
		Если ЗначенияПараметра = Неопределено Тогда
			ЗначенияПараметра = Новый Соответствие;
			фРезультат.Параметры.Вставить(ИмяПараметра, ЗначенияПараметра);
			Добавлять = Истина;
		Иначе
			Добавлять = (ЗначенияПараметра.Получить(ЗначениеПараметра) = Неопределено);
		КонецЕсли;
		
		Если Добавлять Тогда
			ЗначенияПараметра.Вставить(ЗначениеПараметра, Истина);
			фРезультат.Порядок.Добавить(Новый Структура("Ключ, Значение", ИмяПараметра, ЗначениеПараметра));
		КонецЕсли;
	КонецЦикла;
	
	Возврат фРезультат;
КонецФункции

&НаКлиенте
Процедура УдалитьСтрокиОтсутствующихПараметров(ЗначенияПараметров)
	СтрокиНаУдаление = Новый Массив;
	
	Для Каждого Стр Из ПараметрыЗапроса Цикл
		ЗначенияПараметра = ЗначенияПараметров.Параметры.Получить(Стр.Ключ);
		Если ЗначенияПараметра = Неопределено
			 ИЛИ ЗначенияПараметра.Получить(Стр.Значение) = Неопределено Тогда
			Если Стр.Активно Тогда
				СтрокиНаУдаление.Добавить(Стр);
			КонецЕсли;
		Иначе
			Стр.Активно = Истина;
			ЗначенияПараметра.Удалить(Стр.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Стр Из СтрокиНаУдаление Цикл
		ПараметрыЗапроса.Удалить(Стр);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПараметрыПоИдентификаторуРесурса()
	Если СтрНачинаетсяС(ИдентификаторРесурса, "https://") Тогда
		ПозицияНачалаПоиска = 8;
	ИначеЕсли СтрНачинаетсяС(ИдентификаторРесурса, "http://") Тогда
		ПозицияНачалаПоиска = 7;
	Иначе
		ВызватьИсключение "Не удалось разобрать URI";
	КонецЕсли;
	
	ПозицияНачалаСтрокиПараметров = СтрНайти(ИдентификаторРесурса, "?", , ПозицияНачалаПоиска);
	КоллекцияПараметров = ПараметрыИдентификатораСПорядком(ИдентификаторРесурса, ПозицияНачалаСтрокиПараметров);
	
	УдалитьСтрокиОтсутствующихПараметров(КоллекцияПараметров);
	
	Для Каждого ЗначениеПараметра Из КоллекцияПараметров.Порядок Цикл
		ЗначенияПараметра = КоллекцияПараметров.Параметры.Получить(ЗначениеПараметра.Ключ);
		Если ЗначенияПараметра = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если ЗначенияПараметра.Получить(ЗначениеПараметра.Значение) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Стр = ПараметрыЗапроса.Добавить();
		Стр.Ключ     = ЗначениеПараметра.Ключ;
		Стр.Значение = ЗначениеПараметра.Значение;
		Стр.Активно  = Истина;
	КонецЦикла;
	
	ПараметрыЗапросаПриОкончанииРедактирования(Неопределено, Неопределено, Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРежимОтображенияПароля(Знач Переключатель, Знач ПолеПароля)
	ПолеПароля.РежимПароля = Переключатель.Пометка;
	Переключатель.Пометка = НЕ Переключатель.Пометка;
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьПараметрыИдентификатораРесурса()
	ДлинаИдентификатораРесурса = СтрДлина(ИдентификаторРесурса);
	ПозицияНачалаПоиска = 7;
	
	Если СтрНачинаетсяС(ИдентификаторРесурса, "https://") Тогда
		ПозицияНачалаПоиска = 8;
	ИначеЕсли НЕ СтрНачинаетсяС(ИдентификаторРесурса, "http://") Тогда
		ВызватьИсключение "Не удалось разобрать URI";
	КонецЕсли;
	
	ПозицияСимволаПараметров = СтрНайти(ИдентификаторРесурса, "?", , ПозицияНачалаПоиска);
	ПозицияСимволаФрагмента = СтрНайти(ИдентификаторРесурса, "#", , ?(ПозицияСимволаПараметров = 0, 1, ПозицияСимволаПараметров));
	ПозицияОкончания = ?(ПозицияСимволаПараметров = 0, ПозицияСимволаФрагмента, ПозицияСимволаПараметров);
	
	НовыйИдентификатор = ?(
		ПозицияОкончания = 0,
		ИдентификаторРесурса,
		Лев(ИдентификаторРесурса, ПозицияОкончания - 1)
	);
	
	ПараметрыИдентификатора = Новый Массив;
	Для Каждого Стр Из ПараметрыЗапроса Цикл
		Если ПустаяСтрока(Стр.Ключ) ИЛИ НЕ Стр.Активно Тогда
			Продолжить;
		КонецЕсли;
		
		ЗначениеПараметра = Новый Массив;
		ЗначениеПараметра.Добавить(Стр.Значение);
		
		// Имитация элемента соответствия
		ПараметрыИдентификатора.Добавить(Новый Структура("Ключ, Значение", Стр.Ключ, ЗначениеПараметра));
	КонецЦикла;
	
	ИдентификаторРесурса = СтрШаблон(
		"%1%2%3",
		НовыйИдентификатор,
		КлиентHTTPКлиентСервер.ПараметрыЗапросаСтрокой(ПараметрыИдентификатора),
		?(ПозицияСимволаФрагмента = 0, "", Сред(ИдентификаторРесурса, ПозицияСимволаФрагмента))
	);
КонецПроцедуры

&НаКлиенте
Функция ИсправленноеИмяЗаголовкаЗапроса(Знач Имя)
	НедопустимыеСимволы = СтрСоединить(СтрРазделить(Имя, КлиентHTTPПовтИсп.ДопустимыеСимволыИмениЗаголовка(), Ложь));
	
	Возврат СтрСоединить(СтрРазделить(Имя, НедопустимыеСимволы), "-"); // заменили все недопустимые символы на "-"
КонецФункции

&НаКлиенте
Функция КоличествоАктивныхЭлементовТаблицы(Знач Таблица)
	фРезультат = 0;
	Для Каждого Стр Из Таблица Цикл
		фРезультат = фРезультат + Стр.Активно;
	КонецЦикла;
	
	Возврат фРезультат;
КонецФункции

&НаКлиенте
Функция ЗаголовокТаблицыСАктивнымиЭлементами(Знач ОснованиеЗаголовка, Знач КоличествоАктивных)
	Возврат СтрШаблон(
		"%1%2",
		ОснованиеЗаголовка,
		?(КоличествоАктивных > 0, СтрШаблон(" (%1)", КоличествоАктивных), "")
	);
КонецФункции

&НаКлиенте
Функция ЗаголовокГруппыСВыбраннымЭлементом(Знач ОснованиеЗаголовка, Знач Активно)
	Возврат СтрШаблон(
		"%1%2",
		ОснованиеЗаголовка,
		?(Активно, " ●", "")
	);
КонецФункции

&НаКлиенте
Функция МножествоПараметровЗапроса()
	фРезультат = КлиентHTTPКлиентСервер.НовыеПараметрыЗапроса();
	
	Для Каждого Стр Из ПараметрыЗапроса Цикл
		Если НЕ Стр.Активно Тогда
			Продолжить;
		КонецЕсли;
		
		КлиентHTTPКлиентСервер.ДобавитьПараметр(фРезультат, Стр.Ключ, Стр.Значение);
	КонецЦикла;
	
	Возврат фРезультат;
КонецФункции

&НаКлиенте
Процедура ЗафиксироватьВремяВыполненияЗапроса(Знач ВремяНачала)
	ВремяВыполнения = ТекущаяУниверсальнаяДатаВМиллисекундах() - ВремяНачала;
КонецПроцедуры

#Область ГенерацияКомандыCurl
&НаКлиенте
Функция ЭкранированиеАпострофаUnix(Знач Текст)
	Возврат СтрЗаменить(Текст, "'", "'\''")
КонецФункции

&НаКлиенте
Функция ЭкранированиеСимволовЗначенияПоляФормы(Знач Текст, Знач ЭкранироватьОбратныйСлеш)
	Возврат СтрЗаменить(
		ЭкранированиеАпострофаUnix(
			?(
				ЭкранироватьОбратныйСлеш,
				СтрЗаменить(Текст, "\", "\\"),
				Текст
			)
		), """", "\"""
	);
КонецФункции

&НаКлиенте
Процедура ЗаполнитьПользователяИПарольCurlКоманды(ЧастиКоманды)
	Если НЕ ЗначениеЗаполнено(ПользовательАутентификации) Тогда
		Возврат;
	КонецЕсли;
	
	ЧастиАутентификации = Новый Массив;
	
	ЧастиКоманды.Добавить("-u");
	ЧастиАутентификации.Добавить(ПользовательАутентификации);
	ЧастиАутентификации.Добавить(ПарольАутентификации);
	ЧастиКоманды.Добавить(СтрШаблон("'%1'", ЭкранированиеАпострофаUnix(СтрСоединить(ЧастиАутентификации, ":"))));
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьAWS4CurlКоманды(ЧастиКоманды)
	ЧастиАутентификации = Новый Массив;
	
	ЧастиКоманды.Добавить("-u");
	ЧастиАутентификации.Добавить(AWSКлючДоступа);
	ЧастиАутентификации.Добавить(AWSСекретныйКлюч);
	ЧастиКоманды.Добавить(СтрШаблон("'%1'", ЭкранированиеАпострофаUnix(СтрСоединить(ЧастиАутентификации, ":"))));
	
	ЧастиКоманды.Добавить("--aws-sigv4");
	ЧастиАутентификации.Очистить();
	ЧастиАутентификации.Добавить("aws:amz");
	Если НЕ ПустаяСтрока(AWSРегион) Тогда
		ЧастиАутентификации.Добавить(AWSРегион);
		Если НЕ ПустаяСтрока(AWSСервис) Тогда
			ЧастиАутентификации.Добавить(AWSСервис);
		КонецЕсли;
	КонецЕсли;
	
	ЧастиКоманды.Добавить(СтрШаблон("'%1'", ЭкранированиеАпострофаUnix(СтрСоединить(ЧастиАутентификации, ":"))));
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАутентификациюCurlКоманды(ЧастиКоманды)
	Если ТипАутентификации = Элементы.ТипАутентификации.СписокВыбора[1].Значение Тогда // Basic
		ЗаполнитьПользователяИПарольCurlКоманды(ЧастиКоманды);
		ЧастиКоманды.Добавить("--basic");
	ИначеЕсли ТипАутентификации = Элементы.ТипАутентификации.СписокВыбора[2].Значение Тогда // NTLM
		ЗаполнитьПользователяИПарольCurlКоманды(ЧастиКоманды);
		ЧастиКоманды.Добавить("--ntlm");
	ИначеЕсли ТипАутентификации = Элементы.ТипАутентификации.СписокВыбора[3].Значение Тогда // Digest
		ЗаполнитьПользователяИПарольCurlКоманды(ЧастиКоманды);
		ЧастиКоманды.Добавить("--digest");
	ИначеЕсли ТипАутентификации = Элементы.ТипАутентификации.СписокВыбора[4].Значение Тогда // Bearer
		ЧастиКоманды.Добавить("--oauth2-bearer");
		ЧастиКоманды.Добавить(СтрШаблон("'%1'", ЭкранированиеАпострофаUnix(ТокенАутентификации)));
	ИначеЕсли ТипАутентификации = Элементы.ТипАутентификации.СписокВыбора[5].Значение Тогда // AWS4-HMAC-SHA256
		ЗаполнитьAWS4CurlКоманды(ЧастиКоманды);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПолеФормыCurlКоманды(ЧастиКоманды, Знач Поле)
	ТипMIME = "";
	ИмяФайла = "";
	ЭкранироватьОбратныйСлеш = Истина;
	ТипыДанныхФормыФайл = Элементы.ТелоЗапросаДанныеФормы.ПодчиненныеЭлементы.ДанныеФормыТип.СписокВыбора[1].Значение;
	
	ЧастиПоляФормы = Новый Массив;
	ЧастиПоляФормы.Добавить(ЭкранированиеАпострофаUnix(Поле.Ключ));
	ЧастиПоляФормы.Добавить("=");
	Если Поле.Тип = ТипыДанныхФормыФайл Тогда
		ЧастиПоляФормы.Добавить("@");
		
		ФайлПоля = Новый Файл(Поле.Значение);
		ИмяФайла = ФайлПоля.Имя;
		ТипMIME = КлиентHTTPСлужебный.ТипMIMEРасширенияФайла(ФайлПоля.Расширение);
		ЭкранироватьОбратныйСлеш = ?(ВыполнятьНаСервере, РазделительПутиСервера(), ПолучитьРазделительПутиКлиента()) <> "\";
	КонецЕсли;
	
	ЧастиПоляФормы.Добавить("""");
	ЧастиПоляФормы.Добавить(ЭкранированиеСимволовЗначенияПоляФормы(Поле.Значение, ЭкранироватьОбратныйСлеш));
	
	Если НЕ ПустаяСтрока(ИмяФайла) Тогда
		ЧастиПоляФормы.Добавить(";filename=");
		ЧастиПоляФормы.Добавить(ИмяФайла);
	КонецЕсли;
	Если НЕ ПустаяСтрока(ТипMIME) Тогда
		ЧастиПоляФормы.Добавить(";type=");
		ЧастиПоляФормы.Добавить(ТипMIME);
	КонецЕсли;
	
	ЧастиПоляФормы.Добавить("""");
	
	ЧастиКоманды.Добавить("-F");
	ЧастиКоманды.Добавить(СтрШаблон("'%1'", СтрСоединить(ЧастиПоляФормы, "")));
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеФормыCurlКоманды(ЧастиКоманды, ОтобразитьPOST)
	Если ТелоЗапросаДанныеФормы.Количество() = 0 Тогда
		ОтобразитьPOST = Истина;
		Возврат;
	КонецЕсли;
	
	Для Каждого Стр Из ТелоЗапросаДанныеФормы Цикл
		ЗаполнитьПолеФормыCurlКоманды(ЧастиКоманды, Стр);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеHTMLФормыCurlКоманды(ЧастиКоманды, ОтобразитьPOST)
	Если ТелоЗапросаДанныеHTMLФормы.Количество() = 0 Тогда
		ОтобразитьPOST = Истина;
		Возврат;
	КонецЕсли;
	
	ПоляФормы = Новый Массив;
	Для Каждого Стр Из ТелоЗапросаДанныеHTMLФормы Цикл
		ЧастиКоманды.Добавить("--data-urlencode");
		ЧастиКоманды.Добавить(СтрШаблон("'%1=%2'", КодированныйТекстВURL(Стр.Ключ), ЭкранированиеАпострофаUnix(Стр.Значение)));
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТекстовыеДанныеCurlКоманды(ЧастиКоманды, ОтобразитьPOST)
	Если ПустаяСтрока(ТелоЗапросаТекст) Тогда
		ОтобразитьPOST = Истина;
		Возврат;
	КонецЕсли;
	
	ЧастиКоманды.Добавить("--data-raw");
	ЧастиКоманды.Добавить(СтрШаблон("'%1'", ЭкранированиеАпострофаUnix(ТелоЗапросаТекст)));
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеФайлаCurlКоманды(ЧастиКоманды, ОтобразитьPOST, ПредопределенныеЗаголовки)
	Если ПустаяСтрока(ТелоЗапросаФайл) Тогда
		ОтобразитьPOST = Истина;
		Возврат;
	КонецЕсли;
	
	ЧастиКоманды.Добавить("--data-binary");
	ЧастиКоманды.Добавить(СтрШаблон("@""%1""", ЭкранированиеАпострофаUnix(ТелоЗапросаФайл)));
	
	ФайлТела = Новый Файл(ТелоЗапросаФайл);
	ТипMIME = КлиентHTTPСлужебный.ТипMIMEРасширенияФайла(ФайлТела.Расширение);
	
	ПредопределенныеЗаголовки.Добавить(Новый Структура("Ключ, Значение", "Content-Type", ТипMIME));
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТелоЗапросаCurlКоманды(ЧастиКоманды, ОтобразитьPOST, ПредопределенныеЗаголовки)
	Если ТипТелаЗапроса = Элементы.ТипТелаЗапроса.СписокВыбора[1].Значение Тогда // multipart/form-data
		ЗаполнитьДанныеФормыCurlКоманды(ЧастиКоманды, ОтобразитьPOST);
	ИначеЕсли ТипТелаЗапроса = Элементы.ТипТелаЗапроса.СписокВыбора[2].Значение Тогда // application/x-www-form-urlencoded
		ЗаполнитьДанныеHTMLФормыCurlКоманды(ЧастиКоманды, ОтобразитьPOST);
	ИначеЕсли ТипТелаЗапроса = Элементы.ТипТелаЗапроса.СписокВыбора[3].Значение Тогда // Текст
		ЗаполнитьТекстовыеДанныеCurlКоманды(ЧастиКоманды, ОтобразитьPOST);
	ИначеЕсли ТипТелаЗапроса = Элементы.ТипТелаЗапроса.СписокВыбора[4].Значение Тогда // Файл
		ЗаполнитьДанныеФайлаCurlКоманды(ЧастиКоманды, ОтобразитьPOST, ПредопределенныеЗаголовки);
	Иначе
		ОтобразитьPOST = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаймаутCurlКоманды(ЧастиКоманды)
	Если Таймаут = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЧастиКоманды.Добавить("--connect-timeout");
	ЧастиКоманды.Добавить(XMLСтрока(Таймаут));
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПроксиCurlКоманды(ЧастиКоманды)
	Если НЕ (ИспользоватьПрокси И ЗначениеЗаполнено(СерверПрокси)) Тогда
		Возврат;
	КонецЕсли;
	
	ЧастиПрокси = Новый Массив;
	
	Если ЗначениеЗаполнено(ПользовательПрокси) Тогда
		ЧастиПрокси.Добавить(ПользовательПрокси);
		ЧастиПрокси.Добавить(ПарольПрокси);
		
		ЧастиКоманды.Добавить(?(ИспользоватьАутентификациюОСПрокси, "--proxy-ntlm", "--proxy-basic"));
		ЧастиКоманды.Добавить("--proxy-user");
		ЧастиКоманды.Добавить(СтрШаблон("'%1'", СтрЗаменить(СтрСоединить(ЧастиПрокси, ":"), "'", "'\''")));
	КонецЕсли;
	
	ЧастиПрокси.Очистить();
	ЧастиПрокси.Добавить(ПротоколПрокси);
	ЧастиПрокси.Добавить("://");
	ЧастиПрокси.Добавить(СерверПрокси);
	
	Если ЗначениеЗаполнено(ПортПрокси) Тогда
		ЧастиПрокси.Добавить(":");
		ЧастиПрокси.Добавить(ПортПрокси);
	КонецЕсли;
	
	ЧастиКоманды.Добавить("-x");
	ЧастиКоманды.Добавить(СтрСоединить(ЧастиПрокси, ""));
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСессиюCurlКоманды(ЧастиКоманды, ЧастиСложнойОпции)
	Если НЕ ИспользоватьСессию Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПорогПеренаправлений) Тогда
		ЧастиКоманды.Добавить("--max-redirs");
		ЧастиКоманды.Добавить(ПорогПеренаправлений);
	КонецЕсли;
	
	ЧастиСложнойОпции.Добавить("L");
	
	Если ПоддержкаCookie Тогда
		ЗначениеCookie = КлиентHTTPКлиентСервер.ЗначениеЗаголовкаCookieРесурса(ИдентификаторРесурса, Дополнительно);
		Если ЗначениеЗаполнено(ЗначениеCookie) Тогда
			ЧастиКоманды.Добавить("-b");
			ЧастиКоманды.Добавить(СтрШаблон("'%1'", ЭкранированиеАпострофаUnix(ЗначениеCookie)));
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаголовкиCurlКоманды(ЧастиКоманды, Знач ПредопределенныеЗаголовки)
	Для Каждого Стр Из ПредопределенныеЗаголовки Цикл
		ЧастиКоманды.Добавить("-H");
		ЧастиКоманды.Добавить(
			СтрШаблон("'%1: %2'", ЭкранированиеАпострофаUnix(Стр.Ключ), ЭкранированиеАпострофаUnix(Стр.Значение))
		);
	КонецЦикла;
	
	Для Каждого Стр Из ЗаголовкиЗапроса Цикл
		Если НЕ Стр.Активно Тогда
			Продолжить;
		КонецЕсли;
		
		ЧастиКоманды.Добавить("-H");
		ЧастиКоманды.Добавить(
			СтрШаблон("'%1: %2'", ЭкранированиеАпострофаUnix(Стр.Ключ), ЭкранированиеАпострофаUnix(Стр.Значение))
		);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСхемуЗапросаCurlКоманды(ЧастиКоманды, ЧастиСложнойОпции, Знач ОтобразитьPOST)
	СхемаСписокВыбора = Элементы.Схема.СписокВыбора;
	Если Схема = СхемаСписокВыбора[0].Значение И НЕ ОтобразитьPOST Тогда // GET
		ЧастиКоманды.Добавить(СтрШаблон("-X %1", Схема));
	ИначеЕсли Схема = СхемаСписокВыбора[1].Значение И ОтобразитьPOST Тогда // POST
		ЧастиКоманды.Добавить(СтрШаблон("-X %1", Схема));
	ИначеЕсли Схема = СхемаСписокВыбора[4].Значение Тогда // HEAD
		ЧастиСложнойОпции.Добавить("I");	
	ИначеЕсли Схема = СхемаСписокВыбора[2].Значение // PUT
			ИЛИ Схема = СхемаСписокВыбора[3].Значение // DELETE
			ИЛИ Схема = СхемаСписокВыбора[5].Значение // PATCH
		Тогда
		ЧастиКоманды.Добавить(СтрШаблон("-X %1", Схема));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЧастиРазделаКомандыCurl(ЧастиКоманды, Знач РазделКоманды)
	Для Каждого Часть Из РазделКоманды Цикл
		ЧастиКоманды.Добавить(Часть);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция КомандаCurlЗапросаКонсоли()
	ЧастиСложнойОпции = Новый Массив;
	ПредопределенныеЗаголовки = Новый Массив;
	ОтобразитьPOST = Ложь;
	
	РазделыКоманды = Новый Структура(
		"Аутентификация, Тело, Таймаут, Прокси, Сессия, Заголовки, Схема",
		Новый Массив, Новый Массив, Новый Массив, Новый Массив, Новый Массив, Новый Массив, Новый Массив, Новый Массив, Новый Массив
	);
	
	ЗаполнитьАутентификациюCurlКоманды(РазделыКоманды.Аутентификация);
	ЗаполнитьТелоЗапросаCurlКоманды(РазделыКоманды.Тело, ОтобразитьPOST, ПредопределенныеЗаголовки);
	ЗаполнитьТаймаутCurlКоманды(РазделыКоманды.Таймаут);
	ЗаполнитьПроксиCurlКоманды(РазделыКоманды.Прокси);
	ЗаполнитьСессиюCurlКоманды(РазделыКоманды.Сессия, ЧастиСложнойОпции);
	ЗаполнитьЗаголовкиCurlКоманды(РазделыКоманды.Заголовки, ПредопределенныеЗаголовки);
	ЗаполнитьСхемуЗапросаCurlКоманды(РазделыКоманды.Схема, ЧастиСложнойОпции, ОтобразитьPOST);
	
	ЧастиКоманды = Новый Массив;
	ЧастиКоманды.Добавить("curl");
	
	Если ЧастиСложнойОпции.Количество() > 0 Тогда
		ЧастиСложнойОпции.Вставить(0, "-");
		ЧастиКоманды.Добавить(СтрСоединить(ЧастиСложнойОпции, ""));
	КонецЕсли;
	
	ЗаполнитьЧастиРазделаКомандыCurl(ЧастиКоманды, РазделыКоманды.Схема);
	
	ЧастиКоманды.Добавить(КодированныйURIВURL(ИдентификаторРесурса));
	
	ЗаполнитьЧастиРазделаКомандыCurl(ЧастиКоманды, РазделыКоманды.Аутентификация);
	ЗаполнитьЧастиРазделаКомандыCurl(ЧастиКоманды, РазделыКоманды.Заголовки);
	ЗаполнитьЧастиРазделаКомандыCurl(ЧастиКоманды, РазделыКоманды.Тело);
	ЗаполнитьЧастиРазделаКомандыCurl(ЧастиКоманды, РазделыКоманды.Прокси);
	ЗаполнитьЧастиРазделаКомандыCurl(ЧастиКоманды, РазделыКоманды.Таймаут);
	ЗаполнитьЧастиРазделаКомандыCurl(ЧастиКоманды, РазделыКоманды.Сессия);
	
	Возврат СтрСоединить(ЧастиКоманды, " ");
КонецФункции
#КонецОбласти

#Область ИмпортКомандыCurl
&НаКлиенте
Функция ОпцииКомандыCurl()
	фРезультат = Новый Соответствие;
	фРезультат.Вставить("-X", Истина);
	фРезультат.Вставить("--request", Истина);
	фРезультат.Вставить("-d", Истина);
	фРезультат.Вставить("--data", Истина);
	фРезультат.Вставить("--data-ascii", Истина);
	фРезультат.Вставить("--data-binary", Истина);
	фРезультат.Вставить("--data-raw", Истина);
	фРезультат.Вставить("--data-urlencode", Истина);
	фРезультат.Вставить("-F", Истина);
	фРезультат.Вставить("--form", Истина);
	фРезультат.Вставить("--form-string", Истина);
	фРезультат.Вставить("-G", Ложь);
	фРезультат.Вставить("--get", Ложь);
	фРезультат.Вставить("--remote-name", Ложь);
	фРезультат.Вставить("-I", Ложь);
	фРезультат.Вставить("--head", Ложь);
	фРезультат.Вставить("-H", Истина);
	фРезультат.Вставить("--header", Истина);
	фРезультат.Вставить("-u", Истина);
	фРезультат.Вставить("--user", Истина);
	фРезультат.Вставить("--basic", Ложь);
	фРезультат.Вставить("--digest", Ложь);
	фРезультат.Вставить("--ntlm", Ложь);
	фРезультат.Вставить("--ntlm-wb", Ложь);
	фРезультат.Вставить("--oauth2-bearer", Истина);
	фРезультат.Вставить("--aws-sigv4", Истина);
	фРезультат.Вставить("-L", Ложь);
	фРезультат.Вставить("--location", Ложь);
	фРезультат.Вставить("--location-trusted", Ложь);
	фРезультат.Вставить("--max-redirs", Истина);
	фРезультат.Вставить("-:", Ложь);
	фРезультат.Вставить("--next", Ложь);
	фРезультат.Вставить("--path-as-is", Ложь);
	фРезультат.Вставить("-k", Ложь);
	фРезультат.Вставить("--insecure", Ложь);
	фРезультат.Вставить("-x", Истина);
	фРезультат.Вставить("--proxy", Истина);
	фРезультат.Вставить("--proxy-basic", Ложь);
	фРезультат.Вставить("--connect-timeout", Истина);
	
	Возврат фРезультат;
КонецФункции

&НаКлиенте
Функция НоваяОпцияCurl(Знач Имя, Знач Значение = Неопределено)
	Возврат Новый Структура("Имя, Значение", Имя, Значение);
КонецФункции

&НаКлиенте
Функция ТекстБезКавычек(Знач Текст, Знач ОткрывающийСимвол)
	Если ОткрывающийСимвол = "" Тогда
		Возврат Текст;
	КонецЕсли;
	
	Если СтрНачинаетсяС(Текст, ОткрывающийСимвол) Тогда
		Текст = Сред(Текст, 2);
	КонецЕсли;
	Если СтрЗаканчиваетсяНа(Текст, ОткрывающийСимвол) Тогда
		Текст = Лев(Текст, СтрДлина(Текст) - 1);
	КонецЕсли;
	
	Возврат Текст;
КонецФункции

&НаКлиенте
Процедура РазделитьСложнуюОпциюCurl(Токен, ЧастиКоманды, ДопустимыеОпции, Отказ, ОписаниеОшибки)
	Для я = 3 По СтрДлина(Токен) Цикл
		ЧастьОпции = "-" + Сред(Токен, я, 1);
		Проверка = ДопустимыеОпции.Получить(ЧастьОпции);
		Если Проверка = Неопределено ИЛИ Проверка = Истина Тогда
			Отказ = Истина;
			ОписаниеОшибки = "неожиданный флаг " + Токен;
			Возврат;
		КонецЕсли;
		
		ЧастиКоманды.Добавить(ЧастьОпции);
	КонецЦикла;
	
	Токен = Лев(Токен, 2);
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОпциюКомандыCurl(Опции, ЧастиКоманды, ЧастьКоманды, ДопустимыеОпции, Опция, СобиратьТокен, ЧастиТокена, Отказ, ОписаниеОшибки)
	Если Опция <> Неопределено Тогда
		Если СобиратьТокен И ЧастиТокена.Количество() = 0 Тогда
			Отказ = Истина;
			ОписаниеОшибки = "отсутствует значение для флага " + Опция.Имя;
			Возврат;
		КонецЕсли;
		
		Опции.Добавить(Опция);
	КонецЕсли;
	
	Токен = ЧастьКоманды;
	Если СтрНачинаетсяС(Токен, "--") Тогда
		Токен = НРег(Токен);
	ИначеЕсли СтрДлина(Токен) > 2 Тогда
		РазделитьСложнуюОпциюCurl(Токен, ЧастиКоманды, ДопустимыеОпции, Отказ, ОписаниеОшибки);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СобиратьТокен = ДопустимыеОпции.Получить(Токен);
	Если СобиратьТокен = Неопределено Тогда
		Отказ = Истина;
		ОписаниеОшибки = "неожиданный флаг " + Токен;
		Возврат;
	КонецЕсли;
	
	Если СобиратьТокен Тогда
		Опция = НоваяОпцияCurl(Токен);
	Иначе
		Опции.Добавить(НоваяОпцияCurl(Токен));
		Опция = Неопределено;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЧастьКомандыCurl(ЧастиКоманды, ЧастьКоманды, Опция, СобиратьТокен, ЧастиТокена, ОткрывающийСимвол, Отказ, ОписаниеОшибки)
	Если ОткрывающийСимвол = "" Тогда
		ОткрывающийСимвол = ?(
			СтрНачинаетсяС(ЧастьКоманды, """") ИЛИ СтрНачинаетсяС(ЧастьКоманды, "'"),
			Лев(ЧастьКоманды, 1),
			""
		);
	КонецЕсли;
	
	ЧастиТокена.Добавить(ЧастьКоманды);
	
	Если ОткрывающийСимвол = "" ИЛИ СтрЗаканчиваетсяНа(ЧастьКоманды, ОткрывающийСимвол) Тогда
		Если Опция = Неопределено Тогда
			Если ЧастиКоманды.ИдентификаторРесурса <> "" Тогда
				Отказ = Истина;
				ОписаниеОшибки = "команда с множественными запросами не допускается";
				Возврат;
			КонецЕсли;
			
			ЧастиКоманды.ИдентификаторРесурса = ТекстБезКавычек(СтрСоединить(ЧастиТокена), ОткрывающийСимвол);
		Иначе
			Опция.Значение = ТекстБезКавычек(СтрСоединить(ЧастиТокена), ОткрывающийСимвол);
			ЧастиКоманды.Опции.Добавить(Опция);
			Опция = Неопределено;
		КонецЕсли;
		
		ЧастиТокена = Новый Массив;
		СобиратьТокен = Ложь;
		ОткрывающийСимвол = "";
	Иначе
		ЧастиТокена.Добавить(" ");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ЧастиКомандыCurl(Знач СтрокаКоманды, Отказ, ОписаниеОшибки)
	фРезультат = Новый Структура("ИдентификаторРесурса, Опции", "", Новый Массив);
	
	ОткрывающийСимвол = "";
	СобиратьТокен = Ложь;
	ЧастиТокена = Новый Массив;
	Опция = Неопределено;
	ДопустимыеОпции = ОпцииКомандыCurl();
	
	ЧастиКоманды = СтрРазделить(СокрЛ(Сред(СтрокаКоманды, 6)), " ", Истина);
	Для Каждого ЧастьКоманды Из ЧастиКоманды Цикл
		Если СтрДлина(ЧастьКоманды) = 0 Тогда // это пробел
			Если СобиратьТокен Тогда
				ЧастиТокена.Добавить(" ");
			КонецЕсли;
			
			Продолжить;
		КонецЕсли;
		
		Если СтрНачинаетсяС(ЧастьКоманды, "-") И НЕ СобиратьТокен Тогда
			ОбработатьОпциюКомандыCurl(фРезультат.Опции, ЧастиКоманды, ЧастьКоманды, ДопустимыеОпции, Опция, СобиратьТокен, ЧастиТокена, Отказ, ОписаниеОшибки);
			Если Отказ Тогда
				Возврат фРезультат;
			КонецЕсли;
			
			Продолжить;
		КонецЕсли;
		
		ОбработатьЧастьКомандыCurl(фРезультат, ЧастьКоманды, Опция, СобиратьТокен, ЧастиТокена, ОткрывающийСимвол, Отказ, ОписаниеОшибки);
		Если Отказ Тогда
			Возврат фРезультат;
		КонецЕсли;
	КонецЦикла;
	
	Возврат фРезультат;
КонецФункции

&НаКлиенте
Функция НовыйОбъектДанныхCurl()
	Возврат Новый Структура(
		"Схема, ТолькоЗаголовки, Заголовки, ПоляФормы, ПоляHTMLФормы, ПоляКакПараметры, Аутентификация, Таймаут, ИспользоватьРедиректы, КоличествоРедиректов, ПоддержкаСжатогоОтвета, ИмяФайлаТелаОтвета, ТолькоИмяФайла, НормализоватьИдентификаторРесурса, Прокси, BasicАутентификацияПрокси",
		Неопределено,
		Ложь,
		Новый Массив,
		Новый Массив,
		Новый Массив,
		Ложь,
		Новый Структура("Тип, Пользователь, Пароль, Токен, РегионAWS, СервисAWS", Элементы.ТипАутентификации.СписокВыбора[0], "", "", "", "", ""),
		0,
		Ложь,
		Неопределено,
		Ложь,
		Неопределено,
		Ложь,
		Истина,
		Неопределено,
		Ложь
	);
КонецФункции

&НаКлиенте
Функция ЭлементТелаЗапроса(Знач Ключ, Знач Значение, Знач ТипПоля = Неопределено)
	Возврат Новый Структура(
		"Активно, Ключ, Тип, Значение",
		Истина,  // Активно
		Ключ,    // Ключ
		ТипПоля, // Тип
		Значение // Значение
	);
КонецФункции

&НаКлиенте
Процедура ОбработатьСхемуCurl(ДанныеИмпорта, Знач Опция, Отказ, ОписаниеОшибки)
	НайденнаяСхема = Элементы.Схема.СписокВыбора.НайтиПоЗначению(Опция.Значение);
	Если НайденнаяСхема = Неопределено Тогда
		Отказ = Истина;
		ОписаниеОшибки = СтрШаблон("неожиданный тип запроса ""%1""", Опция.Значение);
		Возврат;
	КонецЕсли;
	
	ДанныеИмпорта.Схема = НайденнаяСхема;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПолеHTMLФормыCurl(ДанныеИмпорта, Знач Опция)
	ЗначениеОпции = Опция.Значение;
	Если НЕ ЗначениеЗаполнено(ЗначениеОпции) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Поле Из СтрРазделить(ЗначениеОпции, "&") Цикл
		Если СтрНачинаетсяС(Поле, "@") Тогда
			ТипПоля = 1;
			Ключ = Сред(Поле, 2);
			Значение = Неопределено;
		Иначе
			ТипПоля = 0;
			ЧастиПоля = СтрРазделить(Поле, "=");
			Ключ = ЧастиПоля[0];
			
			ЧастиПоля.Удалить(0);
			
			Значение = ?(ЧастиПоля.Количество() = 0, Неопределено, СтрСоединить(ЧастиПоля, "="));
		КонецЕсли;
		
		ДанныеИмпорта.ПоляHTMLФормы.Добавить(
			ЭлементТелаЗапроса(Ключ, Значение, ТипПоля)
		);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьТекстовоеПолеHTMLФормыCurl(ДанныеИмпорта, Знач Опция)
	ЗначениеОпции = Опция.Значение;
	Если НЕ ЗначениеЗаполнено(ЗначениеОпции) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Поле Из СтрРазделить(ЗначениеОпции, "&") Цикл
		ЧастиПоля = СтрРазделить(Поле, "=");
		Ключ = ЧастиПоля[0];
		
		ЧастиПоля.Удалить(0);
		
		Значение = ?(ЧастиПоля.Количество() = 0, Неопределено, СтрСоединить(ЧастиПоля, "="));
		
		ДанныеИмпорта.ПоляHTMLФормы.Добавить(
			ЭлементТелаЗапроса(Ключ, Значение, 0)
		);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьURLПолеHTMLФормыCurl(ДанныеИмпорта, Знач Опция)
	ЗначениеОпции = Опция.Значение;
	Если НЕ ЗначениеЗаполнено(ЗначениеОпции) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрНачинаетсяС(ЗначениеОпции, "@") Тогда
		Ключ = Сред(ЗначениеОпции, 2);
		Значение = Неопределено;
		ТипПоля = 1;
	ИначеЕсли СтрНачинаетсяС(ЗначениеОпции, "=") Тогда
		Ключ = КодированныйТекстВURL(Сред(ЗначениеОпции, 2));
		Значение = Неопределено;
		ТипПоля = 0;
	Иначе
		ЧастиПоля = СтрРазделить(ЗначениеОпции, "=");
		Ключ = ЧастиПоля[0];
		
		ЧастиПоля.Удалить(0);
		Если ЧастиПоля.Количество() = 0 Тогда
			Значение = Неопределено;
		Иначе
			Значение = СтрСоединить(ЧастиПоля, "=");
			Если СтрНачинаетсяС(Значение, "@") Тогда
				Значение = Сред(Значение, 2);
			КонецЕсли;
			Значение = КодированныйТекстВURL(Значение);
		КонецЕсли;
		ТипПоля = 0;
	КонецЕсли;
	
	ДанныеИмпорта.ПоляHTMLФормы.Добавить(
		ЭлементТелаЗапроса(Ключ, Значение, ТипПоля)
	);
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПолеФормыCurl(ДанныеИмпорта, Знач Опция, Отказ, ОписаниеОшибки)
	ЗначениеОпции = Опция.Значение;
	Если НЕ ЗначениеЗаполнено(ЗначениеОпции) Тогда
		Возврат;
	КонецЕсли;
	
	ЧастиПоля = СтрРазделить(ЗначениеОпции, "=");
	Ключ = ЧастиПоля[0];
	
	ЧастиПоля.Удалить(0);
	Если ЧастиПоля.Количество() = 0 Тогда
		Отказ = Истина;
		ОписаниеОшибки = СтрШаблон("неправильное использование опции ""%1""", Опция.Имя);
		Возврат;
	КонецЕсли;
	
	Значение = СтрСоединить(ЧастиПоля, "=");
	ИндексТипаПоля = ?(СтрНачинаетсяС(Значение, "@"), 1, 0);
	Если ИндексТипаПоля = 1 Тогда
		Значение = Сред(Значение, 2);
	КонецЕсли;
	
	ДанныеИмпорта.ПоляФормы.Добавить(
		ЭлементТелаЗапроса(Ключ, Значение, Элементы.ДанныеФормыТип.СписокВыбора[ИндексТипаПоля])
	);
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьТекстовоеПолеФормыCurl(ДанныеИмпорта, Знач Опция, Отказ, ОписаниеОшибки)
	ЗначениеОпции = Опция.Значение;
	Если НЕ ЗначениеЗаполнено(ЗначениеОпции) Тогда
		Возврат;
	КонецЕсли;
	
	ИндексТипаПоля = 0;
	ЧастиПоля = СтрРазделить(ЗначениеОпции, "=");
	Ключ = ЧастиПоля[0];
	
	ЧастиПоля.Удалить(0);
	Если ЧастиПоля.Количество() = 0 Тогда
		Отказ = Истина;
		ОписаниеОшибки = СтрШаблон("неправильное использование опции ""%1""", Опция.Имя);
		Возврат;
	КонецЕсли;
	
	Значение = СтрСоединить(ЧастиПоля, "=");
	
	ДанныеИмпорта.ПоляФормы.Добавить(
		ЭлементТелаЗапроса(Ключ, Значение, Элементы.ДанныеФормыТип.СписокВыбора[ИндексТипаПоля])
	);
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЗаголовокCurl(ДанныеИмпорта, Знач Опция)
	ЗначениеОпции = Опция.Значение;
	Если НЕ ЗначениеЗаполнено(ЗначениеОпции) Тогда
		Возврат;
	КонецЕсли;
	
	ЧастиПоля = СтрРазделить(ЗначениеОпции, "=");
	Ключ = ЧастиПоля[0];
	
	ЧастиПоля.Удалить(0);
	
	Значение = СтрСоединить(ЧастиПоля, "=");
	
	ДанныеИмпорта.Заголовки.Добавить(
		ЭлементТелаЗапроса(Ключ, Значение)
	);
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДанныеАутентификацииCurl(ДанныеИмпорта, Знач Опция)
	ЗначениеОпции = Опция.Значение;
	Если НЕ ЗначениеЗаполнено(ЗначениеОпции) Тогда
		Возврат;
	КонецЕсли;
	
	ЧастиПоля = СтрРазделить(ЗначениеОпции, ":");
	Пользователь = ЧастиПоля[0];
	
	ЧастиПоля.Удалить(0);
	
	ДанныеИмпорта.Аутентификация.Пользователь = Пользователь;
	ДанныеИмпорта.Аутентификация.Пароль = СтрСоединить(ЧастиПоля, ":");
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДанныеАутентификацииAWSCurl(ДанныеИмпорта, Знач Опция)
	ЗначениеОпции = Опция.Значение;
	Если НЕ ЗначениеЗаполнено(ЗначениеОпции) Тогда
		Возврат;
	КонецЕсли;
	
	ЧастиЗначения = СтрРазделить(ЗначениеОпции, ":");
	Если ЧастиЗначения.Количество() < 2 ИЛИ ЧастиЗначения[0] <> "aws" ИЛИ ЧастиЗначения[1] <> "amz" Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеИмпорта.Аутентификация.Тип = Элементы.ТипАутентификации.СписокВыбора[5];
	
	Если ЧастиЗначения.Количество() > 2 Тогда
		ДанныеИмпорта.Аутентификация.РегионAWS = ЧастиЗначения[2];
	КонецЕсли;
	Если ЧастиЗначения.Количество() > 3 Тогда
		ДанныеИмпорта.Аутентификация.СервисAWS = ЧастиЗначения[3];
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДанныеПрокси(ДанныеИмпорта, Знач Опция, Отказ, ОписаниеОшибки)
	ЗначениеОпции = Опция.Значение;
	Если НЕ ЗначениеЗаполнено(ЗначениеОпции) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеТипаЧисло = Новый ОписаниеТипов("Число");
	ДанныеИмпорта.Прокси = Новый Структура("Сервер, Порт, Пользователь, Пароль", "", 1080, "", "");
	Прокси = ДанныеИмпорта.Прокси;
	
	ПозицияОкончанияПротокола = СтрНайти(ЗначениеОпции, "://");
	Если ПозицияОкончанияПротокола > 0 Тогда
		ЗначениеОпции = Сред(ЗначениеОпции, ПозицияОкончанияПротокола + 3);
	КонецЕсли;

	ПозицияОкончанияАутентификации = СтрНайти(ЗначениеОпции, "@");
	Если ПозицияОкончанияАутентификации > 0 Тогда
		ПозицияРазделителя = СтрНайти(Лев(ЗначениеОпции, ПозицияОкончанияАутентификации - 1), ":");
		Если ПозицияРазделителя = 0 Тогда
			ПозицияРазделителя = ПозицияОкончанияАутентификации;
		КонецЕсли;
		
		ЗакодированныйПользователь = СокрЛП(Лев(ЗначениеОпции, ПозицияРазделителя - 1));
		ЗакодированныйПароль = Прав(
			Лев(ЗначениеОпции, ПозицияОкончанияАутентификации - 1),
			ПозицияОкончанияАутентификации - ПозицияРазделителя - 1
		);
		МножествоСтрок = Новый Соответствие;
		МножествоСтрок.Вставить(ЗакодированныйПользователь);
		МножествоСтрок.Вставить(ЗакодированныйПароль);
		
		МножествоСтрок = РаскодированныеСтрокиURLвURL(МножествоСтрок);
		Прокси.Пользователь = МножествоСтрок.Получить(ЗакодированныйПользователь);
		Прокси.Пароль = МножествоСтрок.Получить(ЗакодированныйПароль);
	КонецЕсли;

	ПозицияОкончанияАутентификации = ПозицияОкончанияАутентификации + 1;
	ЗначениеОпции = Сред(ЗначениеОпции, ПозицияОкончанияАутентификации);

	ПозицияРазделителя = СтрНайти(ЗначениеОпции, ":");
	Если ПозицияРазделителя = 0 Тогда
		ПозицияРазделителя = СтрДлина(ЗначениеОпции) + 1;
	КонецЕсли;

	Прокси.Сервер = СокрЛП(Лев(ЗначениеОпции, ПозицияРазделителя - 1));
	Если ПустаяСтрока(Прокси.Сервер) Тогда
		Отказ = Истина;
		ОписаниеОшибки = "Не указан прокси-сервер";
		Возврат;
	КонецЕсли;
	
	ПортСтрокой = Прав(ЗначениеОпции, СтрДлина(ЗначениеОпции) - ПозицияРазделителя);
	Если НЕ ПустаяСтрока(ПортСтрокой) Тогда
		Прокси.Порт = ОписаниеТипаЧисло.ПривестиЗначение(ПортСтрокой);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОпциюCurl(ДанныеИмпорта, Знач ИдентификаторРесурсаИмпорт, Знач Опция, Отказ, ОписаниеОшибки)
	ИмяОпции = Опция.Имя;
	Если ИмяОпции = "-X" ИЛИ ИмяОпции = "--request" Тогда
		ОбработатьСхемуCurl(ДанныеИмпорта, Опция, Отказ, ОписаниеОшибки);
	ИначеЕсли ИмяОпции = "-I" ИЛИ ИмяОпции = "--head" Тогда
		ДанныеИмпорта.ТолькоЗаголовки = Истина;
	ИначеЕсли ИмяОпции = "-d" ИЛИ ИмяОпции = "--data" ИЛИ ИмяОпции = "--data-ascii" ИЛИ ИмяОпции = "--data-binary" Тогда
		ОбработатьПолеHTMLФормыCurl(ДанныеИмпорта, Опция);
	ИначеЕсли ИмяОпции = "--data-raw" Тогда
		ОбработатьТекстовоеПолеHTMLФормыCurl(ДанныеИмпорта, Опция);
	ИначеЕсли ИмяОпции = "--data-urlencode" Тогда
		ОбработатьURLПолеHTMLФормыCurl(ДанныеИмпорта, Опция);
	ИначеЕсли ИмяОпции = "-F" ИЛИ ИмяОпции = "--form" Тогда
		ОбработатьПолеФормыCurl(ДанныеИмпорта, Опция, Отказ, ОписаниеОшибки);
	ИначеЕсли ИмяОпции = "--form-string" Тогда
		ОбработатьТекстовоеПолеФормыCurl(ДанныеИмпорта, Опция, Отказ, ОписаниеОшибки);
	ИначеЕсли ИмяОпции = "-H" ИЛИ ИмяОпции = "--header" Тогда
		ОбработатьЗаголовокCurl(ДанныеИмпорта, Опция);
	ИначеЕсли ИмяОпции = "-u" ИЛИ ИмяОпции = "--user" Тогда
		ОбработатьДанныеАутентификацииCurl(ДанныеИмпорта, Опция);
	ИначеЕсли ИмяОпции = "--basic" Тогда
		ДанныеИмпорта.Аутентификация.Тип = Элементы.ТипАутентификации.СписокВыбора[1];
	ИначеЕсли ИмяОпции = "--digest" Тогда
		ДанныеИмпорта.Аутентификация.Тип = Элементы.ТипАутентификации.СписокВыбора[3];
	ИначеЕсли ИмяОпции = "--ntlm" ИЛИ ИмяОпции = "--ntlm-wb" Тогда
		ДанныеИмпорта.Аутентификация.Тип = Элементы.ТипАутентификации.СписокВыбора[2];
	ИначеЕсли ИмяОпции = "--oauth2-bearer" Тогда
		ДанныеИмпорта.Аутентификация.Тип = Элементы.ТипАутентификации.СписокВыбора[4];
		ДанныеИмпорта.Аутентификация.Токен = Опция.Значение;
	ИначеЕсли ИмяОпции = "--aws-sigv4" Тогда
		ОбработатьДанныеАутентификацииAWSCurl(ДанныеИмпорта, Опция);
	ИначеЕсли ИмяОпции = "-L" ИЛИ ИмяОпции = "--location" ИЛИ ИмяОпции = "--location-trusted" Тогда
		ДанныеИмпорта.ИспользоватьРедиректы = Истина;
	ИначеЕсли ИмяОпции = "--max-redirs" Тогда
		ДанныеИмпорта.КоличествоРедиректов = Опция.Значение;
	ИначеЕсли ИмяОпции = "--connect-timeout" Тогда
		ОписаниеТипаЧисло = Новый ОписаниеТипов("Число");
		ДанныеИмпорта.Таймаут = ОписаниеТипаЧисло.ПривестиЗначение(Опция.Значение);
	ИначеЕсли ИмяОпции = "--path-as-is" Тогда
		ДанныеИмпорта.НормализоватьИдентификаторРесурса = Ложь;
	ИначеЕсли ИмяОпции = "-G" ИЛИ ИмяОпции = "--get" Тогда
		ДанныеИмпорта.ПоляКакПараметры = Истина;
	ИначеЕсли ИмяОпции = "-x" ИЛИ ИмяОпции = "--proxy" Тогда
		ОбработатьДанныеПрокси(ДанныеИмпорта, Опция, Отказ, ОписаниеОшибки);
	ИначеЕсли ИмяОпции = "--proxy-basic" Тогда
		ДанныеИмпорта.BasicАутентификацияПрокси = Истина;
	ИначеЕсли ИмяОпции = "-:" ИЛИ ИмяОпции = "--next" Тогда
		Отказ = Истина;
		ОписаниеОшибки = "команда с множественными запросами не допускается";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция РезультатРазбораКомандыCurl(ЧастиКоманды, Отказ, ОписаниеОшибки)
	фРезультат = НовыйОбъектДанныхCurl();
	
	Для Каждого Опция Из ЧастиКоманды.Опции Цикл
		ОбработатьОпциюCurl(фРезультат, ЧастиКоманды.ИдентификаторРесурса, Опция, Отказ, ОписаниеОшибки);
		Если Отказ Тогда
			Возврат фРезультат;
		КонецЕсли;
	КонецЦикла;
	
	Возврат фРезультат;
КонецФункции

&НаКлиенте
Функция ТелоЗапросаCurl(ДанныеИмпорта, Отказ, ОписаниеОшибки)
	фРезультат = Новый Структура("Тип, Значение", Элементы.ТипТелаЗапроса.СписокВыбора[0]);
	
	Если ДанныеИмпорта.ПоляHTMLФормы.Количество() = 0 И ДанныеИмпорта.ПоляФормы.Количество() = 0 Тогда
		Возврат фРезультат;
	КонецЕсли;
	
	Если ДанныеИмпорта.ПоляHTMLФормы.Количество() > 0 И ДанныеИмпорта.ПоляФормы.Количество() > 0 Тогда
		Отказ = Истина;
		ОписаниеОшибки = "нельзя совмещать опции полей application/x-www-form-urlencoded и multipart/form-data";
		Возврат фРезультат;
	КонецЕсли;
	
	Если ДанныеИмпорта.Схема = Неопределено Тогда
		ДанныеИмпорта.Схема = Элементы.Схема.СписокВыбора[1].Значение; // POST
	КонецЕсли;
	
	Если ДанныеИмпорта.ПоляHTMLФормы.Количество() > 0 Тогда
		ПервоеПолеТелаЗапроса = ДанныеИмпорта.ПоляHTMLФормы[0];
		
		Если ДанныеИмпорта.ПоляHTMLФормы.Количество() = 1 И ПервоеПолеТелаЗапроса.Значение = Неопределено Тогда
			Если ПервоеПолеТелаЗапроса.Тип = 0 Тогда // это текст
				фРезультат.Тип      = Элементы.ТипТелаЗапроса.СписокВыбора[3]; // raw
				фРезультат.Значение = ПервоеПолеТелаЗапроса.Ключ;
			Иначе // это файл
				фРезультат.Тип      = Элементы.ТипТелаЗапроса.СписокВыбора[4]; // file
				фРезультат.Значение = ПервоеПолеТелаЗапроса.Ключ;
			КонецЕсли;
		Иначе
			фРезультат.Тип      = Элементы.ТипТелаЗапроса.СписокВыбора[2]; // x-www-form-urlencoded
			фРезультат.Значение = ДанныеИмпорта.ПоляHTMLФормы;
		КонецЕсли;
	ИначеЕсли ДанныеИмпорта.ПоляФормы.Количество() > 0 Тогда
		фРезультат.Тип      = Элементы.ТипТелаЗапроса.СписокВыбора[1]; // form
		фРезультат.Значение = ДанныеИмпорта.ПоляФормы;
	КонецЕсли;
	
	Возврат фРезультат;
КонецФункции

&НаКлиенте
Асинх Процедура ПрочитатьКомандуCurl(СтрокаКоманды)
	Отказ = Ложь;
	ОписаниеОшибки = "";
	НачалоТекстаСообщения = "Не удалось прочитать команду curl по причине: ";
	
	СтрокаКоманды = СокрЛП(СтрЗаменить(СтрокаКоманды, "\" + Символы.ПС, " "));
	Если НЕ СтрНачинаетсяС(НРег(СтрокаКоманды), "curl ") Тогда
		СообщитьПользователю(НачалоТекстаСообщения + "команда должна начинаться с имени утилиты curl");
		Возврат;
	КонецЕсли;
	
	ЧастиКоманды = ЧастиКомандыCurl(СтрокаКоманды, Отказ, ОписаниеОшибки);
	Если Отказ Тогда
		СообщитьПользователю(НачалоТекстаСообщения + ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	ДанныеИмпорта = РезультатРазбораКомандыCurl(ЧастиКоманды, Отказ, ОписаниеОшибки);
	Если Отказ Тогда
		СообщитьПользователю(НачалоТекстаСообщения + ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	Если ДанныеИмпорта.НормализоватьИдентификаторРесурса Тогда
		ЧастиКоманды.ИдентификаторРесурса = НормализованныйИдентификаторРесурса(ЧастиКоманды.ИдентификаторРесурса, Отказ, ОписаниеОшибки);
		Если Отказ Тогда
			СообщитьПользователю(НачалоТекстаСообщения + ОписаниеОшибки);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ТелоЗапросаИмпорт = ТелоЗапросаCurl(ДанныеИмпорта, Отказ, ОписаниеОшибки);
	Если Отказ Тогда
		СообщитьПользователю(НачалоТекстаСообщения + ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	Если ДанныеИмпорта.ПоляКакПараметры И ТелоЗапросаИмпорт.Тип = Элементы.ТипТелаЗапроса.СписокВыбора[2] Тогда
		ЧастиКоманды.ИдентификаторРесурса = ИдентификаторРесурсаСПараметрамиИзТела(ЧастиКоманды.ИдентификаторРесурса, ТелоЗапросаИмпорт.Значение);
		ДанныеИмпорта.Схема = Элементы.Схема.СписокВыбора[0]; // GET
		ТелоЗапросаИмпорт.Тип = Элементы.ТипТелаЗапроса.СписокВыбора[0]; // none
	КонецЕсли;
	
	Если ДанныеИмпорта.ТолькоЗаголовки Тогда
		ДанныеИмпорта.Схема = Элементы.Схема.СписокВыбора[4]; // HEAD
	КонецЕсли;
	
	Если ДанныеИмпорта.Схема = Неопределено Тогда
		ДанныеИмпорта.Схема = Элементы.Схема.СписокВыбора[0].Значение; // GET
	КонецЕсли;
	
	ИдентификаторРесурса = ЧастиКоманды.ИдентификаторРесурса;
	Схема = ДанныеИмпорта.Схема;
	
	ТипАутентификации = ДанныеИмпорта.Аутентификация.Тип.Значение;
	Если ТипАутентификации <> Элементы.ТипАутентификации.СписокВыбора[0].Значение Тогда
		СписокТиповАутентификации = Элементы.ТипАутентификации.СписокВыбора;
		Если ТипАутентификации = СписокТиповАутентификации[1].Значение // Basic
			ИЛИ ТипАутентификации = СписокТиповАутентификации[2].Значение // NTLM
			ИЛИ ТипАутентификации = СписокТиповАутентификации[3].Значение // Digest
		Тогда
			ПользовательАутентификации = ДанныеИмпорта.Аутентификация.Пользователь;
			ПарольАутентификации = ДанныеИмпорта.Аутентификация.Пароль;
		ИначеЕсли ТипАутентификации = СписокТиповАутентификации[4].Значение Тогда // Bearer
			ТокенАутентификации = ДанныеИмпорта.Аутентификация.Токен;
		ИначеЕсли ТипАутентификации = СписокТиповАутентификации[5].Значение Тогда // AWS4-HMAC-SHA256
			AWSКлючДоступа = ДанныеИмпорта.Аутентификация.Пользователь;
			AWSСекретныйКлюч = ДанныеИмпорта.Аутентификация.Пароль;
			AWSРегион = ДанныеИмпорта.Аутентификация.РегионAWS;
			AWSСервис = ДанныеИмпорта.Аутентификация.СервисAWS;
		КонецЕсли;
	КонецЕсли;
	
	ЗаголовкиЗапроса.Очистить();
	Для Каждого ЗаголовокИмпорт Из ДанныеИмпорта.Заголовки Цикл
		ЗаполнитьЗначенияСвойств(ЗаголовкиЗапроса.Добавить(), ЗаголовокИмпорт);
	КонецЦикла;
	
	ТипТелаЗапроса = ТелоЗапросаИмпорт.Тип.Значение;
	Если ТелоЗапросаИмпорт.Тип = Элементы.ТипТелаЗапроса.СписокВыбора[1] Тогда // form
		ТелоЗапросаДанныеФормы.Очистить();
		Для Каждого ЭлементТелаЗапросаИмпорт Из ТелоЗапросаИмпорт.Значение Цикл
			ЗаполнитьЗначенияСвойств(ТелоЗапросаДанныеФормы.Добавить(), ЭлементТелаЗапросаИмпорт);
		КонецЦикла;
	ИначеЕсли ТелоЗапросаИмпорт.Тип = Элементы.ТипТелаЗапроса.СписокВыбора[2] Тогда // x-www-form-urlencoded
		ТелоЗапросаДанныеHTMLФормы.Очистить();
		Для Каждого ЭлементТелаЗапросаИмпорт Из ТелоЗапросаИмпорт.Значение Цикл
			ЗаполнитьЗначенияСвойств(ТелоЗапросаДанныеHTMLФормы.Добавить(), ЭлементТелаЗапросаИмпорт);
		КонецЦикла;
	ИначеЕсли ТелоЗапросаИмпорт.Тип = Элементы.ТипТелаЗапроса.СписокВыбора[3] Тогда // raw
		ТелоЗапросаТекст = ТелоЗапросаИмпорт.Значение;
	ИначеЕсли ТелоЗапросаИмпорт.Тип = Элементы.ТипТелаЗапроса.СписокВыбора[4] Тогда // file
		ТелоЗапросаФайл = ТелоЗапросаИмпорт.Значение;
	КонецЕсли;
	
	Таймаут = ДанныеИмпорта.Таймаут;
	
	ИспользоватьСессию = ДанныеИмпорта.ИспользоватьРедиректы;
	Если ДанныеИмпорта.ИспользоватьРедиректы Тогда
		ПорогПеренаправлений = ?(
			ДанныеИмпорта.КоличествоРедиректов = Неопределено,
			50,
			ДанныеИмпорта.КоличествоРедиректов
		);
	КонецЕсли;
	
	ИспользоватьПрокси = (ДанныеИмпорта.Прокси <> Неопределено);
	Если ИспользоватьПрокси Тогда
		СерверПрокси       = ДанныеИмпорта.Прокси.Сервер;
		ПортПрокси         = ДанныеИмпорта.Прокси.Порт;
		ПользовательПрокси = ДанныеИмпорта.Прокси.Пользователь;
		ПарольПрокси       = ДанныеИмпорта.Прокси.Пароль;
		ИспользоватьАутентификациюОСПрокси = НЕ ДанныеИмпорта.BasicАутентификацияПрокси;
		НеИспользоватьПроксиДляЛокальныхАдресов = Ложь;
	КонецЕсли;
	
	ИдентификаторРесурсаПриИзменении(Неопределено);
	ТипАутентификацииПриИзменении(Неопределено);
	ТипТелаЗапросаПриИзменении(Неопределено);
	ИспользоватьПроксиПриИзменении(Неопределено);
	
	Элементы.ГруппаРазделы.ТекущаяСтраница = Элементы.РазделЗапрос;
КонецПроцедуры
#КонецОбласти

&НаКлиенте
Функция НормализованныйИдентификаторРесурса(Знач ИдентификаторРесурсаИмпорт, Отказ, ОписаниеОшибки)
	ПозицияПараметров = СтрНайти(ИдентификаторРесурсаИмпорт, "?");
	ПараметрыURI = ?(
		ПозицияПараметров = 0,
		"",
		Сред(ИдентификаторРесурсаИмпорт, ПозицияПараметров)
	);
	
	URL = ?(
		ПозицияПараметров = 0,
		ИдентификаторРесурсаИмпорт,
		Лев(ИдентификаторРесурсаИмпорт, ПозицияПараметров - 1)
	);
	
	Стек = Новый Массив;
	Для Каждого ЧастьURL Из СтрРазделить(URL, "/", Истина) Цикл
		Если ЧастьURL = ".." Тогда
			Если Стек.Количество() = 0 Тогда
				Отказ = Истина;
				ОписаниеОшибки = "не удалось нормализовать идентификатор ресурса";
				Возврат ИдентификаторРесурсаИмпорт;
			КонецЕсли;
			
			Стек.Удалить(Стек.ВГраница());
		Иначе
			Стек.Добавить(ЧастьURL);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтрСоединить(Стек, "/") + ПараметрыURI;
КонецФункции

&НаКлиенте
Функция ИдентификаторРесурсаСПараметрамиИзТела(Знач ИдентификаторРесурсаИмпорт, Знач ПоляФормыHTML)
	ПозицияПараметров = СтрНайти(ИдентификаторРесурсаИмпорт, "?");
	
	ЧастиПараметров = Новый Массив;
	ЧастиПараметра = Новый Массив;
	Для Каждого Поле Из ПоляФормыHTML Цикл
		ЧастиПараметра.Очистить();
		ЧастиПараметра.Добавить(Поле.Ключ);
		
		Если Поле.Значение <> Неопределено Тогда
			ЧастиПараметра.Добавить(Поле.Значение);
		КонецЕсли;
		
		ЧастиПараметров.Добавить(СтрСоединить(ЧастиПараметра, "="));
	КонецЦикла;
	
	Возврат ИдентификаторРесурсаИмпорт + ?(ПозицияПараметров = 0, "?", "&") + СтрСоединить(ЧастиПараметров, "&");
КонецФункции

&НаКлиенте
Функция ТипыMIMEКартинок()
	фРезультат = Новый Соответствие;
	фРезультат.Вставить(КлиентHTTPПовтИсп.ТипMIMEJPEG(), Истина);
	фРезультат.Вставить(КлиентHTTPПовтИсп.ТипMIMEJPEG(), Истина);
	фРезультат.Вставить(КлиентHTTPПовтИсп.ТипMIMEPNG(), Истина);
	фРезультат.Вставить(КлиентHTTPПовтИсп.ТипMIMEGIF(), Истина);
	фРезультат.Вставить(КлиентHTTPПовтИсп.ТипыMIME().image.tiff, Истина);
	фРезультат.Вставить(КлиентHTTPПовтИсп.ТипыMIME().image.webp, Истина);
	фРезультат.Вставить(КлиентHTTPПовтИсп.ТипыMIME().image.bmp, Истина);
	
	Возврат фРезультат;
КонецФункции

&НаКлиенте
Функция ПараметрыОткрытияФормыКомандыCurl(Знач Текст)
	Возврат Новый Структура("Текст, ЗаголовокФормы, ЦветРедактируемогоТекста", Текст, "Команда curl", WebЦвета.Серебряный);
КонецФункции

&НаСервереБезКонтекста
Функция РазделительПутиСервера()
	Возврат ПолучитьРазделительПутиСервера();
КонецФункции

&НаСервереБезКонтекста
Функция КодированныйТекстВURL(Знач Текст)
	Возврат КодироватьСтроку(Текст, СпособКодированияСтроки.КодировкаURL);
КонецФункции

&НаСервереБезКонтекста
Функция КодированныйURIВURL(Знач URI)
	Кодировано = КодироватьСтроку(URI, СпособКодированияСтроки.URLВКодировкеURL);
	Позиция = СтрНайти(Кодировано, "?");
	Если Позиция = 0 Тогда
		Позиция = СтрДлина(Кодировано) + 1;
	КонецЕсли;                                                                                                                                       
	
	Возврат РаскодироватьСтроку(
		Лев(Кодировано, Позиция-1),
		СпособКодированияСтроки.URLВКодировкеURL
	) + Сред(
		Кодировано,
		Позиция,
		СтрДлина(Кодировано) - Позиция + 1
	);
КонецФункции

&НаСервереБезКонтекста
Функция РаскодированныеСтрокиURLвURL(Знач МножествоСтрок)
	Возврат КлиентHTTP.РаскодированныеСтрокиURLвURL(МножествоСтрок);
КонецФункции

&НаКлиенте
Процедура СообщитьПользователю(Знач Текст)
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = Текст;
	Сообщение.Сообщить();
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДиалогВыбораФайла(Знач Оповещение, Знач Заголовок = "Выбор файла", Знач Фильтр = Неопределено)
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Заголовок                   = Заголовок;
	Диалог.ПредварительныйПросмотр     = Ложь;
	Диалог.ПроверятьСуществованиеФайла = Истина;
	Диалог.МножественныйВыбор          = Ложь;
	
	Если Фильтр <> Неопределено Тогда
		Диалог.Фильтр = Фильтр;
	КонецЕсли;
	
	Диалог.Показать(Оповещение);
КонецПроцедуры

#Область ОБРАТНЫЕ_ВЫЗОВЫ
&НаКлиенте
Процедура КонструкторURIЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторРесурса = Результат;
	
	РассчитатьПараметрыИдентификатораРесурса();
КонецПроцедуры

&НаКлиенте
Процедура РедакторКомандыCurlЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	ПрочитатьКомандуCurl(Результат);
КонецПроцедуры

&НаКлиенте
Процедура РедакторCookiesЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат <> Неопределено Тогда
		ДополнительныеПараметры.Печенье = Результат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РедакторПараметраЗапросаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ПараметрыЗапроса.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДвойнойПеренос = Символы.ПС + Символы.ПС;
	Пока СтрНайти(Результат, ДвойнойПеренос) > 0 Цикл
		Результат = СтрЗаменить(Результат, ДвойнойПеренос, Символы.ПС);
	КонецЦикла;
	
	ТекущиеДанные[ДополнительныеПараметры] = СтрЗаменить(Результат, Символы.ПС, " ");
	
	РассчитатьПараметрыИдентификатораРесурса();
КонецПроцедуры

&НаКлиенте
Процедура РедакторПарольАутентификацииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПарольАутентификации = СтрЗаменить(Результат, Символы.ПС, "");
КонецПроцедуры

&НаКлиенте
Процедура РедакторТокенАутентификацииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТокенАутентификации = СтрЗаменить(Результат, Символы.ПС, "");
КонецПроцедуры

&НаКлиенте
Процедура РедакторИмениЗаголовкаЗапросаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ЗаголовкиЗапроса.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.Ключ = ИсправленноеИмяЗаголовкаЗапроса(Результат);
КонецПроцедуры

&НаКлиенте
Процедура РедакторЗначенияЗаголовкаЗапросаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ЗаголовкиЗапроса.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДвойнойПеренос = Символы.ПС + Символы.ПС;
	Пока СтрНайти(Результат, ДвойнойПеренос) > 0 Цикл
		Результат = СтрЗаменить(Результат, ДвойнойПеренос, Символы.ПС);
	КонецЦикла;
	
	ТекущиеДанные.Значение = СтрЗаменить(Результат, Символы.ПС, " ");
КонецПроцедуры

&НаКлиенте
Процедура РедакторПоляТелаЗапросаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = ДополнительныеПараметры.ТаблицаФормы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат <> Неопределено Тогда
		ТекущиеДанные[ДополнительныеПараметры.ИмяПоля] = Результат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаПоляФормыЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	Если ВыбранныеФайлы <> Неопределено Тогда
		ДополнительныеПараметры.Значение = ВыбранныеФайлы[0];
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаТелаЗапросаЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	Если ВыбранныеФайлы <> Неопределено Тогда
		ТелоЗапросаФайл = ВыбранныеФайлы[0];
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РедакторЗначенияЗаголовкаОтветаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Возврат;
КонецПроцедуры
#КонецОбласти
#КонецОбласти
